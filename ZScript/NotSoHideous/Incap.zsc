// ------------------------------------------------------------
// CRAAAAAAAAAAAWWWWLING IN MY SKIN
// ------------------------------------------------------------
class NSHIncapWeapon:HDIncapWeapon Replaces HDIncapWeapon{
	action void A_PickInventoryType(){
		static const class<inventory> types[]={
			"NSHIncapWeapon",
			"PortableBerserkpack",
			"NSHPortableStimpack",
			"DERPUsable",
			"HDFragGrenadeAmmo"
		};

		if(
			!invoker.weaponstatus[INCS_INDEX]
			&&!countinv("NSHPortableStimpack")
			&&countinv("PortableMedikit")
		){
			player.cmd.buttons|=BT_USE;
			UseInventory(findinventory("PortableMedikit"));
			invoker.spentinjecttype="SpentStim";
			invoker.injecttype="InjectStimDummy";
			return;
		}

		int which=invoker.weaponstatus[INCS_INDEX];
		do{
			which++;
			if(which>=types.size())which=0;
		}while(!countinv(types[which]));
		invoker.weaponstatus[INCS_INDEX]=which;

		let inventorytype=types[which];
		if(
			!countinv(inventorytype)
		){
			inventorytype="NSHIncapWeapon";
			return;
		}else if(inventorytype=="PortableBerserkPack"){
			invoker.spentinjecttype="SpentZerk";
			invoker.injecttype="InjectZerkDummy";
		}
		else if(inventorytype=="NSHPortableStimpack"){
			invoker.spentinjecttype="SpentStim";
			invoker.injecttype="InjectStimDummy";
		}
		else if(inventorytype=="HDFragGrenadeAmmo"){
			invoker.spentinjecttype="HDFragSpoon";
			invoker.injecttype="HDFragGrenadeRoller";
		}
		else if(inventorytype=="DERPUsable"){
			invoker.spentinjecttype="";
			invoker.injecttype="DERPUsable";
		}
		invoker.inventorytype=inventorytype;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		super.DrawHUDStuff(sb,hdw,hpl);
		if(hpl.player.cmd.buttons&BT_ATTACK)return;
		int yofss=weaponstatus[INCS_YOFS]-((hpl.player.cmd.buttons&BT_ALTATTACK)?(50+5*hpl.flip):60);
		vector2 bob=(hpl.wepbob.x*0.2,hpl.wepbob.y*0.2+yofss);
		if(inventorytype=="HDFragGrenadeAmmo"){
			sb.drawimage(
				(weaponstatus[0]&INCF_PINOUT)?"FRAGF0":"FRAGA0",
				bob,sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.6,1.6)
			);
		}else if(inventorytype=="PortableBerserkpack"){
			sb.drawimage("PSTRA0",bob,sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.,2.));
		}else if(inventorytype=="PortableStimpack"){
			sb.drawimage("STIMA0",bob,sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.,2.));
		}else if(inventorytype=="DERPUsable"){
			sb.drawimage("DPICA5",bob,sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TRANSLATABLE,scale:(2.,2.));
		}
	}
	override string gethelptext(){
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		
		return
		LWPHELP_FIRE..StringTable.Localize("$CRAWWH_FIRE")
		..LWPHELP_RELOAD..StringTable.Localize("$CRAWWH_RELOAD")
		..LWPHELP_ALTFIRE..StringTable.Localize("$CRAWWH_ALTFIRE")
		..LWPHELP_FIREMODE..StringTable.Localize("$CRAWWH_FMODE")
		..((
			hdplayerpawn(owner)
			&&hdplayerpawn(owner).incapacitated
			&&hdplayerpawn(owner).incaptimer<1
		)?(WEPHELP_BTCOL..StringTable.Localize("$CRAWWH_JUMP")..WEPHELP_RGCOL..StringTable.Localize("$CRAWWH_GETUP")):"")
		;
	}
	states{
	nope:
		---- A 1 A_ClearRefire();
		---- A 0{
			if(player.cmd.buttons&(
					BT_ATTACK|
					BT_ALTATTACK|
					BT_RELOAD|
					BT_ZOOM|
					BT_USER1|
					BT_USER2|
					BT_USER3|
					BT_USER4|
					BT_JUMP
			))setweaponstate("nope");
			else setweaponstate("ready");
		}
	select:
		TNT1 A 30;
		goto nope;
	ready:
		TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER2|WRF_ALLOWRELOAD|WRF_DISABLESWITCH);
		TNT1 A 1{
			invoker.weaponstatus[INCS_YOFS]=invoker.weaponstatus[INCS_YOFS]*2/3;
			Console.Printf(""..invoker.GetClassName());
			A_SetHelpText();
		}
		goto readyend;
	try2:
		TNT1 A 0 A_SetTics(max(0,random(0,100-health)));
		goto super::try2;
	firemode:
		TNT1 A 1{
			int yofs=max(4,invoker.weaponstatus[INCS_YOFS]*3/2);
			if(
				yofs>100
				&&pressingfiremode()
			)setweaponstate("fumbleforsomething");
			else invoker.weaponstatus[INCS_YOFS]=yofs;
		}
		TNT1 A 0 A_JumpIf(pressingfiremode(),"firemode");
		goto readyend;
	fumbleforsomething:
		TNT1 A 20 A_StartSound("weapons/pocket",CHAN_WEAPON);
		TNT1 A 0 A_PickInventoryType();
		goto nope;
	altfire:
	althold:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&INCF_PINOUT,"holdfrag");
		TNT1 A 10 A_JumpIf(health<HDCONST_MINSTANDHEALTH&&!random(0,7),"nope");
		TNT1 A 20 A_StartSound("weapons/pocket",CHAN_WEAPON);
		TNT1 A 0 A_JumpIf(!countinv(invoker.inventorytype),"fumbleforsomething");
		TNT1 A 0 A_JumpIf(invoker.inventorytype=="DERPUsable","throwderp");
		TNT1 A 0 A_JumpIf(invoker.inventorytype=="HDFragGrenadeAmmo","pullpin");
		TNT1 A 0 A_JumpIf(
			!HDWoundFixer.CheckCovered(self,true)
			&&(
				invoker.inventorytype=="PortableStimpack"
				||invoker.inventorytype=="PortableBerserkpack"
			)
			,"injectstim");
		goto nope;
	injectstim:
		TNT1 A 1{
			A_SetBlend("7a 3a 18",0.1,4);
			A_MuzzleClimb(0,2);
			A_PlaySkinSound(SKINSOUND_MEDS,"*usemeds");
			A_StartSound("misc/bulletflesh",CHAN_WEAPON,CHANF_OVERLAP);

			actor a=spawn(invoker.injecttype,pos,ALLOW_REPLACE);
			a.accuracy=40;a.target=self;
		}
		TNT1 A 4 A_MuzzleClimb(0,-0.5,0,-0.5,0,-0.5,0,-0.5);
		TNT1 A 6;
		TNT1 A 0{
			let iii=HDWeapon(findinventory(invoker.inventorytype));
			if(!!iii){
				iii.weaponstatus[0]|=INJECTF_SPENT;
				DropInventory(iii,1);
			}
			invoker.inventorytype="";
		}
		goto nope;
	pullpin:
		TNT1 A 3 A_JumpIf(health<HDCONST_MINSTANDHEALTH&&!random(0,4),"readyend");
		TNT1 A 0{
			if(!countinv(invoker.inventorytype))return;
			invoker.weaponstatus[0]|=INCF_PINOUT;
			A_StartSound("weapons/fragpinout",CHAN_WEAPON,CHANF_OVERLAP);
			A_TakeInventory(invoker.inventorytype,1);
		}
		//fallthrough
	holdfrag:
		TNT1 A 2 A_ClearRefire();
		TNT1 A 0{
			int buttons=player.cmd.buttons;
			if(buttons&BT_RELOAD)setweaponstate("pinbackin");
			else if(buttons&BT_ALTFIRE)setweaponstate("holdfrag");
		}
		TNT1 A 10;
		TNT1 A 0{invoker.DropFrag();}
		goto readyend;
	pinbackin:
		TNT1 A 10;
		TNT1 A 0 A_JumpIf(health<HDCONST_MINSTANDHEALTH&&!random(0,2),"holdfrag");
		TNT1 A 20{
			A_StartSound("weapons/fragpinout",CHAN_WEAPON);
			invoker.weaponstatus[0]&=~INCF_PINOUT;
			A_GiveInventory("HDFragGrenadeAmmo",1);
		}
		goto nope;
	throwderp:
		TNT1 A 4 A_StartSound("weapons/pismagclick",CHAN_WEAPON);
		TNT1 A 2 A_StartSound("derp/crawl",CHAN_WEAPON,CHANF_OVERLAP);
		TNT1 A 1{
			let derpvoker=DERPUsable(findinventory("DERPUsable"));
			if(!derpvoker)return;
			if(derpvoker.weaponstatus[0]&DERPF_BROKEN){
				setweaponstate("readytorepair");
				return;
			}

			actor a;int b;
			[b,a]=A_SpawnItemEx("DERPBot",12,0,height*0.8,
				cos(pitch)*6,0,-sin(pitch)*6,0,
				SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|
				SXF_SETMASTER|SXF_TRANSFERTRANSLATION|SXF_SETTARGET
			);
			let derp=derpbot(a);
			derp.vel+=vel;
			derp.cmd=derpvoker.weaponstatus[DERPS_MODE];
			derp.botid=derpvoker.weaponstatus[DERPS_BOTID];
			derp.ammo=derpvoker.weaponstatus[DERPS_AMMO];

			DERPController.GiveController(self);

			derpvoker.goawayanddie();
			invoker.inventorytype="";
		}
		goto nope;
	}
	override void OwnerDied(){
		DropFrag();
		super.OwnerDied();
	}
	override void DetachFromOwner(){
		DropFrag();
		super.DetachFromOwner();
	}
	override inventory CreateTossable(){
		if(owner){
			owner.A_DropInventory("PortableMedikit");
			owner.A_DropInventory("HDMedikitter");
		}
		return null;
	}
	void DropFrag(){
		if(
			!(weaponstatus[0]&INCF_PINOUT)
			||!owner
		)return;
		weaponstatus[0]&=~INCF_PINOUT;
		//create the spoon
		owner.A_SpawnItemEx(spentinjecttype,
			-4,-3,owner.height-8,
			1,2,3,
			frandom(33,45),SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		//create the grenade
		owner.A_SpawnItemEx(injecttype,
			0,0,owner.height,
			2,0,-2,
			0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		inventorytype="";
	}
	enum CrawlingInts{
		INCF_PINOUT=1,
		INCS_YOFS=1,
		INCS_INDEX=2,
	}
}