// ------------------------------------------------------------
// Super Shotgun
// ------------------------------------------------------------

Class MRF3Actor_SlayerShells_Tic: Actor{}
Class MRF3Class_SlayerShells_Tic: object Ui
{
	Override Void OnDestroy()
	{
		Let Plr = Players[ConsolePlayer];
		Let Slay = NSHSlayer(Plr.ReadyWeapon);
		if(!Slay)Return;
			
		if(StatusBar.artiflashTick==-1)
		{
			StatusBar.artiflashTick = 3;
		}
		else
		{
			String Com = "MRF3_String";
			String Side = "MRF3SideL";
			
			
			if(StatusBar.artiflashTick<2)EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."Cham "..StatusBar.artiflashTick..": "..Slay.Shells[Slay.weaponstatus[SLAYS_SHELL1+StatusBar.artiflashTick]]);
			else EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."\cd======");
		}
	}
}

Class MRF3Actor_SlayerSide_Tic: Actor{}
Class MRF3Class_SlayerSide_Tic: object Ui
{
	Override Void OnDestroy()
	{
		Let Plr = Players[ConsolePlayer];
		Let Slay = NSHSlayer(Plr.ReadyWeapon);
		if(!Slay)Return;
			
		if(StatusBar.artiflashTick==-1)StatusBar.artiflashTick = Slay.Weaponstatus[SHOTS_SIDESADDLE]+1;
		else
		{
			String Com = "MRF3_String";
			String Side = "MRF3SideL";
			
			
			if(StatusBar.artiflashTick<Slay.Weaponstatus[SHOTS_SIDESADDLE])EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."Side "..(StatusBar.artiflashTick+1)..": "..Slay.Shells[Slay.weaponstatus[SLAYS_SSHELL1+StatusBar.artiflashTick]]);
			else EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."\cv=======");
		}
	}
}

Class MRF3Actor_SlayerHand_Tic: Actor{}
Class MRF3Class_SlayerHand_Tic: object Ui
{
	Override Void OnDestroy()
	{
		Let Plr = Players[ConsolePlayer];
		Let Slay = NSHSlayer(Plr.ReadyWeapon);
		if(!Slay)Return;
		
		if(StatusBar.artiflashTick==-1)StatusBar.artiflashTick = Slay.HandShell.Size();
		else
		{
			String Com = "MRF3_String";
			String Side = "MRF3SideL";
			
			EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."InHand "..(StatusBar.artiflashTick)..": "..Slay.Shells[Slay.HandShell[StatusBar.artiflashTick]]);
		}
	}
}

class NSHSlayer:Slayer{// replaces Slayer{
	bool Checking;
	int ShellType;
	Array<Int> HandShell;
	
	Array<String> Shells, Spents, Fumbls, Names, Sprites, Bullets, Pickups;
	Array<Double> PowersMin, PowersMax;//For god's sake, add vector2 dynamic arrays PLEASE
	Array<int> Pellets;
	
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			String Sprt, AmmoType;
			Switch(ShellType)
			{
				Case 0:Sprt = "SHL1A0";AmmoType = "HDShellAmmo";Break;
				Case 1:Sprt = "SLG1A0";AmmoType = "HDSlugAmmo";Break;
				Case 2:Sprt = "XLS1A0";AmmoType = "HDExplosiveShellAmmo";Break;
				Case 3:Sprt = "LLS1A0";AmmoType = "HDLLShellAmmo";Break;
			}
			
			sb.drawimage(Sprt,(-47,-10),sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv(AmmoType),-46,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int loffs=-31;int rofs=-18;
		if(hdw.weaponstatus[0]&SLAYF_DOUBLE){
			loffs=-27;rofs=-23;
			sb.drawimage("STBURAUT",(-23,-17),sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[SLAYS_CHAMBER1]>1){
			sb.drawrect(loffs,-15,3,5);
			sb.drawrect(loffs,-9,3,2);
		}else if(hdw.weaponstatus[SLAYS_CHAMBER1]>0){
			sb.drawrect(loffs,-9,3,2);
		}
		if(hdw.weaponstatus[SLAYS_CHAMBER2]>1){
			sb.drawrect(rofs,-15,3,5);
			sb.drawrect(rofs,-9,3,2);
		}else if(hdw.weaponstatus[SLAYS_CHAMBER2]>0){
			sb.drawrect(rofs,-9,3,2);
		}
		for(int i=hdw.weaponstatus[SHOTS_SIDESADDLE];i>0;i--){
			sb.drawrect(-11-i*2,-5,1,3);
		}
		if(hdw.weaponstatus[SLAYF_SAFETY])sb.drawimage("SAFETY",(-23,-13),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
	}
	
	override string gethelptext(){
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		
		String CurShell, NextShell, PrevShell;
		if(Names.Size()>1)
		{
			CurShell = Names[ShellType];
			
			if(ShellType<Names.Size()-1) NextShell = Names[shellType+1];
			else NextShell = Names[0];
			
			if(ShellType>0) PrevShell = Names[shellType-1];
			else PrevShell = Names[Names.Size()-1];
		}
		
		return
		LWPHELP_FIRE..StringTable.Localize("$SLAWH_FIRE")..weaponstatus[SLAYS_CHOKE1]..")\n"
		..LWPHELP_ALTFIRE..StringTable.Localize("$SLAWH_ALTFIRE")..weaponstatus[SLAYS_CHOKE2]..")\n"
		..LWPHELP_RELOAD..StringTable.Localize("$SLAWH_RELOAD")
		..LWPHELP_ALTRELOAD..StringTable.Localize("$SLAWH_ALTRELOAD")
		..LWPHELP_FIREMODE..StringTable.Localize("$SLAWH_FMODE")
		..LWPHELP_FIREMODE.."+"..LWPHELP_RELOAD..StringTable.Localize("$SLAWH_FMODPRELOAD")
		..(Names.Size()>1?LWPHELP_FIREMODE.."+"..LWPHELP_ALTRELOAD..StringTable.Localize("$SHTG_CHANGESHELLS")..CurShell.."-->"..NextShell.."\n":"")
		..(Names.Size()>1?LWPHELP_FIREMODE.."+"..LWPHELP_ZOOM.."+"..LWPHELP_ALTRELOAD..StringTable.Localize("$SHTG_CHANGESHELLSBACK")..PrevShell.."<--"..CurShell.."\n":"")
		..LWPHELP_USE.."+"..LWPHELP_UNLOAD..StringTable.Localize("$SLAWH_UPUNL")//"  Steal ammo from Hunter\n"
		..LWPHELP_UNLOADUNLOAD
		..LWPHELP_USE.."+"..LWPHELP_FIREMODE..StringTable.Localize("$LWPHELP_SAFETY")
		..LWPHELP_ZOOM.."+"..LWPHELP_ALTRELOAD..StringTable.Localize("$LWPHELP_CHECKSIDESADDLES")
		;
	}
	
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-32+bob.y,32,38,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.1;
		int Light = Owner.Cursector.LightLevel * 1.75;
		if(owner.player.fixedlightlevel==1)Light = 255;
		if(bplayingid)
		{
			sb.drawimage(
				"dbfrntsit",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
			);
			if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
				sb.drawimage(
					"dbblftsit",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			col:color(255-Light,0,0,0));
		}
		else{
			if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
			sb.fill(
				color(250,int(Light*0.08),int(Light*0.08),int(Light*0.08)),
				bobb.x-9,bobb.y+2,18,3,
				sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
			);
			else
			sb.fill(
				color(250,26,26,26),
				bobb.x-9,bobb.y+2,18,3,
				sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
			);
			sb.fill(
				color(250,66,66,66),
				bobb.x-2,bobb.y+2,4,1,
				sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
			);
		}
		sb.SetClipRect(cx,cy,cw,ch);

		sb.drawimage(
			"dbbaksit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
		if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
		sb.drawimage(
			"dbbaksit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9, col:Color(255-Light,0,0,0)
		);
	}
	override void PostBeginPlay(){
		if(Wads.CheckNumForName("SHT2B0",wads.ns_sprites,-1,false)<0){
			if(owner){
				actor ownor=owner;
				ownor.A_GiveInventory("NSHHunter");
				if(
					ownor.player
					&&min(level.time,ownor.getage())<10
				){
					HDWeaponSelector sss;
					thinkeriterator ssi=ThinkerIterator.create("HDWeaponSelector");
					while(sss=HDWeaponSelector(ssi.next(true))){
						if(
							sss.other==ownor
							&&(sss.weptype=="NSHSlayer"||sss.weptype=="Slayer")
						){
							sss.weptype="NSHHunter";
							break;
						}
					}
				}
				ownor.A_Log(StringTable.Localize("$SLAYERUNAVAILABLE"),true);
			}else{
				spawn("NSHHunter",pos,ALLOW_REPLACE);
			}
			destroy();
			return;
		}
		
		String Shel = "HDShellAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_00");
			Spents.Push("HDSpentShell");
			Fumbls.Push("HDFumblingShell");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELL00"));
			Sprites.Push("SHL1A0");
			PowersMin.Push(.9);
			PowersMax.Push(1.05);
			Pickups.Push("ShellPickup");
			Pellets.Push(10);
		}
		
		Shel = "HDSlugAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_Slug");
			Spents.Push("HDSpentSlug");
			Fumbls.Push("HDFumblingSlug");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELLSLUG"));
			Sprites.Push("SLG1A0");
			PowersMin.Push(.91);
			PowersMax.Push(1.06);
			Pickups.Push("SlugPickup");
			Pellets.Push(1);
		}
		
		Shel = "HDExplosiveShellAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_12GuageSlugMissile");
			Spents.Push("HDSpentExplosiveShell");
			Fumbls.Push("HDFumblingExplosiveShell");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELLEXPL"));
			Sprites.Push("XLS1A0");
			PowersMin.Push(1.4);
			PowersMax.Push(1.6);
			Pickups.Push("ExplosiveShellPickup");
			Pellets.Push(1);
		}
		
		Shel = "HDLLShellAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_00Rubber");
			Spents.Push("HDLLSpentShell");
			Fumbls.Push("HDLLFumblingShell");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELLLL"));
			Sprites.Push("LLS1A0");
			PowersMin.Push(.9);//According to llhunter from RadTechWeaponsPack
			PowersMax.Push(1.05);//
			Pickups.Push("LLShellPickup");
			Pellets.Push(10);//
		}
		
		super.postbeginplay();
	}
	
	Action Void EmptyHand(int amt=-1,bool careful=false){
		if(!amt)return;
		while(invoker.handshell.Size()>0){
			
			if(careful&&!A_JumpIfInventory(invoker.Shells[invoker.HandShell[invoker.HandShell.Size()-1]],0,"null")){
				HDF.Give(self,invoker.Shells[invoker.HandShell[invoker.HandShell.Size()-1]],1);
				invoker.handshell.Pop();
 			}else if(invoker.handshell.Size()>=4){
				Bool Same = true;
				Int Prev = -1;
				For(int i=0;i<4;i++){if(Prev!= -1 && Prev!=invoker.HandShell[i]){Same=false;Break;}Prev = invoker.HandShell[i];}
				if(Same)
				{
					For(int i=4;i>=0;i--)invoker.handshell.Pop();
					A_SpawnItemEx(invoker.Pickups[Prev],
						cos(pitch)*1,1,height-7-sin(pitch)*1,
						cos(pitch)*cos(angle)*frandom(1,2)+vel.x,
						cos(pitch)*sin(angle)*frandom(1,2)+vel.y,
						-sin(pitch)+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}
				else
				{
					A_SpawnItemEx(invoker.Fumbls[Prev],
						cos(pitch)*5,1,height-7-sin(pitch)*5,
						cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
						cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
						-sin(pitch)*random(1,4)+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
					invoker.handshell.Pop();
				}
			}else{
				A_SpawnItemEx(invoker.Fumbls[invoker.HandShell[invoker.HandShell.Size()-1]],
					cos(pitch)*5,1,height-7-sin(pitch)*5,
					cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
					cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
					-sin(pitch)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.handshell.Pop();
			}
		}
	}
	
	action void A_UnloadSideSaddle(){
		int uamt=clamp(invoker.weaponstatus[SHOTS_SIDESADDLE],0,4);
		if(!uamt)return;
		Array<int> Grabbed;
		int Give;
		For(int i=0;i<uamt;i++)
		{
			Grabbed.Push(invoker.weaponstatus[SLAYS_SSHELL1+invoker.weaponstatus[SHOTS_SIDESADDLE]-1]);
			invoker.weaponstatus[SHOTS_SIDESADDLE]--;
			Class<HDPickUp> Amo = invoker.Shells[Grabbed[i]];
			Give += HDPickup.MaxGive(self, Amo, GetDefaultByType(Amo).Bulk);
		}

		if(Give>0&&pressingunload()){
			A_SetTics(16);
			uamt-=Min(Uamt, Give);
			For(int i=0;i<Grabbed.Size();i++)A_GiveInventory(invoker.Shells[Grabbed[i]], 1);
		}
		else {For(int i=0;i<Grabbed.Size();i++)invoker.HandShell.Push(Grabbed[i]);Grabbed.Clear();}

		A_StartSound("weapons/pocket",9);
		EmptyHand(uamt);
	}
		
	action void A_CannibalizeOtherShotgun(){
		let hhh=NSHHunter(findinventory("NSHHunter"));
		if(hhh){
			For(int i=0;i<Min(hhh.weaponstatus[SHOTS_SIDESADDLE], 4);i++)
			{
				A_GiveInventory(hhh.Shells[hhh.weaponstatus[HUNTS_SSHELL1+hhh.weaponstatus[SHOTS_SIDESADDLE]-1]], 1);
				hhh.weaponstatus[SHOTS_SIDESADDLE]--;
			}
		}
	}
		
	static void FireCustom(actor caller,bool right,int choke=7){
		let sss=NSHSlayer(caller.findinventory("NSHSlayer"));
		if(!sss)Return;
		
		choke=sss.weaponstatus[right?SLAYS_CHOKE2:SLAYS_CHOKE1];
		int ShellType = sss.weaponstatus[SLAYS_SHELL1+Right];
		double shotpower=FRandom(sss.PowersMin[ShellType], sss.PowersMax[ShellType]);
		sss.shotpower=shotpower;
		
		double spread=3.;
		double speedfactor=1.2;
		
		choke=clamp(choke,0,7);
		spread=6.5-0.5*choke;
		speedfactor=1.+0.02857*choke;

		spread*=shotpower;
		speedfactor*=shotpower;
		vector2 barreladjust=(0.8,-0.05);
		if(right)barreladjust=-barreladjust;
		HDBulletActor.FireBullet(caller,"HDB_wad",xyofs:barreladjust.x,aimoffx:barreladjust.y);
		String Shot = sss.Bullets[ShellType];
		int Pellets = sss.Pellets[ShellType];

		Let p = HDBulletActor.FireBullet(caller,Shot,xyofs:barreladjust.x,
			spread:spread,aimoffx:barreladjust.y,speedfactor:speedfactor,amount:Pellets
		);
		
		distantnoise.make(p,"world/shotgunfar");
	}
	
	NSHA_SmokeContainer FireSmokes[50];
	
	states{
	
	SmokeLay:
		NSHS A 0{
					A_OverlayFlags(OverlayId(), PSPF_ADDBOB|PSPF_ADDWEAPON, false);
					A_OverlayFlags(OverlayId(), PSPF_ALPHA|PSPF_RENDERSTYLE, True);
					A_OverlayRenderStyle(OverlayId(), CVar.FindCVar("mrnsha_muzzlesmoke").GetBool()?STYLE_TRANSLUCENT:STYLE_NONE);
					A_OverlayPivot(OverlayId(), .5, .5);
					//Float Scale = FRandom(.05, .06);
					//A_OverlayScale(OverlayId(), Scale, Scale);
					//A_OverlayOffset(OverlayId(), 128+HDPlayerPawn(Self).crossbob.X, 113+HDPlayerPawn(Self).crossbob.Y);
					Player.GetPSprite(OverlayId()).Alpha=FRandom(.3, .5);
				}
		NSHS A 1;
		NSHS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1{
					int Index = OverlayId()-PSP_FLASH-10;
					A_OverlayFlags(OverlayId(), PSPF_INTERPOLATE, true);
					
					Player.GetPSprite(OverlayId()).Alpha-=.01;
					
					Float Scale = (FRandom(.09, .13) + (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle))*.2);
					Scale -= (invoker.FireSmokes[Index].Vel.Y);
					Scale *= .1;
					A_OverlayScale(OverlayId(), Max(0, Scale), Max(0, Scale), WOF_ADD);
					
					if(Player.GetPSprite(OverlayId()).Scale.Length()>15)A_OverlayRenderStyle(OverlayId(), STYLE_NONE);
					Player.GetPSprite(OverlayId()).Y += Player.Cmd.Pitch*.02 + Max(0, (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle)*3));
					Player.GetPSprite(OverlayId()).Y -= invoker.FireSmokes[Index].Vel.Z*Cos(Pitch);
					Player.GetPSprite(OverlayId()).Y += invoker.FireSmokes[Index].Vel.Y*Sin(Pitch);
					Player.GetPSprite(OverlayId()).X += Player.Cmd.Yaw*.02 + (Vel.X*Cos(Angle+90) + Vel.Y*Sin(Angle+90)*5);
					Player.GetPSprite(OverlayId()).X += invoker.FireSmokes[index].Vel.X;
				}
		TNT1 A 0 {invoker.FireSmokes[OverlayId()-PSP_FLASH-10].Destroy();invoker.FireSmokes[OverlayId()-PSP_FLASH-10]=Null;}
		Stop;
	
	select0:
		SH2G A 0{invoker.swapbarrels=cvar.getcvar("hd_swapbarrels",player);invoker.Checking=false;}
		SH2G A 1;
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		goto select0small;
	deselect0:
		SH2G A 0 {invoker.Checking=false;}
		goto deselect0small;
	Safety:
		---- A 0 {A_StartSound("weapons/fmswitch",CHAN_WEAPON,CHANF_OVERLAP,0.4);
			invoker.weaponstatus[SLAYF_SAFETY]=!invoker.weaponstatus[SLAYF_SAFETY];}
		Goto Nope;
	fire:
	altfire:
		#### A 0 A_ClearRefire();
	ready:
		SH2G A 0; //let the PostBeginPlay handle the presence of the relevant sprite
		SH2G A 0 A_JumpIf(pressingunload()&&(pressinguse()||pressingzoom()),"cannibalize");
		#### A 0 A_JumpIf(pressinguse()&&pressingFiremode(),"Safety");
		#### A 1{
			if(PressingFireMode()){
				invoker.weaponstatus[0]|=SLAYF_DOUBLE;
				if(pressingreload()&&invoker.weaponstatus[SHOTS_SIDESADDLE]<12){
					invoker.weaponstatus[0]&=~SLAYF_DOUBLE;
					setweaponstate("reloadss");
					return;
				}
				if(JustPressed(BT_USER1) && invoker.Shells.Size()>1){
					if(PressingZoom())
					{
						if(invoker.shelltype>0)invoker.shelltype--;
						else invoker.shelltype=3;
					}
					else
					{
						if(invoker.shelltype<3)invoker.shelltype++;
						else invoker.shelltype=0;
					}
					A_SetHelpText();
					Return;
				}
			}else invoker.weaponstatus[0]&=~SLAYF_DOUBLE;

			int pff;
			if(invoker.swapbarrels&&invoker.swapbarrels.getbool()){
				pff=PressingAltfire();
				if(PressingFire())pff|=2;
			}else{
				pff=PressingFire();
				if(PressingAltfire())pff|=2;
			}

			bool ch1=invoker.weaponstatus[SLAYS_CHAMBER1]==2;
			bool ch2=invoker.weaponstatus[SLAYS_CHAMBER2]==2;

			bool dbl=invoker.weaponstatus[0]&SLAYF_DOUBLE;
			if(!invoker.weaponstatus[SLAYF_SAFETY])
			{
			if(ch1&&ch2){
				if(pff==3){
					A_Overlay(PSP_FLASH,"flashboth");
					return;
				}
				else if(pff&&dbl){
					setweaponstate("double");
					return;
				}
			}else if(pff&&dbl){
				if(ch1)A_Overlay(11,"flashleft");
				if(ch2)A_Overlay(12,"flashright");
			}
			if(ch1&&pff%2)A_Overlay(11,"flashleft");
			else if(ch2&&pff>1)A_Overlay(12,"flashright");
			}
			A_WeaponReady((WRF_ALL|WRF_NOFIRE)&~WRF_ALLOWUSER2);
		}
		#### A 0 A_WeaponReady();
		goto readyend;
	double:
		#### A 1 offset(0,34);
		#### A 1 offset(0,33);
		#### A 0 A_Overlay(PSP_FLASH,"flashboth");
		goto readyend;

	flashleft:
		SH2F A 1 bright{
			A_Light2();
			A_Overlay(PSP_FLASH+1, "RecoilLayL");
			HDFlashAlpha(64,false,overlayid());
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_ZoomRecoil(0.9);
			invoker.weaponstatus[SLAYS_CHAMBER1]=1;

			invoker.FireCustom(Self,0);
		}
		TNT1 A 1{
			A_Light0();
			double shotpower=invoker.GetShotPower();
			A_MuzzleClimb(0.8*shotpower,-1.6*shotpower,0.8*shotpower,-1.6*shotpower);
		}goto flasheither;
	flashright:
		SH2F B 1 bright{
			A_Light2();
			A_Overlay(PSP_FLASH+1, "RecoilLayR");
			HDFlashAlpha(64,false,overlayid());
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_ZoomRecoil(0.9);
			invoker.weaponstatus[SLAYS_CHAMBER2]=1;

			invoker.FireCustom(Self,1);
		}
		TNT1 A 1{
			A_Light0();
			double shotpower=invoker.GetShotPower();
			A_MuzzleClimb(-0.8*shotpower,-1.6*shotpower,-0.8*shotpower,-1.6*shotpower);
		}goto flasheither;
	flasheither:
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 setweaponstate("recoil");
		stop;
	flashboth:
		SH2F C 1 bright{
			A_Light2();
			A_Overlay(PSP_FLASH+1, "RecoilLay");
			HDFlashAlpha(128);
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_ZoomRecoil(0.7);
			invoker.weaponstatus[SLAYS_CHAMBER1]=1;
			invoker.weaponstatus[SLAYS_CHAMBER2]=1;

			invoker.FireCustom(Self,0);
			invoker.FireCustom(Self,1);
		}
		TNT1 A 1{
			A_Light0();
			double shotpower=invoker.GetShotPower();
			double mlt=(invoker.bplayingid?0.6:-0.6)*shotpower;
			double mlt2=-3.*shotpower;
			A_MuzzleClimb(mlt,mlt2,mlt,mlt2);
		}goto flasheither;
	recoil:
		#### K 1;
		goto ready;
		
	RecoilLayL:
		TNT1 A 0{Vector2 Pivot = (FRandom(0, .5), FRandom(0, 1));
				if(GunBraced())Pivot = (FRandom(.2, .5), FRandom(.3, .7));
			A_OverlayScale(PSP_WEAPON, 1);A_OverlayScale(PSP_FLASH, 1);
			A_OverlayPivot(PSP_WEAPON, Pivot.X, Pivot.Y);A_OverlayPivot(PSP_FLASH, Pivot.X, Pivot.Y);
			Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;}
		TNT1 AAAA 1
			{
				Vector2 Pivot = Player.GetPSprite(PSP_WEAPON).Pivot;
				Float Recoil = (Pivot.X-.5)*5*abs(Pivot.Y-.5);
				if(GunBraced())Recoil *= .25;
				A_OverlayScale(PSP_WEAPON, .01, .02, WOF_ADD);
				A_OverlayRotate(PSP_WEAPON, -Recoil, WOF_ADD);
				Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;
				Player.GetPSprite(PSP_FLASH).Scale = Player.GetPSprite(PSP_WEAPON).Scale;
			}
		TNT1 A 2
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;
	RecoilLayR:
		TNT1 A 0{Vector2 Pivot = (FRandom(.5, 1), FRandom(0, 1));
				if(GunBraced())Pivot = (FRandom(.5, .7), FRandom(.3, .7));
			A_OverlayScale(PSP_WEAPON, 1);A_OverlayScale(PSP_FLASH, 1);
			A_OverlayPivot(PSP_WEAPON, Pivot.X, Pivot.Y);A_OverlayPivot(PSP_FLASH, Pivot.X, Pivot.Y);
			Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;}
		TNT1 AAAA 1
			{
				Vector2 Pivot = Player.GetPSprite(PSP_WEAPON).Pivot;
				Float Recoil = (Pivot.X-.5)*5*abs(Pivot.Y-.5);
				if(GunBraced())Recoil *= .25;
				A_OverlayScale(PSP_WEAPON, .01, .02, WOF_ADD);
				A_OverlayRotate(PSP_WEAPON, -Recoil, WOF_ADD);
				Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;
				Player.GetPSprite(PSP_FLASH).Scale = Player.GetPSprite(PSP_WEAPON).Scale;
			}
		TNT1 A 2
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;
	RecoilLay:
		TNT1 A 0{Vector2 Pivot = (FRandomPick(FRandom(0, .2), FRandom(.7, 1)), 0);
			A_OverlayScale(PSP_WEAPON, 1);A_OverlayScale(PSP_FLASH, 1);
			A_OverlayPivot(PSP_WEAPON, Pivot.X, Pivot.Y);A_OverlayPivot(PSP_FLASH, Pivot.X, Pivot.Y);
			Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;}
		TNT1 AAAAAA 1
			{
				Vector2 Pivot = Player.GetPSprite(PSP_WEAPON).Pivot;
				Float Recoil = (Pivot.X-.5)*5*abs(Pivot.Y-.5);
				if(GunBraced())Recoil *= .25;
				A_OverlayScale(PSP_WEAPON, .025, .05, WOF_ADD);
				A_OverlayRotate(PSP_WEAPON, Recoil, WOF_ADD);
				Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;
				Player.GetPSprite(PSP_FLASH).Scale = Player.GetPSprite(PSP_WEAPON).Scale;
			}
		TNT1 A 4
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;
		
	SideShell1:
		STKG K 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[SLAYS_SSHELL1]]);
		Wait;
	SideShell2:
		STKG L 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[SLAYS_SSHELL3]]);
		Wait;
	SideShell3:
		STKG M 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[SLAYS_SSHELL5]]);
		Wait;
	SideShell4:
		STKG N 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[SLAYS_SSHELL7]]);
		Wait;
	SideShell5:
		STKG O 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[SLAYS_SSHELL9]]);
		Wait;
	SideShell6:
		STKG P 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[SLAYS_SSHELL11]]);
		Wait;
		
	CheckSide:
		TNT1 A 0 A_OverLay(102, "SideCheck");
		TNT1 A 12 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
	CheckingSide:
		#### # 1;
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
	CheckSideLoop:
		STKG J 5 A_JumpIf(!pressingaltreload(),"CheckSideEnd");
		Loop;
	CheckSideEnd:
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		TNT1 A 0 A_OverLay(102, "SideCheckEnd");
		TNT1 # 12;
		Goto Ready;
	SideCheck:
		SH2G A 1 A_OverLayOffset(102, -2, 0);
		#### #### 1 A_OverlayOffset(OverlayId(), -10, 30, WOF_ADD);
		TNT1 A 2;
	RaiseSide:
		#### A 0 {
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>0)A_Overlay(103, "SideShell1");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>2)A_Overlay(104, "SideShell2");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>4)A_Overlay(105, "SideShell3");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>6)A_Overlay(106, "SideShell4");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>8)A_Overlay(107, "SideShell5");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>10)A_Overlay(108, "SideShell6");
			}
		STKG J 1 {
			For(int i=0;i<7;i++){A_OverlayPivot(OverlayId()+i, 0, 1);A_OverLayOffset(OverlayId()+i, 50, 40);A_OverlayRotate(OverlayId()+i, -80);}
			}
		#### #### 1 {
			For(int i=0;i<7;i++){A_OverlayOffset(OverlayId()+i, -8, -7, WOF_ADD);A_OverlayRotate(OverlayId()+i, 20, WOF_ADD);}
			}
		#### # 1 {For(int i=0;i<7;i++)A_OverLayOffset(OverlayId()+i, 0, 0);
			invoker.Checking=true;
			}
		Stop;
	SideCheckEnd:
		STKG J 0 {For(int i=0;i<7;i++){A_OverLayOffset(OverlayId()+i, 6, 0);A_OverlayPivot(OverlayId()+i, 0, 1);}}
		#### #### 1 {For(int i=0;i<7;i++){A_OverlayOffset(OverlayId()+i, 11, 10, WOF_ADD);A_OverlayRotate(OverlayId()+i, -20, WOF_ADD);}}
		#### # 0 A_ClearOverlays(103, 109);
		TNT1 A 2 {invoker.Checking=false;A_OverlayRotate(OverlayId(), 0);}
		SH2G A 1 A_OverLayOffset(102, -50, 150);
		#### AAAAA 1 A_OverlayOffset(OverlayId(), 10, -30, WOF_ADD);
		Stop;
		
	altreload:
		---- A 0 A_JumpIf(pressingfiremode(), "Nope");
		---- A 0 A_JumpIf(pressingzoom(),"CheckSide");
		#### A 0{
			if(
				countinv(invoker.Shells[invoker.ShellType])
				&&(
					invoker.weaponstatus[SLAYS_CHAMBER1]<2
					||invoker.weaponstatus[SLAYS_CHAMBER2]<2
				)
			){
				invoker.weaponstatus[0]|=SLAYF_FROMPOCKETS;
				invoker.weaponstatus[0]&=~SLAYF_UNLOADONLY;
			}
			else setweaponstate("nope");
		}goto reloadstart;
	reload:
		#### A 0{
			if(
				invoker.weaponstatus[SLAYS_CHAMBER1]>1&&
				invoker.weaponstatus[SLAYS_CHAMBER2]>1
			)setweaponstate("reloadss");

			invoker.weaponstatus[0]&=~SLAYF_UNLOADONLY;
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>0)
				invoker.weaponstatus[0]&=~SLAYF_FROMPOCKETS;
			else if(countinv(invoker.Shells[invoker.ShellType]))
				invoker.weaponstatus[0]|=SLAYF_FROMPOCKETS;
			else setweaponstate("nope");
		}goto reloadstart;
	reloadstart:
	unloadstart:
		SLYR A 2 offset(-5,-10){EmptyHand();A_OverlayPivot(PSP_WEAPON, 0, 1);}
		SLYR A 2 offset(-2,-5) A_OverlayRotate(PSP_WEAPON, -19, WOF_INTERPOLATE);
		SLYR A 3 offset(0,0) A_OverlayRotate(PSP_WEAPON, -38, WOF_INTERPOLATE);
		#### A 5 {A_StartSound("weapons/sshoto",8); A_OverlayRotate(PSP_WEAPON, -58, WOF_INTERPOLATE);}
		#### A 4 {A_MuzzleClimb(
				frandom(0.6,1.2),frandom(0.6,1.2),
				frandom(0.6,1.2),frandom(0.6,1.2),
				frandom(1.2,2.4),frandom(1.2,2.4));
				A_OverlayRotate(PSP_WEAPON, -80, WOF_INTERPOLATE);}
		TNT1 A 3{
			//eject whatever is already loaded
			for(int i=0;i<2;i++){
				int chm=invoker.weaponstatus[SLAYS_CHAMBER1+i];
				invoker.weaponstatus[SLAYS_CHAMBER1+i]=0;
				actor sss=null;
				Class<Actor> UnSpent = Null;
				if(invoker.weaponstatus[SLAYS_SHELL1+i]<1)UnSpent = 'HDUnSpentShell';
				Class<Actor> Spent = invoker.Spents[invoker.weaponstatus[SLAYS_SHELL1+i]];
				if(chm>1)
				{
					if(UnSpent)sss=spawn(UnSpent,pos+HDMath.GetGunPos(self),ALLOW_REPLACE);
					else {A_GiveInventory(invoker.Shells[invoker.weaponstatus[SLAYS_SHELL1+i]], 1);Continue;}
				}
				else if(chm==1){
					int index;
					For(index=0;index<invoker.FireSmokes.Size();index++){
						if(!invoker.FireSmokes[index])Break;
					}
					if(index<invoker.FireSmokes.Size()){
						NSHA_SmokeContainer a = New('NSHA_SmokeContainer');
						a.Vel = (-FRandom(.2, .7)+i, -.3, FRandom(.7, 1.2));
						invoker.FireSmokes[index] = a;
						
						A_Overlay(PSP_FLASH+10+index, "SmokeLay");
						A_OverlayOffset(PSP_FLASH+10+index, 100+HDPlayerPawn(Self).crossbob.X+i*20, 170+HDPlayerPawn(Self).crossbob.Y);
						Player.GetPSprite(PSP_FLASH+10+index).Scale = (1,1)*FRandom(.2, .3);
						A_OverlayAlpha(PSP_FLASH+10+index, FRandom(.01, .13)*3);
					}
					
					sss=spawn(Spent,pos+HDMath.GetGunPos(self),ALLOW_REPLACE);
				}
				if(!!sss){
					double aaa=angle+frandom(-20,20);
					sss.pitch=pitch;sss.angle=angle;
					sss.vel=(cos(aaa),sin(aaa),2);
					if(chm>1)sss.vel*=frandom(0.5,2);
					sss.vel+=vel;
					sss.target=self;
				}
			}
		}
		TNT1 A 2 offset(0,0);
		TNT1 A 2;
		TNT1 A 2 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		TNT1 A 8{
			if(invoker.weaponstatus[0]&SLAYF_UNLOADONLY){
				setweaponstate("unloadend");
				return;
			}

			//play animation to search pockets as appropriate
			if(invoker.weaponstatus[0]&SLAYF_FROMPOCKETS)
				A_StartSound("weapons/pocket",9);
				else setweaponstate("reloadnopocket");
		}
		#### # 0 A_JumpIf(invoker.weaponstatus[0]&SLAYF_UNLOADONLY, "UnloadEnd");
		TNT1 A 12;
		Goto ReloadNoPocket;
	reloadnopocket:
		SLYR D 1 Offset(20, 60){A_OverlayPivot(PSP_WEAPON, 1, 1);A_OverlayRotate(PSP_WEAPON, 45);}
		#### # 2 offset(10, 50){A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1); A_OverlayRotate(PSP_WEAPON, 30, WOF_INTERPOLATE);}
		#### # 1 offset(5, 40) A_OverlayRotate(PSP_WEAPON, 15, WOF_INTERPOLATE);
		#### # 2 offset(0, 32) A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);
		#### E 5 offset(1,32) A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		#### E 2 offset(0,32) A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		#### F 2 offset(0,32);
		#### G 1 offset(0,32);
		#### H 2 offset(0,32);

		#### I 2{
			//take up to 2 shells in hand
			Array<int> Grabbed;
			int ssh=0;
			if(invoker.weaponstatus[0]&SLAYF_FROMPOCKETS){
				ssh=min(2,countinv(invoker.Shells[invoker.ShellType]));
				For(int i=0;i<ssh;i++)
				{
					A_TakeInventory(invoker.Shells[invoker.ShellType], 1);
					Grabbed.Push(invoker.ShellType);
				}
			}else{
				ssh=min(2,invoker.weaponstatus[SHOTS_SIDESADDLE]);
				For(int i=0;i<ssh;i++)
				{
					invoker.weaponstatus[SHOTS_SIDESADDLE]--;
					Grabbed.Push(invoker.weaponstatus[SLAYS_SSHELL1+invoker.weaponstatus[SHOTS_SIDESADDLE]]);
				}
			}

			//if the above leaves you with nothing, abort
			if(ssh<1){
				A_SetTics(0);
				return;
			}

			//transfer from hand to chambers
			ssh--;
			while(Grabbed.Size()>0){
				invoker.weaponstatus[SLAYS_SHELL1+Grabbed.Size()-1]=Grabbed[Grabbed.Size()-1];
				invoker.weaponstatus[SLAYS_CHAMBER1+Grabbed.Size()-1]=2;
				Grabbed.Pop();
			}
		}
		#### I 2 offset(3, 37)A_StartSound("weapons/sshotl",8);
		#### K 2 offset(6, 42)A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		#### L 1 offset(9, 45);
		#### M 2 A_StartSound("weapons/sshotc",8);
		#### NOP 2 offset(-8, 36);// A_OverlayRotate(PSP_WEAPON, 30, WOF_ADD);
		#### # 0 offset(0, 32) A_OverlayRotate(PSP_WEAPON, 0);
		goto ready;
	unloadend:
		SLYR A 3 offset(0,1) A_OverlayRotate(PSP_WEAPON, -80, WOF_INTERPOLATE);
		SLYR A 3 offset(-2,-5) A_OverlayRotate(PSP_WEAPON, -58, WOF_INTERPOLATE);
		SLYR A 2 offset(-5,-10) A_OverlayRotate(PSP_WEAPON, -38, WOF_INTERPOLATE);
		#### A 2 offset(0, 0){A_StartSound("weapons/sshoto",8); A_OverlayRotate(PSP_WEAPON, -19, WOF_INTERPOLATE);}
		#### A 2 A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);
		#### # 0 offset(0, 32);
		goto nope;

	reloadss:
		#### A 0 A_JumpIf(invoker.weaponstatus[SHOTS_SIDESADDLE]>=12,"nope");
		#### A 1 offset(1,34);
		#### A 2 offset(2,34);
		#### A 3 offset(3,36);
	reloadssrestart:
		#### A 6 offset(3,35);
		#### A 9 offset(4,34) A_StartSound("weapons/pocket",9);
	reloadssloop1:
		#### A 0{
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>=12)setweaponstate("reloadssend");

			//load shells into hand
			int ssh=min(
				3,
				12-invoker.weaponstatus[SHOTS_SIDESADDLE],
				countinv(invoker.Shells[invoker.ShellType])
			);
			if(ssh<1){
				setweaponstate("reloadssend");
				return;
			}
			For(int i=0;i<ssh;i++)
			{
				invoker.weaponstatus[SLAYS_SSHELL1+invoker.weaponstatus[SHOTS_SIDESADDLE]]=invoker.ShellType;
				invoker.weaponstatus[SHOTS_SIDESADDLE]++;
			}
			A_TakeInventory(invoker.Shells[invoker.ShellType], ssh,TIF_NOTAKEINFINITE);
		}
	reloadssend:
		#### A 4 offset(3,34);
		#### A 0{
			if(
				invoker.weaponstatus[SHOTS_SIDESADDLE]<12
				&&(pressingreload()||pressingaltreload())
				&&countinv(invoker.Shells[invoker.ShellType])
			)setweaponstate("reloadssrestart");
		}
		#### A 3 offset(2,34);
		#### A 1 offset(1,34) emptyhand(careful:true);
		goto nope;
		
	unloadSS:
		#### A 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		#### # 2 offset(1,34) A_JumpIf(invoker.weaponstatus[SHOTS_SIDESADDLE]<1,"nope");
		#### # 0 A_OverlayPivot(PSP_WEAPON, 1, 1);
		#### # 1 offset(2,38)A_OverlayRotate(PSP_WEAPON, 5, WOF_INTERPOLATE);
		#### # 1 offset(3,42)A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE);
	unloadSSLoop1:
		#### # 4 offset(4,46) A_OverlayRotate(PSP_WEAPON, 15, WOF_INTERPOLATE);
		#### # 2 offset(5,47) {A_UnloadSideSaddle();A_OverlayRotate(PSP_WEAPON, 17, WOF_INTERPOLATE);}
		#### # 3 offset(4,46){	//decide whether to loop
			if(
				PressingReload()
				||PressingFire()
				||PressingAltfire()
				||invoker.weaponstatus[SHOTS_SIDESADDLE]<1
			)setweaponstate("unloadSSend");
		A_OverlayRotate(PSP_WEAPON, 15, WOF_INTERPOLATE);
		}goto unloadSSLoop1;
	unloadSSend:
		#### # 3 offset(4,42) A_OverlayRotate(PSP_WEAPON, 15, WOF_INTERPOLATE);
		#### # 2 offset(3,37) A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE);
		#### # 1 offset(2,34) A_OverlayRotate(PSP_WEAPON, 5, WOF_INTERPOLATE);
		#### # 1 offset(1,34) A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);
		goto nope;
		
	unload:
		#### K 2 offset(0,34){
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>0)setweaponstate("unloadss");
			else invoker.weaponstatus[0]|=SLAYF_UNLOADONLY;
		}goto unloadstart;

	cannibalize:
		#### A 0 EmptyHand();
		#### A 2 offset(0,36) A_JumpIf(!countinv("NSHHunter"),"nope");
		#### A 2 offset(0,40) A_StartSound("weapons/pocket",9);
		#### A 8 offset(0,42);
		#### A 8 offset(0,44);
		#### A 8 offset(0,42);
		#### A 2 offset(0,36) A_CannibalizeOtherShotgun();
		goto ready;

	spawn:
		SLAY ABCDEFG -1 nodelay{
			int ssh=invoker.weaponstatus[SHOTS_SIDESADDLE];
			if(ssh>=11)frame=0;
			else if(ssh>=9)frame=1;
			else if(ssh>=7)frame=2;
			else if(ssh>=5)frame=3;
			else if(ssh>=3)frame=4;
			else if(ssh>=1)frame=5;
			else frame=6;
		}
	}
	override void InitializeWepStats(bool idfa){
		if(weaponstatus[SLAYS_CHAMBER1]<2)weaponstatus[SLAYS_SHELL1]=shelltype;
		if(weaponstatus[SLAYS_CHAMBER2]<2)weaponstatus[SLAYS_SHELL2]=shelltype;
		For(int i=weaponstatus[SHOTS_SIDESADDLE];i<12;i++)weaponstatus[SLAYS_SSHELL1+i]=shelltype;
		weaponstatus[SLAYS_CHAMBER1]=2;
		weaponstatus[SLAYS_CHAMBER2]=2;
		weaponstatus[SHOTS_SIDESADDLE]=12;
		if(!idfa){
			weaponstatus[SLAYS_CHOKE1]=7;
			weaponstatus[SLAYS_CHOKE2]=7;
		}
		handshells=0;
	}
	
	override void loadoutconfigure(string input){
		if(Owner && Owner.FindInventory("Slayer"))
		{
			Let inv = HDWeapon(Owner.FindInventory("Slayer"));
			weaponstatus[SLAYS_CHOKE1]=inv.weaponstatus[SLAYS_CHOKE1];
			weaponstatus[SLAYS_CHOKE2]=inv.weaponstatus[SLAYS_CHOKE2];
			weaponstatus[SLAYS_CHAMBER1]=inv.weaponstatus[SLAYS_CHAMBER1];
			weaponstatus[SLAYS_CHAMBER2]=inv.weaponstatus[SLAYS_CHAMBER2];
			weaponstatus[SHOTS_SIDESADDLE]=inv.weaponstatus[SHOTS_SIDESADDLE];
			inv.Destroy();
			Return;
		}
		int choke=min(getloadoutvar(input,"lchoke",1),7);
		if(choke>=0)weaponstatus[SLAYS_CHOKE1]=choke;
		choke=min(getloadoutvar(input,"rchoke",1),7);
		if(choke>=0)weaponstatus[SLAYS_CHOKE2]=choke;
	}
	
	/*Override Void Tick()
	{
		Super.Tick();
		if(Owner)Return;
		HDWeapon a = HDWeapon(Spawn("Slayer", pos));
		if(a)
		{
			a.Angle = Angle;
			a.Pitch = Pitch;
			a.Vel = Vel;
			For(int i=0;i<HDWEP_STATUSSLOTS;i++)a.weaponstatus[i]=weaponstatus[i];
			Destroy();
		}
	}*/
}
enum NSHslayerstatus{
	SLAYF_SAFETY=8,
	
	SLAYS_SHELL1=9,//LCham
	SLAYS_SHELL2=10,//RCham
	//Side saddles
	SLAYS_SSHELL1=11,
	SLAYS_SSHELL2=12,
	SLAYS_SSHELL3=13,
	SLAYS_SSHELL4=14,
	SLAYS_SSHELL5=15,
	SLAYS_SSHELL6=16,
	SLAYS_SSHELL7=17,
	SLAYS_SSHELL8=18,
	SLAYS_SSHELL9=19,
	SLAYS_SSHELL10=20,
	SLAYS_SSHELL11=21,
	SLAYS_SSHELL12=22,
	};