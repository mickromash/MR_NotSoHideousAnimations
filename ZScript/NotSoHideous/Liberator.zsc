// ------------------------------------------------------------
// Liberator Battle Rifle
// ------------------------------------------------------------
class NSHLiberatorRifle:LiberatorRifle{// Replaces LiberatorRifle{
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int Light = Owner.CurSector.LightLevel * 1.75;
		if(owner.player.fixedlightlevel==1)Light = 255;
		if(hdw.weaponstatus[0]&LIBF_GRENADEMODE)sb.drawgrenadeladder(hdw.airburst,bob);
		else{
			double dotoff=max(abs(bob.x),abs(bob.y));
			if(dotoff<40){
				string whichdot=sb.ChooseReflexReticle(hdw.weaponstatus[LIBS_DOT]);
				sb.drawimage(
					whichdot,(0,0)+bob*1.1,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.01,
					col:0xFF000000|sb.crosshaircolor.GetInt()
				);
			}
			sb.drawimage(
				"libsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);
			if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
			sb.drawimage(
				"libsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER, col:Color(254-Light, 0,0,0)
			);
			if(scopeview){
				int scaledyoffset=60;
				int scaledwidth=72;
				double degree=hdw.weaponstatus[LIBS_ZOOM]*0.1;
				double deg=1/degree;
				int cx,cy,cw,ch;
				[cx,cy,cw,ch]=screen.GetClipRect();
				sb.SetClipRect(
					-36+bob.x,24+bob.y,scaledwidth,scaledwidth,
					sb.DI_SCREEN_CENTER
				);


				sb.fill(color(255,0,0,0),
					bob.x-36,scaledyoffset+bob.y-36,
					72,72,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
				);

				texman.setcameratotexture(hpc,"HDXCAM_LIB",degree);
				let cam  = texman.CheckForTexture("HDXCAM_LIB",TexMan.Type_Any);
				let reticle = texman.CheckForTexture(
					(hdw.weaponstatus[0] & LIBF_ALTRETICLE)? "reticle2" : "reticle1"
				,TexMan.Type_Any);

				vector2 frontoffs=(0,scaledyoffset)+bob*2;

				double camSize = texman.GetSize(cam);
				sb.DrawCircle(cam,frontoffs,.08825,usePixelRatio:true);

				//[2022-09-17] there's a glitch in GZDoom where if the reticle would be drawn completely off screen,
				//the cliprect is ignored. The figure is a product of trial and error.
				if((bob.y/fov)<0.4){
					let reticleScale = camSize / texman.GetSize(reticle);
					if(hdw.weaponstatus[0]&LIBF_FRONTRETICLE){
						sb.DrawCircle(reticle,frontoffs,393*reticleScale, bob*4, 1.6*deg);
					}else{
						sb.DrawCircle(reticle,(0,scaledyoffset)+bob,.403*reticleScale, uvScale: .52);
					}
				}

				//see comments in zm66.zs
				//let hole = texman.CheckForTexture("scophole",TexMan.Type_Any);
				//let holeScale    = camSize / texman.GetSize(hole);
				//sb.DrawCircle(hole, (0, scaledyoffset) + bob, .403 * holeScale, bob * 5, uvScale: .95);


				screen.SetClipRect(cx,cy,cw,ch);

				sb.drawimage(
					"libscope",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
				);
				sb.drawstring(
					sb.mAmountFont,string.format("%.1f",degree),
					(6+bob.x,95+bob.y),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_RIGHT,
					Font.CR_BLACK
				);
				sb.drawstring(
					sb.mAmountFont,string.format("%i",hdw.weaponstatus[LIBS_DROPADJUST]),
					(6+bob.x,17+bob.y),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_RIGHT,
					Font.CR_BLACK
				);
			}
		}
	}
	
	action void A_CheckChug(bool anyotherconditions=true){
		if(
			anyotherconditions
			&&countinv("SevenMilBrass")
			&&countinv("FourMilAmmo")>=4
		){
			invoker.makinground=true;
			int counter=min(10,countinv("SevenMilBrass"));
			invoker.brass=counter;A_TakeInventory("SevenMilBrass",counter);
			counter=min(30,countinv("FourMilAmmo"));
			invoker.powders=counter;A_TakeInventory("FourMilAmmo",counter);
			invoker.master = Self;
			dropinventory(invoker);
		}
	}
	
	override string gethelptext()
	{
		bool gl=!(weaponstatus[0]&LIBF_NOLAUNCHER);
		bool glmode=gl&&(weaponstatus[0]&LIBF_GRENADEMODE);
		
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		return
		LWPHELP_FIRESHOOT
		..(gl?(LWPHELP_ALTFIRE..(glmode?(StringTable.Localize("$LIBWH_ALTFIRE1")):(StringTable.Localize("$LIBWH_ALTFIRE2")))):"")
		..LWPHELP_RELOAD..StringTable.Localize("$LIBWH_RELOAD")
		..LWPHELP_USE.."+"..LWPHELP_RELOAD..StringTable.Localize("$LIBWH_UPRELOAD")
		..(gl?(LWPHELP_ALTRELOAD..StringTable.Localize("$LIBWH_ALTRELOAD")):"")
		..(glmode?(LWPHELP_FIREMODE.."+"..LWPHELP_UPDOWN..StringTable.Localize("$LIBWH_FMODPUD"))
			:(
			(LWPHELP_FIREMODE..StringTable.Localize("$LIBWH_FMODE"))
			..LWPHELP_ZOOM.."+"..LWPHELP_FIREMODE.."+"..LWPHELP_UPDOWN..StringTable.Localize("$LIBWH_ZPFMOD")))
		..LWPHELP_MAGMANAGER
		..LWPHELP_UNLOAD..StringTable.Localize("$LIBWH_UNLOAD")..(glmode?StringTable.Localize("$LIBWH_GL"):StringTable.Localize("$LIBWH_MAG"))
		..LWPHELP_USE.."+"..LWPHELP_UNLOAD..StringTable.Localize("$UPUNLOAD")
		;
	}
	
	states{
	brasstube:
		TNT1 A 4{
			if(
				invoker.weaponstatus[LIBS_BRASS]>0
				&&(
					pitch>5
					||IsBusy(self)
				)
			){
				double fc=max(pitch*0.01,5);
				double cosp=cos(pitch);
				actor brsss;
				[cosp,brsss]=A_SpawnItemEx("HDSpent7mm",
					cosp*12,0,height-8-sin(pitch)*12,
					cosp*fc,0.2*randompick(-1,1),-sin(pitch)*fc,
					0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				brsss.vel+=vel;
				brsss.A_StartSound(brsss.bouncesound,volume:0.4);
				invoker.weaponstatus[LIBS_BRASS]--;
			}
		}wait;
	select0:
		BRFG A 0{
			A_CheckDefaultReflexReticle(LIBS_DOT);
			A_Overlay(776,"brasstube");
			invoker.weaponstatus[0]&=~LIBF_GRENADEMODE;
		}goto select0big;
	deselect0:
		BRFG A 0{
			while(invoker.weaponstatus[LIBS_BRASS]>0){
				double cosp=cos(pitch);
				actor brsss;
				[cosp,brsss]=A_SpawnItemEx("HDSpent7mm",
					cosp*12,0,height-8-sin(pitch)*12,
					cosp*3,0.2*randompick(-1,1),-sin(pitch)*3,
					0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				brsss.vel+=vel;
				brsss.A_StartSound(brsss.bouncesound,volume:0.4);
				invoker.weaponstatus[LIBS_BRASS]--;
			}
		}goto deselect0big;
	ready:
		BRFG A 1{
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(LIBS_DROPADJUST,0,1200,BT_USE);
				}else if(invoker.weaponstatus[0]&LIBF_FRONTRETICLE)A_ZoomAdjust(LIBS_ZOOM,20,40);
				else A_ZoomAdjust(LIBS_ZOOM,6,70);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		goto readyend;
	user3:
		---- A 0 A_JumpIf(!(invoker.weaponstatus[0]&LIBF_GRENADEMODE),1);
		goto super::user3;
		---- A 0 A_MagManager("HD7mMag");
		goto ready;

	fire:
		BRFG A 0{
			if(
				invoker.weaponstatus[0]&LIBF_NOLAUNCHER
				||!(invoker.weaponstatus[0]&LIBF_GRENADEMODE)
			){
				setweaponstate("firegun");
			}else setweaponstate("firegrenade");
		}
	hold:
		BRFG A 1{
			if(
				invoker.weaponstatus[0]&LIBF_GRENADEMODE
				||!(invoker.weaponstatus[0]&LIBF_FULLAUTO)
				||(invoker.weaponstatus[0]&LIBF_NOAUTO)
				||invoker.weaponstatus[LIBS_CHAMBER]!=2
			)setweaponstate("nope");
		}goto shoot;

	firegun:
		BRFG A 1{
			if(invoker.weaponstatus[0]&LIBF_NOBULLPUP)A_SetTics(0);
			else if(invoker.weaponstatus[0]&LIBF_FULLAUTO)A_SetTics(2);
		}
	shoot:
		BRFG A 1{
			if(invoker.weaponstatus[LIBS_CHAMBER]==2){A_Gunflash();A_Overlay(PSP_FLASH+1, "RecoilLay");}
			else setweaponstate("chamber_manual");
			A_WeaponReady(WRF_NONE);
		}
		BRFG B 1 A_Chamber();
		BRFG A 0 A_Refire();
		goto nope;
	flash:
		BRFF A 1 bright{
			A_Light1();
			A_StartSound("weapons/bigrifle",CHAN_WEAPON);

			HDBulletActor.FireBullet(self,
				invoker.weaponstatus[0]&LIBF_RECAST?"HDB_776r":"HDB_776",
				aimoffy:(-HDCONST_GRAVITY/1000.)*invoker.weaponstatus[LIBS_DROPADJUST]
			);

			if(invoker.weaponstatus[0]&LIBF_NOBULLPUP){
				HDFlashAlpha(16);
				A_ZoomRecoil(0.90);
				A_MuzzleClimb(
					0,0,
					-0.07,-0.14,
					-frandom(0.3,0.6),-frandom(1.,1.4),
					-frandom(0.2,0.4),-frandom(1.,1.4)
				);
			}else{
				HDFlashAlpha(32);
				A_ZoomRecoil(0.95);
				A_MuzzleClimb(
					0,0,
					-0.2,-0.4,
					-frandom(0.5,0.9),-frandom(1.7,2.1),
					-frandom(0.5,0.9),-frandom(1.7,2.1)
				);
			}

			invoker.weaponstatus[LIBS_CHAMBER]=1;
			invoker.weaponstatus[LIBS_HEAT]+=2;
			invoker.weaponstatus[0]&=~LIBF_RECAST;
			A_AlertMonsters();
		}
		goto lightdone;
	RecoilLay:
		TNT1 A 1 {A_OverlayScale(PSP_WEAPON, 1, 1);A_OverlayRotate(PSP_WEAPON, 0);}
		TNT1 A 1
			{
				Vector2 Pivot = (FRandom(0, 1), FRandom(0, 1));
				A_OverlayPivot(PSP_WEAPON, Pivot.X, Pivot.Y);A_OverlayPivot(PSP_FLASH, Pivot.X, Pivot.Y);
				Float Ang = FRandomPick(FRandom(-2.5, -1), FRandom(1, 2.5));
				A_OverlayScale(PSP_WEAPON, 1.05, 1.1);A_OverlayScale(PSP_FLASH, 1.05, 1.1);
				A_OverlayRotate(PSP_WEAPON, Ang);A_OverlayRotate(PSP_FLASH, Ang);
			}
		TNT1 A 2
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;
		
	chamber_manual:
		BRFG A 1 offset(-1,34){
			if(
				invoker.weaponstatus[LIBS_CHAMBER]==2
				||invoker.weaponstatus[LIBS_MAG]<1
			)setweaponstate("nope");
		}
		BRFG B 1 offset(-2,36)A_Chamber();
		BRFG B 1 offset(-2,38);
		BRFG A 1 offset(-1,34);
		goto nope;


	firemode:
		---- A 0{
			if(invoker.weaponstatus[0]&LIBF_GRENADEMODE)setweaponstate("abadjust");
			else if(!(invoker.weaponstatus[0]&LIBF_NOAUTO))invoker.weaponstatus[0]^=LIBF_FULLAUTO;
		}goto nope;


	unloadchamber:
		BRFG C 1 offset(-1,34){
			if(
				invoker.weaponstatus[LIBS_CHAMBER]<1
			)setweaponstate("nope");
		}
		BRFG B 1 offset(-2,36)A_Chamber(true);
		BRFG B 1 offset(-2,38);
		BRFG A 1 offset(-1,34);
		goto nope;

	loadchamber:
		BRFG A 0 A_JumpIf(invoker.weaponstatus[LIBS_CHAMBER]>0,"nope");
		BRFG A 0 A_JumpIf(
			!countinv("SevenMilAmmo")
			&&!countinv("SevenMilAmmoRecast")
		,"nope");
		BRFG A 1 offset(0,34) A_StartSound("weapons/pocket",9);
		BRFG A 2 offset(2,36);
		BRFG B 8 offset(5,40);
		BRFG C 8 offset(7,44);
		BRFG C 8 offset(6,43);
		BRFG B 10 offset(4,39){
			class<inventory> rndtp="SevenMilAmmo";
			if(!countinv(rndtp))rndtp="SevenMilAmmoRecast";

			if(countinv(rndtp)){
				A_TakeInventory(rndtp,1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[LIBS_CHAMBER]=2;

				if(rndtp=="SevenMilAmmoRecast")invoker.weaponstatus[0]|=LIBF_RECAST;
				else invoker.weaponstatus[0]&=~LIBF_RECAST;

				A_StartSound("weapons/libchamber2",8);
				A_StartSound("weapons/libchamber2a",8,CHANF_OVERLAP,0.7);
			}else A_SetTics(4);
		}
		BRFG B 7 offset(5,37);
		BRFG B 1 offset(2,36);
		BRFG A 1 offset(0,34);
		goto readyend;

	user4:
	unload:
		---- A 1 A_CheckChug(pressinguse()); //DO NOT set this frame to zero
		BRFG A 0{
			invoker.weaponstatus[0]|=LIBF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[0]&LIBF_GRENADEMODE
			){
				return resolvestate("unloadgrenade");
			}else if(
				invoker.weaponstatus[LIBS_MAG]>=0  
			){
				return resolvestate("unmag");
			}else if(
				invoker.weaponstatus[LIBS_CHAMBER]>0  
			){
				return resolvestate("unloadchamber");
			}
			return resolvestate("nope");
		}
	reload:
		BRFG A 0{
			if(PressingZoom())Return resolvestate("CheckMag");
			int inmag=invoker.weaponstatus[LIBS_MAG];
			bool nomags=HDMagAmmo.NothingLoaded(self,"HD7mMag");
			bool haverounds=countinv("SevenMilAmmo")||countinv("SevenMilAmmoRecast");
			invoker.weaponstatus[0]&=~LIBF_JUSTUNLOAD;

			//no point reloading
			if(
				inmag>=30
				||(
					//no mags to load and can't directly load chamber
					nomags
					&&(
						!haverounds
						||inmag>=0
						||invoker.weaponstatus[LIBS_CHAMBER]>0
					)
				)
			)return resolvestate("nope");

			//no mag, empty chamber, have loose rounds
			if(
				inmag<0
				&&invoker.weaponstatus[LIBS_CHAMBER]<1
				&&haverounds
				&&(
					pressinguse()
					||nomags
				)
			)return resolvestate("loadchamber");

			if(
				invoker.weaponstatus[LIBS_MAG]>0  
			){
				//if full mag and unchambered, chamber
				if(
					invoker.weaponstatus[LIBS_MAG]>=30  
					&&invoker.weaponstatus[LIBS_CHAMBER]!=2
				){
					return resolvestate("chamber_manual");
				}
			}
			return resolvestate("unmag");
		}
		Goto unmag;
		
	UnMagHand:
		BRFR B 0 A_OverlayOffset(-5, -10, 32);
		BRFR B 8 A_OverlayOffset(-5, -4, 10, WOF_INTERPOLATE);
		BRFR B 3 A_OverlayOffset(-5, -30, 40, WOF_INTERPOLATE);
		Stop;
	PocketMagHand:
		BRFR A 0 A_OverlayOffset(-5, -4, 10);
		BRFR B 4 A_OverlayOffset(-5, -6, 40, WOF_INTERPOLATE);
		Stop;
	LoadMagHand:
		BRFR B 4 A_OverlayOffset(-5, -10, 32);
		BRFR B 4 A_OverlayOffset(-5, 0, 0, WOF_INTERPOLATE);
		BRFR B 2 A_OverlayOffset(-5, 0, -1);
		BRFR B 3 A_OverlayOffset(-5, 0, 0, WOF_INTERPOLATE);
		BRFR B 3 A_OverlayOffset(-5, -30, 40, WOF_INTERPOLATE);
		Stop;
		

	unmag:
		BRFG A 1 offset(0,34);
		BRFG A 1 offset(2,36);
		BRFG B 1 offset(4,40);
		BRFG B 2 offset(8,42){
			if(invoker.weaponstatus[LIBS_MAG]<0)SetWeaponState("LoadMag");
			else if(invoker.WeaponStatus[0]&LIBF_NOBULLPUP)A_Overlay(-5, "UnMagHand");
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		BRFG C 4 offset(14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound ("weapons/rifleunload",8,CHANF_OVERLAP);
		}
		BRFG C 0{
			int magamt=invoker.weaponstatus[LIBS_MAG];
			if(magamt<0){setweaponstate("magout");return;}

			if(magamt>0){
				int fullets=clamp(30-invoker.weaponstatus[LIBS_RECASTS],0,magamt);
				magamt+=fullets*100;
			}

			invoker.weaponstatus[LIBS_MAG]=-1;
			invoker.weaponstatus[LIBS_RECASTS]=0;
			if(
				!PressingReload()
				&&!PressingUnload()
			){
				HDMagAmmo.SpawnMag(self,"HD7mMag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD7mMag",magamt);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		---- A 0 {if(invoker.WeaponStatus[0]&LIBF_NOBULLPUP)A_Overlay(-5, "PocketMagHand");}
		BRFG C 7 offset(12,52)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		BRFG C 0 A_StartSound("weapons/pocket",9);
		BRFG CC 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		goto magout;
	magout:
		BRFG C 4{
			invoker.weaponstatus[LIBS_MAG]=-1;
			invoker.weaponstatus[LIBS_RECASTS]=0;
			if(invoker.weaponstatus[0]&LIBF_JUSTUNLOAD)setweaponstate("reloaddone");
		}goto loadmag;


	loadmag:
		BRFG C 0 A_StartSound("weapons/pocket",9);
		BRFG C 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.4),frandom(-0.2,0.8));
		BRFG C 7 offset(14,54){A_MuzzleClimb(frandom(-0.2,0.4),frandom(-0.2,0.8));
		if(invoker.WeaponStatus[0]&LIBF_NOBULLPUP)A_Overlay(-5, "loadmagHand");}
		BRFG C 6 offset(12,52){
			let mmm=hdmagammo(findinventory("HD7mMag"));
			if(mmm){
				int minput=mmm.TakeMag(true);
				int rndcnt=minput%100;
				invoker.weaponstatus[LIBS_MAG]=rndcnt;
				invoker.weaponstatus[LIBS_RECASTS]=clamp(rndcnt-(minput/100),0,rndcnt);

				A_StartSound("weapons/rifleclick",8);
				A_StartSound("weapons/rifleload",8,CHANF_OVERLAP);
			}
		}
		BRFG B 2 offset(8,46) A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP);
		goto reloaddone;

	reloaddone:
		BRFG B 1 offset (4,40);
		BRFG A 1 offset (2,34);
		goto chamber_manual;


	altfire:
		BRFG A 1 offset(0,34){
			if(invoker.weaponstatus[0]&LIBF_NOLAUNCHER){
				invoker.weaponstatus[0]&=~(LIBF_GRENADEMODE|LIBF_GRENADELOADED);
				setweaponstate("nope");
			}else invoker.airburst=0;
		}
		BRFG A 1 offset(2,36);
		BRFG B 1 offset(4,40);
		BRFG B 1 offset(2,36);
		BRFG A 1 offset(0,34);
		BRFG A 0{
			invoker.weaponstatus[0]^=LIBF_GRENADEMODE;
			A_SetHelpText();
			A_Refire();
		}goto ready;
	althold:
		BRFG A 0;
		goto nope;

	CheckMag:
		BRFG C 2 offset(10, 44)A_Jumpif(!PressingReload(), "Nope");
		---- C 0 {if(invoker.weaponstatus[LIBS_MAG]>0)A_Overlay(102, "Dumb");if(invoker.weaponstatus[LIBS_CHAMBER]==2)A_Overlay(103, "Dumb2");}
		Loop;
	Dumb:
		STUP A 0 A_OverLayOffset(102,29,24);
		STUP A 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>2,1);
		Stop;
		STUP B 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>4,1);
		Stop;
		STUP C 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>6,1);
		Stop;
		STUP D 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>8,1);
		Stop;
		STUP E 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>10,1);
		Stop;
		STUP F 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>12,1);
		Stop;
		STUP G 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>14,1);
		Stop;
		STUP H 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>16,1);
		Stop;
		STUP I 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>18,1);
		Stop;
		STUP J 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>20,1);
		Stop;
		STUP K 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>22,1);
		Stop;
		STUP L 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>24,1);
		Stop;
		STUP M 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>26,1);
		Stop;
		STUP N 5 A_JumpIf(invoker.weaponstatus[LIBS_MAG]>28,1);
		Stop;
		STUP O 5;
		Stop;
	
	Dumb2:
		STUP A 0 A_OverLayOffset(103, 32, 22);
		STUP Q 5;
		Stop;

	firegrenade:
		BRFG B 2{
			if(invoker.weaponstatus[0]&LIBF_GRENADELOADED){
				A_FireHDGL();
				invoker.weaponstatus[0]&=~LIBF_GRENADELOADED;
			}else setweaponstate("nope");
		}
		BRFG B 2{
			if(invoker.weaponstatus[0]&LIBF_NOBULLPUP){
				A_ZoomRecoil(0.99);
				A_MuzzleClimb(
					0,0,
					-0.8,-2.,
					-0.4,-1.
				);
			}else{
				A_ZoomRecoil(0.95);
				A_MuzzleClimb(
					0,0,
					-1.2,-3.,
					-0.6,-1.4
				);
			}
		}
		BRFG A 0 A_Refire("nope");
		goto ready;
	altreload:
		BRFG A 0{
			if(!(invoker.weaponstatus[0]&LIBF_NOLAUNCHER)){
				invoker.weaponstatus[0]&=~LIBF_JUSTUNLOAD;
				setweaponstate("unloadgrenade");
			}
		}goto nope;
	unloadgrenade:
		BRFG A 1 offset(0,34){
			A_SetCrosshair(21);
			if(
				(
					//just unloading but no grenade
					invoker.weaponstatus[0]&LIBF_JUSTUNLOAD
					&&!(invoker.weaponstatus[0]&LIBF_GRENADELOADED)
				)||(
					//reloading but no ammo or already loaded
					!(invoker.weaponstatus[0]&LIBF_JUSTUNLOAD)
					&&(
						!countinv("HDRocketAmmo")
						||invoker.weaponstatus[0]&LIBF_GRENADELOADED
					)
				)
			){
				setweaponstate("nope");
			}
		}
		BRFG A 1 offset(-5,40);
		BRFG A 1 offset(-10,50);
		BRFG A 1 offset(-15,56);
		BRFG C 4 offset(-14,54){
			A_StartSound("weapons/pocket",9);
			A_StartSound("weapons/grenopen",8);
		}
		BRFG C 3 offset(-16,56){
			if(invoker.weaponstatus[0]&LIBF_GRENADELOADED){
				if(
					(PressingReload()||PressingUnload())
					&&!A_JumpIfInventory("HDRocketAmmo",0,"null")
				){
					A_GiveInventory("HDRocketAmmo");
					A_StartSound("weapons/pocket",9);
					A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
					A_SetTics(6);
				}else A_SpawnItemEx("HDRocketAmmo",
					cos(pitch)*12,0,gunheight()-2-12*sin(pitch),
					vel.x,vel.y,vel.z,
					0,SXF_SETTARGET|SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.weaponstatus[0]&=~LIBF_GRENADELOADED;
			}
		}
		BRFG C 0{
			if(invoker.weaponstatus[0]&LIBF_JUSTUNLOAD)setweaponstate("altreloaddone");
		}
		BRFG DD 8 offset(-16,56)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		BRFG D 18 offset(-14,54){
			if(!countinv("HDRocketAmmo"))return;
			A_StartSound("weapons/grenreload",8);
			A_TakeInventory("HDRocketAmmo",1,TIF_NOTAKEINFINITE);
			invoker.weaponstatus[0]|=LIBF_GRENADELOADED;
		}
		BRFG C 4 offset(-12,50)A_StartSound("weapons/grenopen",8);
	altreloaddone:
		BRFG C 1 offset(-15,56);
		BRFG B 1 offset(-10,50);
		BRFG A 1 offset(-5,40);
		BRFG A 1 offset(0,34);
		goto nope;

	spawn:
		BRFL ABCDEFGH -1 nodelay{
			if(invoker.weaponstatus[0]&LIBF_NOBULLPUP){
				sprite=getspriteindex("BRLLA0");
			}
			// A: -g +m +a
			// B: +g +m +a
			// C: -g -m +a
			// D: +g -m +a
			if(invoker.weaponstatus[0]&LIBF_NOLAUNCHER){
				if(invoker.weaponstatus[LIBS_MAG]<0)frame=2;
				else frame=0;
			}else{
				if(invoker.weaponstatus[LIBS_MAG]<0)frame=3;
				else frame=1;
			}

			// E: -g +m -a
			// F: +g +m -a
			// G: -g -m -a
			// H: +g -m -a
			if(invoker.weaponstatus[0]&LIBF_NOAUTO)frame+=4;

			if(
				invoker.makinground
				&&invoker.brass>0
				&&invoker.powders>=3
			)setstatelabel("chug");
		}
		BRLL ABCDEFGH -1;
		stop;
	}
	override void InitializeWepStats(bool idfa){
		if(!(weaponstatus[0]&LIBF_NOLAUNCHER))weaponstatus[0]|=LIBF_GRENADELOADED;
		weaponstatus[LIBS_MAG]=30;
		weaponstatus[LIBS_RECASTS]=0;
		weaponstatus[LIBS_CHAMBER]=2;
		if(!idfa&&!owner){
			weaponstatus[LIBS_ZOOM]=30;
			weaponstatus[LIBS_HEAT]=0;
			weaponstatus[LIBS_DROPADJUST]=127;
		}
	}
	
	Override Void Tick()
	{
		Super.Tick();
		if(Owner||Pos.Z > FloorZ||(Master && Master.player.oldbuttons&BT_USE && makingRound))Return;
		LiberatorRifle a = LiberatorRifle(Spawn("LiberatorRifle", pos));
		if(a)
		{
			a.Angle = Angle;
			a.Pitch = Pitch;
			a.Vel = Vel;
			For(int i=0;i<HDWEP_STATUSSLOTS;i++)a.weaponstatus[i]=weaponstatus[i];
			a.powders=powders;
			a.brass=brass;
			a.makinground=makingRound;
			Destroy();
		}
	}
	override void loadoutconfigure(string input){
		if(Owner && Owner.FindInventory("LiberatorRifle"))
		{
			Let inv = HDWeapon(Owner.FindInventory("LiberatorRifle"));
			weaponstatus[LIBS_CHAMBER]=inv.weaponstatus[LIBS_CHAMBER];
			weaponstatus[LIBS_MAG]=inv.weaponstatus[LIBS_MAG];
			weaponstatus[LIBS_ZOOM]=inv.weaponstatus[LIBS_ZOOM];
			weaponstatus[LIBS_HEAT]=inv.weaponstatus[LIBS_HEAT];
			weaponstatus[LIBS_BRASS]=inv.weaponstatus[LIBS_BRASS];
			weaponstatus[LIBS_AIRBURST]=inv.weaponstatus[LIBS_AIRBURST];
			weaponstatus[LIBS_DROPADJUST]=inv.weaponstatus[LIBS_DROPADJUST];
			weaponstatus[LIBS_DOT]=inv.weaponstatus[LIBS_DOT];
			weaponstatus[LIBS_RECASTS]=inv.weaponstatus[LIBS_RECASTS];
			weaponstatus[0]=inv.WeaponStatus[0];
			inv.Destroy();
			Return;
		}
		int nogl=getloadoutvar(input,"nogl",1);
		//disable launchers if rocket grenades denylisted
		string denylist=hd_noloadout;
		if(denylist.IndexOf(HDLD_BLOOPER)>=0)nogl=1;
		if(!nogl){
			weaponstatus[0]&=~LIBF_NOLAUNCHER;
		}else if(nogl>0){
			weaponstatus[0]|=LIBF_NOLAUNCHER;
			weaponstatus[0]&=~LIBF_GRENADELOADED;
		}
		if(!(weaponstatus[0]&LIBF_NOLAUNCHER))weaponstatus[0]|=LIBF_GRENADELOADED;

		int nobp=getloadoutvar(input,"nobp",1);
		if(!nobp)weaponstatus[0]&=~LIBF_NOBULLPUP;
		else if(nobp>0)weaponstatus[0]|=LIBF_NOBULLPUP;
		if(weaponstatus[0]&LIBF_NOBULLPUP)bfitsinbackpack=false;
		else bfitsinbackpack=true;

		int altreticle=getloadoutvar(input,"altreticle",1);
		if(!altreticle)weaponstatus[0]&=~LIBF_ALTRETICLE;
		else if(altreticle>0)weaponstatus[0]|=LIBF_ALTRETICLE;

		int frontreticle=getloadoutvar(input,"frontreticle",1);
		if(!frontreticle)weaponstatus[0]&=~LIBF_FRONTRETICLE;
		else if(frontreticle>0)weaponstatus[0]|=LIBF_FRONTRETICLE;

		int bulletdrop=getloadoutvar(input,"bulletdrop",3);
		if(bulletdrop>=0)weaponstatus[LIBS_DROPADJUST]=clamp(bulletdrop,0,1200);

		int zoom=getloadoutvar(input,"zoom",3);
		if(zoom>=0)weaponstatus[LIBS_ZOOM]=
			(weaponstatus[0]&LIBF_FRONTRETICLE)?
			clamp(zoom,20,40):
			clamp(zoom,6,70);

		int xhdot=getloadoutvar(input,"dot",3);
		if(xhdot>=0)weaponstatus[LIBS_DOT]=xhdot;

		int firemode=getloadoutvar(input,"firemode",1);
		if(firemode>0)weaponstatus[0]|=LIBF_FULLAUTO;
		else weaponstatus[0]&=~LIBF_FULLAUTO;

		int semi=getloadoutvar(input,"semi",1);
		if(semi>0){
			weaponstatus[0]|=LIBF_NOAUTO;
			weaponstatus[0]&=~LIBF_FULLAUTO;
		}else weaponstatus[0]&=~LIBF_NOAUTO;

		int lefty=getloadoutvar(input,"lefty",1);
		if(
			lefty>0
			||(
				lefty<0
				&&(Wads.CheckNumForName("id",0)!=-1)
			)
		)weaponstatus[0]|=LIBF_LEFTY;
		else weaponstatus[0]&=~LIBF_LEFTY;
	}
}