// ------------------------------------------------------------
// BFG9k
// ------------------------------------------------------------
class NSHBFG9K:BFG9K{// replaces BFG9K{
	
	override string gethelptext()
	{
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		
		return
		LWPHELP_FIRE..StringTable.Localize("$BFGWH_FIRE")
		..LWPHELP_ALTFIRE..StringTable.Localize("$BFGWH_ALTFIRE")
		..LWPHELP_RELOAD..StringTable.Localize("$BFGWH_RELOAD")
		..LWPHELP_ALTRELOAD..StringTable.Localize("$BFGWH_ALTRELOAD")
		..LWPHELP_UNLOADUNLOAD
		..LWPHELP_USE.."+"..LWPHELP_UNLOAD..StringTable.Localize("$BFGWH_USEPUNL")
		;
	}
	
	states{
	altfire:
	togglestrap:
		#### A 3{
			A_WeaponBusy();
			if(invoker.weaponstatus[0]&BFGF_STRAPPED){
				A_SetTics(6);
				A_StartSound("weapons/bfgclick",8);
			}
		}
		#### A 1 offset(0,WEAPONTOP+1);
		#### A 1 offset(0,WEAPONTOP+2);
		#### A 1 offset(0,WEAPONTOP+4);
		#### A 1 offset(0,WEAPONTOP+12);
		#### A 1 offset(0,WEAPONTOP+20);
		#### A 1 offset(0,WEAPONTOP+30);
		#### A 1 offset(0,WEAPONTOP+38);
		#### A 4{
			invoker.weaponstatus[0]^=BFGF_STRAPPED;
			if(invoker.weaponstatus[0]&BFGF_STRAPPED){
				A_SetTics(6);
				A_StartSound("weapons/bfgclick",8,CHANF_OVERLAP);
				invoker.bobrangex=invoker.default.bobrangex*0.4;
				invoker.bobrangey=invoker.default.bobrangey*0.4;
			}else{
				invoker.bobrangex=invoker.default.bobrangex;
				invoker.bobrangey=invoker.default.bobrangey;
			}
			A_StartSound("weapons/bfglock",8);
			A_AddBlackout(196,96,72);
		}
		#### A 1 offset(0,WEAPONTOP+38);
		#### A 1 offset(0,WEAPONTOP+30);
		#### A 1 offset(0,WEAPONTOP+22);
		#### A 1 offset(0,WEAPONTOP+11);
		#### A 1 offset(0,WEAPONTOP+7);
		#### A 1 offset(0,WEAPONTOP+4);
		#### A 1 offset(0,WEAPONTOP+2);
		#### A 1 offset(0,WEAPONTOP+1);
		goto nope;
	ready:
		BFGG A 1{
			A_CheckIdSprite("B9KGA0","BFGGA0");
			if(invoker.weaponstatus[BFGS_CRITTIMER]>0)setweaponstate("shoot");
			A_WeaponReady(WRF_ALL);
		}
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		goto readyend;
	select0:
		B9KG A 0{
			if(!countinv("NulledWeapon"))invoker.weaponstatus[0]&=~BFGF_STRAPPED;
			invoker.weaponstatus[0]&=~BFGF_DROPCHARGE;
		}
		BFGG C 0 A_CheckIdSprite("B9KGA0","BFGGA0");
		goto select0bfg;
	deselect0:
		BFGG C 0 A_CheckIdSprite("B9KGA0","BFGGA0");
		---- A 0 A_JumpIf(
			invoker.weaponstatus[0]&BFGF_STRAPPED
			&&!countinv("NulledWeapon")
			,"togglestrap"
		);
		goto deselect0bfg;
	althold:
		stop;
	flash:
		B9KF B 3 bright{
			A_CheckIdSprite("B9KFA0","BFGFA0",PSP_FLASH);
			A_Light1();
			HDFlashAlpha(0,true);
		}
		#### A 2 bright{
			A_Light2();
			HDFlashAlpha(200);
		}
		#### A 2 bright HDFlashAlpha(128);
		goto lightdone;

	fire:
		#### C 0 {invoker.weaponstatus[BFGS_TIMER]=0;}
	hold:
		#### C 0{
			if(
				invoker.weaponstatus[BFGS_CHARGE]>=20
				&& invoker.weaponstatus[BFGS_BATTERY]>=20
			)return resolvestate("chargeend");
			else if(
				invoker.weaponstatus[BFGS_CHARGE]>BFGC_MINCHARGE
				||invoker.weaponstatus[BFGS_BATTERY]>BFGC_MINCHARGE
			)return resolvestate("charge");
			return resolvestate("nope");
		}
	charge:
		#### B 0{
			if(
				PressingReload()
				||invoker.weaponstatus[BFGS_BATTERY]<0
				||(
					invoker.weaponstatus[BFGS_CHARGE]>=20
					&&invoker.weaponstatus[BFGS_BATTERY]>=20
				)
			)setweaponstate("nope");
		}
		#### B 6{
			invoker.weaponstatus[BFGS_TIMER]++;
			if(invoker.weaponstatus[BFGS_TIMER]>4){
				invoker.weaponstatus[BFGS_TIMER]=0;
				if(invoker.weaponstatus[BFGS_BATTERY]<20){
					invoker.weaponstatus[BFGS_BATTERY]++;
				}
				else if(invoker.weaponstatus[BFGS_CHARGE]<20)invoker.weaponstatus[BFGS_CHARGE]++;
				if(!random(0,60))invoker.weaponstatus[0]|=BFGF_DEMON;
			}
			if(health<40){
				A_SetTics(2);
				if(health>16)damagemobj(invoker,self,1,"internal");
			}else if(invoker.weaponstatus[BFGS_BATTERY]==20)A_SetTics(2);
			A_WeaponBusy(false);
			A_StartSound("weapons/bfgcharge",CHAN_WEAPON);
			BFG9k.Spark(self,1,gunheight()-2);
			A_WeaponReady(WRF_NOFIRE);
		}
		#### B 0{
			if(invoker.weaponstatus[BFGS_CHARGE]==20 && invoker.weaponstatus[BFGS_BATTERY]==20)
			A_Refire("shoot");
			else A_Refire();
		}
		loop;
	chargeend:
		#### B 1{
			BFG9k.Spark(self,1,gunheight()-2);
			A_StartSound("weapons/bfgcharge",(invoker.weaponstatus[BFGS_TIMER]>6)?CHAN_AUTO:CHAN_WEAPON);
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_NOFIRE|WRF_DISABLESWITCH);
			A_SetTics(max(1,6-int(invoker.weaponstatus[BFGS_TIMER]*0.3)));
			invoker.weaponstatus[BFGS_TIMER]++;
		}
		#### B 0{
			if(invoker.weaponstatus[BFGS_TIMER]>14)A_Refire("shoot");
			else A_Refire("chargeend");
		}goto ready;
	shoot:
		#### B 0{
			invoker.weaponstatus[BFGS_TIMER]=0;
			invoker.weaponstatus[BFGS_CRITTIMER]=16;
			A_StartSound("weapons/bfgf",CHAN_WEAPON);
			hdmobai.frighten(self,512);
		}
		#### B 3{
			invoker.weaponstatus[BFGS_CRITTIMER]--;
			A_StartSound("weapons/bfgcharge",random(9005,9007));
			BFG9k.Spark(self,1,gunheight()-2);
			if(invoker.weaponstatus[BFGS_CRITTIMER]<=1){
				invoker.weaponstatus[BFGS_CRITTIMER]=0;
				player.setpsprite(PSP_WEAPON,invoker.findstate("reallyshoot"));
			}else if(invoker.weaponstatus[BFGS_CRITTIMER]<10)A_SetTics(2);
			else if(invoker.weaponstatus[BFGS_CRITTIMER]<5)A_SetTics(1);
		}wait;
	reallyshoot:
		#### A 8{
			A_AlertMonsters();
			hdmobai.frighten(self,1024);
		}
		#### B 2{
			A_ZoomRecoil(0.2);
			A_GunFlash();
			invoker.ShootBall(self,self);
		}
		#### B 0 A_JumpIf(invoker.weaponstatus[0]&BFGF_STRAPPED,"recoilstrapped");
		#### B 6 A_ChangeVelocity(-2,0,3,CVF_RELATIVE);
		#### C 6{
			A_MuzzleClimb(
				1,3,
				-frandom(0.8,1.2),-frandom(2.4,4.6),
				-frandom(1.8,2.8),-frandom(6.4,9.6),
				1,2
			);
			if(!random(0,5))DropInventory(invoker);
		}goto nope;
	recoilstrapped:
		#### BBBB 1 A_ChangeVelocity(-0.3,0,0.06,CVF_RELATIVE);
		#### CCCC 1{
			A_MuzzleClimb(
				0.1,0.2,
				-frandom(0.08,0.1),-frandom(0.2,0.3),
				-frandom(0.18,0.24),-frandom(0.6,0.8),
				0.1,0.15
			);
		}goto nope;

	reload:
		#### A 0{
			if(PressingZoom())SetWeaponState("CheckMag");
			else
			{
			if(
				invoker.weaponstatus[BFGS_BATTERY]>=20
				||!countinv("HDBattery")
				||(
					invoker.weaponstatus[BFGS_CHARGE]<BFGC_MINCHARGE
					&&HDMagAmmo.NothingLoaded(self,"HDBattery")
				)
			)setweaponstate("nope");
			else invoker.weaponstatus[BFGS_LOADTYPE]=BFGC_RELOADMAX;
			}
		}goto reload1;
	altreload:
	reloadempty:
		#### A 0{
			if(
				!countinv("HDBattery")
			)setweaponstate("nope");
			else invoker.weaponstatus[BFGS_LOADTYPE]=BFGC_ONEEMPTY;
		}goto reload1;
	unload:
		#### A 0{
			if(pressinguse()){
				if(
					!(invoker.weaponstatus[0]&BFGF_STRAPPED)
					&&invoker.weaponstatus[BFGS_BATTERY]>=0
					&&pressingunload()
					&&(
						invoker.weaponstatus[BFGS_CHARGE]<20
						||invoker.weaponstatus[BFGS_BATTERY]<20
					)&&(
						invoker.weaponstatus[BFGS_CHARGE]>BFGC_MINCHARGE
						||invoker.weaponstatus[BFGS_BATTERY]>BFGC_MINCHARGE
					)
				){
					invoker.weaponstatus[0]|=BFGF_DROPCHARGE;
					invoker.Master = Self;
					DropInventory(invoker);
				}
				setweaponstate("nope");
				return;
			}
			invoker.weaponstatus[BFGS_LOADTYPE]=BFGC_UNLOADALL;
		}goto reload1;
	CellDropRight:
		BFCA A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13,4);
		BFCB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6,3);
		BFCC A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0,2);
		BFCD A 0;
		#### ABCDEF 2;
		Stop;
	CellDropLeft:
		BFCA A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13,4);
		BFCB A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6,3);
		BFCC A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>0,2);
		BFCD A 0;
		#### GHIJKL 2;
		Stop;
	reload1:
		#### A 4;
		#### A 2 offset(0,36) A_MuzzleClimb(0,0.4,0,0.8,wepdot:false);
		#### A 2 offset(0,38) A_MuzzleClimb(0,0.8,0,1.,wepdot:false);
		BFRA A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>13,23);
		BFRJ A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>6,22);
		BFRK A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>0,21);
		BFRL A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]==0,20);
		BFRP A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>6,19);
		BFRQ A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>0,18);
		BFRR A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]==0,17);
		BFRS A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]>0,16);
		BFRT A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]==0,15);
		BFRU A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>0 && invoker.weaponstatus[BFGS_BATTERY]==0,14);
		BFRM A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]>0,13);
		BFRN A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]==0,12);
		BFRO A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]==0,11);
		BFRD A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]>6,10);
		BFRH A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]>0,9);
		BFRF A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 && invoker.weaponstatus[BFGS_CHARGE]==0,8);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0,7);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]==0,6);
		BFRB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 || invoker.weaponstatus[BFGS_CHARGE]>13,5);
		BFRE A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 || invoker.weaponstatus[BFGS_CHARGE]>6,4);
		BFRI A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 || invoker.weaponstatus[BFGS_CHARGE]>0,3);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 || invoker.weaponstatus[BFGS_CHARGE]==0,2);
		BFRC A 0;
		#### AAAA 0;
		#### A 4 offset(0,40){
			A_MuzzleClimb(0,1,0,1,0,1,0,0.8,wepdot:false);
			A_StartSound("weapons/bfgclick2",8);
		}
		#### A 0 {if(invoker.weaponstatus[BFGS_BATTERY]>=0) A_OverLay(27,"CellDropRight");}
		#### B 1 offset(0,41);
		#### B 1 offset(0,41){
			A_StartSound("weapons/bfgopen",8);

			A_MuzzleClimb(-0.1,0.8,-0.05,0.5,wepdot:false);
			if(invoker.weaponstatus[BFGS_BATTERY]>=0){
				HDMagAmmo.SpawnMag(self,"HDBattery",invoker.weaponstatus[BFGS_BATTERY]);
				invoker.weaponstatus[BFGS_BATTERY]=-1;
				A_SetTics(3);
			}
		}
		BFRB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 || invoker.weaponstatus[BFGS_CHARGE]>13,5);
		BFRE A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 || invoker.weaponstatus[BFGS_CHARGE]>6,4);
		BFRI A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 || invoker.weaponstatus[BFGS_CHARGE]>0,3);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 || invoker.weaponstatus[BFGS_CHARGE]==0,2);
		BFRC A 0;
		#### AAAA 0;
		#### A 0 {if(invoker.weaponstatus[BFGS_CHARGE]>=0) A_OverLay(28,"CellDropLeft");}
		#### B 1 offset(0,42);
		#### B 1 offset(0,42){
			if(invoker.weaponstatus[BFGS_CHARGE]>=0){
				HDMagAmmo.SpawnMag(self,"HDBattery",invoker.weaponstatus[BFGS_CHARGE]);
				invoker.weaponstatus[BFGS_CHARGE]=-1;
				A_SetTics(4);
			}

			if(invoker.weaponstatus[0]&BFGF_DEMON){
				invoker.weaponstatus[0]&=~BFGF_DEMON;
				class<actor> shard="BFGShard";
				if(!random(0,2))shard="BFGNecroShard";
				else if(!random(0,15))A_FireProjectile("YokaiSpawner");
				for(int i=0;i<5;i++){
					A_FireProjectile(shard,random(170,190),spawnofs_xy:random(-20,20));
				}
			}
			A_MuzzleClimb(-0.05,0.4,-0.05,0.2,wepdot:false);
		}
		BFRB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 || invoker.weaponstatus[BFGS_CHARGE]>13,5);
		BFRE A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 || invoker.weaponstatus[BFGS_CHARGE]>6,4);
		BFRI A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 || invoker.weaponstatus[BFGS_CHARGE]>0,3);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 || invoker.weaponstatus[BFGS_CHARGE]==0,2);
		BFRC A 0;
		#### AAAA 0;
		#### B 4 offset(0,42){
			if(invoker.weaponstatus[BFGS_LOADTYPE]==BFGC_UNLOADALL)setweaponstate("reload3");
			else A_StartSound("weapons/pocket",9);
		}
		#### B 12 offset(0,43);
	insertbatteries:
		BFRA A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>13,23);
		BFRJ A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>6,22);
		BFRK A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>0,21);
		BFRL A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]==0,20);
		BFRP A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>6,19);
		BFRQ A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>0,18);
		BFRR A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]==0,17);
		BFRS A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]>0,16);
		BFRT A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]==0,15);
		BFRU A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>0 && invoker.weaponstatus[BFGS_BATTERY]==0,14);
		BFRM A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]>0,13);
		BFRN A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]==0,12);
		BFRO A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]==0,11);
		BFRD A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]>6,10);
		BFRH A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]>0,9);
		BFRF A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 && invoker.weaponstatus[BFGS_CHARGE]==0,8);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0,7);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]==0,6);
		BFRB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 || invoker.weaponstatus[BFGS_CHARGE]>13,5);
		BFRE A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 || invoker.weaponstatus[BFGS_CHARGE]>6,4);
		BFRI A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 || invoker.weaponstatus[BFGS_CHARGE]>0,3);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 || invoker.weaponstatus[BFGS_CHARGE]==0,2);
		BFRC A 0;
		#### AAAA 0;
		#### A 0 {If(invoker.weaponstatus[BFGS_CHARGE]>=0) A_OverLay(26, "HandLoadCell2"); else  A_OverLay(26, "HandLoadCell");}
		#### B 10 offset(0,42)A_StartSound("weapons/bfgbattout",8);
		BFRA A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>13,23);
		BFRJ A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>6,22);
		BFRK A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>0,21);
		BFRL A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]==0,20);
		BFRP A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>6,19);
		BFRQ A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>0,18);
		BFRR A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]==0,17);
		BFRS A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]>0,16);
		BFRT A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]==0,15);
		BFRU A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>0 && invoker.weaponstatus[BFGS_BATTERY]==0,14);
		BFRM A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]>0,13);
		BFRN A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]==0,12);
		BFRO A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]==0,11);
		BFRD A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]>6,10);
		BFRH A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]>0,9);
		BFRF A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 && invoker.weaponstatus[BFGS_CHARGE]==0,8);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0,7);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]==0,6);
		BFRB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 || invoker.weaponstatus[BFGS_CHARGE]>13,5);
		BFRE A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 || invoker.weaponstatus[BFGS_CHARGE]>6,4);
		BFRI A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 || invoker.weaponstatus[BFGS_CHARGE]>0,3);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 || invoker.weaponstatus[BFGS_CHARGE]==0,2);
		BFRC A 0;
		#### AAAA 0;
		#### B 8 offset(0,36)A_StartSound("weapons/bfgbattpop",8);
		#### B 0{
			let mmm=hdmagammo(findinventory("HDBattery"));
			if(
				!mmm
				||mmm.amount<1
				||(
					invoker.weaponstatus[BFGS_BATTERY]>=0
					&&invoker.weaponstatus[BFGS_CHARGE]>=0
				)
			){
				setweaponstate("reload3");
				return;
			}
			int batslot=(
				invoker.weaponstatus[BFGS_BATTERY]<0
				&&invoker.weaponstatus[BFGS_CHARGE]<0
			)?BFGS_CHARGE:BFGS_BATTERY;
			if(invoker.weaponstatus[BFGS_LOADTYPE]==BFGC_ONEEMPTY){
				invoker.weaponstatus[BFGS_LOADTYPE]=BFGC_RELOADMAX;
			}else{
			}
		}
		#### C 0 A_JumpIf(
				!countinv("HDBattery")
				||invoker.weaponstatus[BFGS_BATTERY]>=0
			,
			"reload3"
		);
		loop;
	HandLoadCell:
		---- A 0{
			let mmm=hdmagammo(findinventory("HDBattery"));
				if(invoker.weaponstatus[BFGS_LOADTYPE]==BFGC_ONEEMPTY){
				mmm.LowestToLast();
				invoker.weaponstatus[BFGS_CHARGE]=mmm.TakeMag(false);
			}else{
				invoker.weaponstatus[BFGS_CHARGE]=mmm.TakeMag(true);
			}
		}
		BFHA A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13,4);
		BFHB A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6,3);
		BFHD A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>0,2);
		BFHC A 0;
		#### A 1 A_OverLayOffset(26, -40, 60);
		#### A 1 A_OverLayOffset(26, -30, 50);
		#### A 1 A_OverLayOffset(26, -20, 40);
		#### A 1 A_OverLayOffset(26, -15, 35);
		#### A 1 A_OverLayOffset(26, -10, 30);
		#### A 1 A_OverLayOffset(26, -1, 23);
		#### A 1 A_OverLayOffset(26, 6, 23);
		#### A 1 A_OverLayOffset(26, 11, 23);
		#### A 1 A_OverLayOffset(26, 15, 23);
		#### A 1 A_OverLayOffset(26, 22, 18);
		#### A 1 A_OverLayOffset(26, 23, 10);
		#### A 1 A_OverLayOffset(26, 24, 10);
		#### A 1 A_OverLayOffset(26, 23, 10);
		#### C 1 A_OverLayOffset(26, 33, 9);
		#### C 1 A_OverLayOffset(26, 28, 14);
		#### C 1 A_OverLayOffset(26, 23, 19);
		#### C 1 A_OverLayOffset(26, 17, 27);
		#### C 1 A_OverLayOffset(26, 12, 35);
		Stop;
	HandLoadCell2:
		---- A 0{
			let mmm=hdmagammo(findinventory("HDBattery"));
				invoker.weaponstatus[BFGS_BATTERY]=mmm.TakeMag(true);
		}
		BFHA A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13,4);
		BFHB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6,3);
		BFHD A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0,2);
		BFHC A 0;
		#### B 1 A_OverLayOffset(26, 47, 60);
		#### B 1 A_OverLayOffset(26, 40, 50);
		#### B 1 A_OverLayOffset(26, 33, 40);
		#### B 1 A_OverLayOffset(26, 26, 35);
		#### B 1 A_OverLayOffset(26, 20, 30);
		#### B 1 A_OverLayOffset(26, 14, 23);
		#### B 1 A_OverLayOffset(26, 8, 23);
		#### B 1 A_OverLayOffset(26, 2, 23);
		#### B 1 A_OverLayOffset(26, -6, 23);
		#### B 1 A_OverLayOffset(26, -11, 18);
		#### B 1 A_OverLayOffset(26, -12, 10);
		#### B 1 A_OverLayOffset(26, -13, 10);
		#### B 1 A_OverLayOffset(26, -14, 10);
		#### D 1 A_OverLayOffset(26, -14, 8);
		#### D 1 A_OverLayOffset(26, -14, 14);
		#### D 1 A_OverLayOffset(26, -9, 19);
		#### D 1 A_OverLayOffset(26, 0, 27);
		#### D 1 A_OverLayOffset(26, 7, 35);
		Stop;
	reload3:
		BFRA A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>13,23);
		BFRJ A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>6,22);
		BFRK A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]>0,21);
		BFRL A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 && invoker.weaponstatus[BFGS_CHARGE]==0,20);
		BFRP A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>6,19);
		BFRQ A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]>0,18);
		BFRR A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>13 && invoker.weaponstatus[BFGS_BATTERY]==0,17);
		BFRS A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]>0,16);
		BFRT A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>6 && invoker.weaponstatus[BFGS_BATTERY]==0,15);
		BFRU A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]>0 && invoker.weaponstatus[BFGS_BATTERY]==0,14);
		BFRM A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]>0,13);
		BFRN A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 && invoker.weaponstatus[BFGS_CHARGE]==0,12);
		BFRO A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]==0,11);
		BFRD A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]>6,10);
		BFRH A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 && invoker.weaponstatus[BFGS_CHARGE]>0,9);
		BFRF A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 && invoker.weaponstatus[BFGS_CHARGE]==0,8);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0,7);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_CHARGE]==0,6);
		BFRB A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>13 || invoker.weaponstatus[BFGS_CHARGE]>13,5);
		BFRE A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>6 || invoker.weaponstatus[BFGS_CHARGE]>6,4);
		BFRI A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]>0 || invoker.weaponstatus[BFGS_CHARGE]>0,3);
		BFRG A 0 A_Jumpif(invoker.weaponstatus[BFGS_BATTERY]==0 || invoker.weaponstatus[BFGS_CHARGE]==0,2);
		BFRC A 0;
		#### B 12 offset(0,38) A_StartSound("weapons/bfgopen",8);
		#### B 16 offset(0,37) A_StartSound("weapons/bfgclick2",8);
		#### A 2 offset(0,38);
		BFGG C 2 offset(0,36);
		#### A 2 offset(0,34);
		#### A 12;
		goto ready;
	CheckMag:
		#### B 2 A_Jumpif(!PressingReload(), "Nope");
		#### B 0 {if(invoker.weaponstatus[BFGS_BATTERY]>0)A_Overlay(102, "Dumb");if(invoker.weaponstatus[BFGS_CHARGE]>0)A_Overlay(103, "Dumb2");}
		Loop;
	Dumb:
		STUP A 0 A_OverLayOffset(102,29,22);
		#### # 0 {Player.GetPSprite(OverlayId()).Frame = (invoker.weaponstatus[BFGS_BATTERY]-1)*.75;}
		#### # 5;
		Stop;
	Dumb2:
		STUP A 0 A_OverLayOffset(103,29,24);
		#### # 0 {Player.GetPSprite(OverlayId()).Frame = (invoker.weaponstatus[BFGS_CHARGE]-1)*.75;}
		#### # 5;
		Stop;

	user3:
		#### A 0 A_MagManager("HDBattery");
		goto ready;

	spawn:
		BFUG A -1 nodelay{
			if(invoker.weaponstatus[BFGS_CRITTIMER]>0)invoker.setstatelabel("bwahahahaha");
			else if(invoker.weaponstatus[0]&BFGF_DROPCHARGE)invoker.setstatelabel("dropcharge");
		}
	bwahahahaha:
		BFUG A 3{
			invoker.weaponstatus[BFGS_CRITTIMER]--;
			A_StartSound("weapons/bfgcharge",CHAN_AUTO);
			BFG9k.Spark(self,1,6);
			let ct=invoker.weaponstatus[BFGS_CRITTIMER];
			if(ct<=1){
				invoker.weaponstatus[BFGS_CRITTIMER]=0;
				invoker.setstatelabel("heh");
			}else if(ct<5)A_SetTics(1);
			else if(ct<10)A_SetTics(2);
		}wait;
	heh:
		BFUG A 8;
		BFUG A 4{
			invoker.A_StartSound("weapons/bfgfwoosh",CHAN_AUTO);
			invoker.weaponstatus[BFGS_CRITTIMER]=0;
			invoker.weaponstatus[BFGS_CHARGE]=0;invoker.weaponstatus[BFGS_BATTERY]=0;
			invoker.ShootBall(invoker,invoker.lastenemy);
		}
		BFUG A 0{
			invoker.A_ChangeVelocity(-cos(pitch)*4,0,sin(pitch)*4,CVF_RELATIVE);
		}goto spawn;

	dropcharge:
		BFUG A 6{
			if(
				(
					invoker.weaponstatus[BFGS_BATTERY]>=20
					&&invoker.weaponstatus[BFGS_CHARGE]>=20
				)
				||invoker.weaponstatus[BFGS_BATTERY]<0
			){
				invoker.weaponstatus[0]&=~BFGF_DROPCHARGE;
				invoker.setstatelabel("spawn");
				return;
			}
			invoker.weaponstatus[BFGS_TIMER]++;
			if (invoker.weaponstatus[BFGS_TIMER]>3){
				invoker.weaponstatus[BFGS_TIMER]=0;
				if(invoker.weaponstatus[BFGS_BATTERY]<20){
					invoker.weaponstatus[BFGS_BATTERY]++;
				}
				else invoker.weaponstatus[BFGS_CHARGE]++;
				if(!random(0,60))invoker.weaponstatus[0]|=BFGF_DEMON;
			}
			if(invoker.weaponstatus[BFGS_BATTERY]==20)A_SetTics(5);
			invoker.A_StartSound("weapons/bfgcharge",CHAN_VOICE);
			BFG9k.Spark(invoker,1,gunheight()-2);
		}loop;
	}

	override void postbeginplay(){
		super.postbeginplay();
		if(owner&&owner.player&&owner.player.readyweapon is "BFG9K")weaponstatus[0]|=BFGF_STRAPPED;
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[BFGS_CHARGE]=20;
		weaponstatus[BFGS_BATTERY]=20;
		weaponstatus[BFGS_TIMER]=0;
		weaponstatus[BFGS_CRITTIMER]=0;
		if(idfa){
			weaponstatus[0]&=~BFGF_DEMON;
		}else weaponstatus[0]=0;
	}
	
	override void loadoutconfigure(string input){
		if(Owner && Owner.FindInventory("BFG9K"))
		{
			Let inv = HDWeapon(Owner.FindInventory("BFG9K"));
			weaponstatus[BFGS_STATUS]=inv.weaponstatus[BFGS_STATUS];
			weaponstatus[BFGS_CHARGE]=inv.weaponstatus[BFGS_CHARGE];
			weaponstatus[BFGS_BATTERY]=inv.weaponstatus[BFGS_BATTERY];
			weaponstatus[BFGS_TIMER]=inv.weaponstatus[BFGS_TIMER];
			weaponstatus[BFGS_LOADTYPE]=inv.weaponstatus[BFGS_LOADTYPE];
			weaponstatus[BFGS_CRITTIMER]=inv.weaponstatus[BFGS_CRITTIMER];
			weaponstatus[BFGC_MINCHARGE]=inv.weaponstatus[BFGC_MINCHARGE];
			weaponstatus[BFGC_RELOADMAX]=inv.weaponstatus[BFGC_RELOADMAX];
			weaponstatus[BFGC_UNLOADALL]=inv.weaponstatus[BFGC_UNLOADALL];
			weaponstatus[BFGC_ONEEMPTY]=inv.weaponstatus[BFGC_ONEEMPTY];
			weaponstatus[0]=inv.WeaponStatus[0];
			inv.Destroy();
			Return;
		}
		Super.loadoutconfigure(input);
	}
	
	Override Void Tick()
	{
		Super.Tick();
		if(Owner||Pos.Z > FloorZ||(Master && Master.player.oldbuttons&BT_USE && weaponstatus[0]&BFGF_DROPCHARGE))Return;
		HDWeapon a = HDWeapon(Spawn("BFG9K", pos));
		if(a)
		{
			a.Angle = Angle;
			a.Pitch = Pitch;
			a.Vel = Vel;
			For(int i=0;i<HDWEP_STATUSSLOTS;i++)a.weaponstatus[i]=weaponstatus[i];
			Destroy();
		}
	}
}