// ------------------------------------------------------------
// A 12-gauge pump for protection
// ------------------------------------------------------------

Class MRF3Actor_HunterShells_Tic: Actor{}
Class MRF3Class_HunterShells_Tic: object Ui
{
	Override Void OnDestroy()
	{
		Let Plr = Players[ConsolePlayer];
		Let Hunt = NSHHunter(Plr.ReadyWeapon);
		if(!Hunt)Return;
			
		if(StatusBar.artiflashTick==-1)
		{
			StatusBar.artiflashTick = Hunt.Weaponstatus[HUNTS_TUBE]+2;
		}
		else
		{
			String Com = "MRF3_String";
			String Side = "MRF3SideL";
			
			
			if(StatusBar.artiflashTick<1)EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."Cham: "..Hunt.Shells[Hunt.weaponstatus[HUNTS_SHELL1]]);
			else if(StatusBar.artiflashTick<Hunt.Weaponstatus[HUNTS_TUBE]+1)EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."Mag "..StatusBar.artiflashTick..": "..Hunt.Shells[Hunt.weaponstatus[HUNTS_SHELL1+StatusBar.artiflashTick]]);
			else EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."\cd======");
		}
	}
}

Class MRF3Actor_HunterSide_Tic: Actor{}
Class MRF3Class_HunterSide_Tic: object Ui
{
	Override Void OnDestroy()
	{
		Let Plr = Players[ConsolePlayer];
		Let Hunt = NSHHunter(Plr.ReadyWeapon);
		if(!Hunt)Return;
			
		if(StatusBar.artiflashTick==-1)StatusBar.artiflashTick = Hunt.Weaponstatus[SHOTS_SIDESADDLE]+1;
		else
		{
			String Com = "MRF3_String";
			String Side = "MRF3SideL";
			
			
			if(StatusBar.artiflashTick<Hunt.Weaponstatus[SHOTS_SIDESADDLE])EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."Side "..(StatusBar.artiflashTick+1)..": "..Hunt.Shells[Hunt.weaponstatus[HUNTS_SSHELL1+StatusBar.artiflashTick]]);
			else EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."\cv=======");
		}
	}
}

Class MRF3Actor_HunterHand_Tic: Actor{}
Class MRF3Class_HunterHand_Tic: object Ui
{
	Override Void OnDestroy()
	{
		Let Plr = Players[ConsolePlayer];
		Let Hunt = NSHHunter(Plr.ReadyWeapon);
		if(!Hunt)Return;
		
		if(StatusBar.artiflashTick==-1)StatusBar.artiflashTick = Hunt.HandShell.Size();
		else
		{
			String Com = "MRF3_String";
			String Side = "MRF3SideL";
			
			EventHandler.SendInterfaceEvent(ConsolePlayer, Com..Side.."InHand "..(StatusBar.artiflashTick)..": "..Hunt.Shells[Hunt.HandShell[StatusBar.artiflashTick]]);
		}
	}
}

class NSHHunter:Hunter{// Replaces Hunter{
	Bool Checking;
	Int ShellType, Smokes;
	Array<Int> HandShell;
	
	Array<String> Shells, Spents, Fumbls, Names, Sprites, Bullets, Pickups;
	Array<Double> PowersMin, PowersMax;//For god's sake, add vector2 dynamic arrays PLEASE
	Array<int> Pellets;
		
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		String Shel = "HDShellAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_00");
			Spents.Push("HDSpentShell");
			Fumbls.Push("HDFumblingShell");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELL00"));
			Sprites.Push("SHL1A0");
			PowersMin.Push(.9);
			PowersMax.Push(1.05);
			Pickups.Push("ShellPickup");
			Pellets.Push(10);
		}
		
		Shel = "HDSlugAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_Slug");
			Spents.Push("HDSpentSlug");
			Fumbls.Push("HDFumblingSlug");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELLSLUG"));
			Sprites.Push("SLG1A0");
			PowersMin.Push(.91);
			PowersMax.Push(1.06);
			Pickups.Push("SlugPickup");
			Pellets.Push(1);
		}
		
		Shel = "HDExplosiveShellAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_12GuageSlugMissile");
			Spents.Push("HDSpentExplosiveShell");
			Fumbls.Push("HDFumblingExplosiveShell");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELLEXPL"));
			Sprites.Push("XLS1A0");
			PowersMin.Push(1.4);
			PowersMax.Push(1.6);
			Pickups.Push("ExplosiveShellPickup");
			Pellets.Push(1);
		}
		
		Shel = "HDLLShellAmmo";
		if((Class<Actor>)(Shel)){
			Shells.Push(Shel);
			Bullets.Push("HDB_00Rubber");
			Spents.Push("HDLLSpentShell");
			Fumbls.Push("HDLLFumblingShell");
			Names.Push(StringTable.Localize("$LWPHELP_SHTGSHELLLL"));
			Sprites.Push("LLS1A0");
			PowersMin.Push(.9);//According to llhunter from RadTechWeaponsPack
			PowersMax.Push(1.05);//
			Pickups.Push("LLShellPickup");
			Pellets.Push(10);//
		}
	}
		
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			String Sprt, AmmoType;
			Sprt = Sprites[ShellType];AmmoType = Shells[ShellType];
			
			sb.drawimage(Sprt,(-47,-10), basestatusbar.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.CountInv(AmmoType),-46,-8,
				basestatusbar.DI_SCREEN_CENTER_BOTTOM
			);
		}
		if(hdw.weaponstatus[HUNTS_CHAMBER]>1){
			sb.drawrect(-24,-14,5,3);
			sb.drawrect(-18,-14,2,3);
		}
		else if(hdw.weaponstatus[HUNTS_CHAMBER]>0){
			sb.drawrect(-18,-14,2,3);
		}
		if(!(hdw.weaponstatus[0]&HUNTF_EXPORT))sb.drawwepcounter(hdw.weaponstatus[HUNTS_FIREMODE],
			-26,-12,"blank","RBRSA3A7","STFULAUT"
		);
		if(hdw.weaponstatus[HUNTS_SAFETY]>0)sb.drawimage("SAFETY",(-17,-14),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
		sb.drawwepnum(hdw.weaponstatus[HUNTS_TUBE],hdw.weaponstatus[HUNTS_TUBESIZE],posy:-7);
		for(int i=hdw.weaponstatus[SHOTS_SIDESADDLE];i>0;i--){
			sb.drawrect(-16-i*2,-5,1,3);
		}
	}
	
	static double FireCustom(actor caller,int choke=1){
		double spread=6.;
		double speedfactor=1.;
		let hhh=NSHHunter(caller.findinventory("NSHHunter"));
		if(!hhh)Return 0;
		choke=hhh.weaponstatus[HUNTS_CHOKE];

		choke=clamp(choke,0,7);
		spread=6.5-0.5*choke;
		speedfactor=1.+0.02857*choke;
		
		int ShellType = hhh.weaponstatus[HUNTS_SHELL1];
		
		double shotpower=FRandom(hhh.PowersMin[ShellType], hhh.PowersMax[ShellType]);
		spread*=shotpower;
		speedfactor*=shotpower;
		HDBulletActor.FireBullet(caller,"HDB_wad");
		String Shot = hhh.Bullets[ShellType];
		int Pellets = hhh.Pellets[ShellType];
		
		HDBulletActor.FireBullet(caller,Shot,
			spread:spread,speedfactor:speedfactor,amount:Pellets
		);
		distantnoise.make(caller,"world/shotgunfar");
		caller.A_StartSound("weapons/hunter",CHAN_WEAPON,CHANF_OVERLAP);
		return shotpower;
	}
	
	action void A_FireHunter(){
		double shotpower=invoker.FireCustom(self);
		A_GunFlash();
		A_Overlay(PSP_FLASH-1, "RecoilLay");
		vector2 shotrecoil=(randompick(-1,1),-2.6);
		if(invoker.weaponstatus[HUNTS_FIREMODE]>0)shotrecoil=(randompick(-1,1)*1.4,-3.4);
		shotrecoil*=shotpower;
		A_MuzzleClimb(0,0,shotrecoil.x,shotrecoil.y,randompick(-1,1)*shotpower,-0.3*shotpower);
		invoker.weaponstatus[HUNTS_CHAMBER]=1;
		invoker.shotpower=shotpower;
	}
	
	override string gethelptext(){
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		
		String CurShell, NextShell, PrevShell;
		if(Names.Size()>1)
		{
			CurShell = Names[ShellType];
			
			if(ShellType<Names.Size()-1) NextShell = Names[shellType+1];
			else NextShell = Names[0];
			
			if(ShellType>0) PrevShell = Names[shellType-1];
			else PrevShell = Names[Names.Size()-1];
		}
		
		return
		LWPHELP_FIRE..StringTable.Localize("$SHOOT_CH")..weaponstatus[HUNTS_CHOKE]..")\n"
		..LWPHELP_ALTFIRE..StringTable.Localize("$PUMP")
		..LWPHELP_RELOAD..StringTable.Localize("$SHTG_REL1")
		..LWPHELP_ALTRELOAD..StringTable.Localize("$SHTG_REL2")
		..(weaponstatus[0]&HUNTF_EXPORT?"":(LWPHELP_FIREMODE..StringTable.Localize("$SHTG_FMODE")..(weaponstatus[0]&HUNTF_CANFULLAUTO?"/Auto":"").."\n"))
		..LWPHELP_FIREMODE.."+"..LWPHELP_RELOAD..StringTable.Localize("$SHTG_SIDE")
		..(Shells.Size()>1?LWPHELP_FIREMODE.."+"..LWPHELP_ALTRELOAD..StringTable.Localize("$SHTG_CHANGESHELLS")..CurShell.."-->"..NextShell.."\n":"")
		..(Shells.Size()>1?LWPHELP_FIREMODE.."+"..LWPHELP_ZOOM.."+"..LWPHELP_ALTRELOAD..StringTable.Localize("$SHTG_CHANGESHELLSBACK")..PrevShell.."<--"..CurShell.."\n":"")
		..LWPHELP_USE.."+"..LWPHELP_UNLOAD..StringTable.Localize("$SHTG_STEAL")
		..LWPHELP_UNLOADUNLOAD
		..LWPHELP_USE.."+"..LWPHELP_FIREMODE..StringTable.Localize("$LWPHELP_SAFETY")
		..LWPHELP_ZOOM.."+"..LWPHELP_RELOAD..StringTable.Localize("$LWPHELP_CHECKMAG")
		..LWPHELP_ZOOM.."+"..LWPHELP_ALTRELOAD..StringTable.Localize("$LWPHELP_CHECKSIDESADDLES")
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-32+bob.y,32,40,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.1;
		int Light = Owner.Cursector.LightLevel * 1.75;
		if(owner.player.fixedlightlevel==1)Light = 255;
		sb.drawimage(
			"frntsite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
		if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
		sb.drawimage(
			"fblksite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
		col:color(255-Light,0,0,0));
		sb.SetClipRect(cx,cy,cw,ch);

		if(bplayingid){sb.drawimage(
			"sgbaksit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
		if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
		sb.drawimage(
			"blaksite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9, col:color(255-Light,0,0,0)
		);}
		else if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
			sb.fill(
			color(250,int(Light*0.08),int(Light*0.08),int(Light*0.08)),
			bob.x-10,bob.y+6,20,4,
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
		else sb.fill(
			color(250,26,26,26),
			bob.x-10,bob.y+6,20,4,
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
	}
		
	action void A_Chamber(bool careful=false){
		int chm=invoker.weaponstatus[HUNTS_CHAMBER];
		invoker.weaponstatus[HUNTS_CHAMBER]=0;
		
		vector3 cockdir;double cp=cos(pitch);
		if(careful)cockdir=(-cp,cp,-5);
		else cockdir=(0,-cp*5,sin(pitch)*frandom(4,6));
		cockdir.xy=rotatevector(cockdir.xy,angle);
		bool pocketed=false;
		if(chm>1){
			String AmmoType = invoker.Shells[invoker.weaponstatus[HUNTS_SHELL1]];
			
			if(careful&&!A_JumpIfInventory(AmmoType,0,"null")){
				HDF.Give(self, AmmoType, 1);
				pocketed=true;
			}
		}else if(chm>0){
			cockdir*=frandom(1.,1.3);
		}

		if(
			!pocketed
			&&chm>=1
		){
			vector3 gunofs=HDMath.RotateVec3D((9,-1,-2),angle,pitch);
			actor rrr=null;
			
			String Fumbling = invoker.Fumbls[invoker.weaponstatus[HUNTS_SHELL1]];
			String Spent = invoker.Spents[invoker.weaponstatus[HUNTS_SHELL1]];
			
			if(chm>1)rrr=spawn(Fumbling,(pos.xy,pos.z+height*0.85)+gunofs+viewpos.offset);
			else rrr=spawn(Spent,(pos.xy,pos.z+height*0.85)+gunofs+viewpos.offset);

			rrr.target=self;
			rrr.angle=angle;
			rrr.vel=HDMath.RotateVec3D((1,-5,0.2),angle,pitch);
			if(chm==1)rrr.vel*=1.3;
			rrr.vel+=vel;
		}
		if(invoker.weaponstatus[HUNTS_TUBE]>0){
			For(int i=0;i<invoker.weaponstatus[HUNTS_TUBESIZE];i++)invoker.weaponstatus[HUNTS_SHELL1+i]=invoker.weaponstatus[HUNTS_SHELL2+i];
			invoker.weaponstatus[HUNTS_CHAMBER]=2;
			invoker.weaponstatus[HUNTS_TUBE]--;
		}
		if(Chm==1){
			int index;
			For(index=0;index<invoker.FireSmokes.Size();index++){
				if(!invoker.FireSmokes[index])Break;
			}
			if(index>=invoker.FireSmokes.Size())Return;
			
			NSHA_SmokeContainer a = New('NSHA_SmokeContainer');
			a.Vel = (1, -.2, .5);
			invoker.FireSmokes[index] = a;
			
			A_Overlay(PSP_FLASH+10+index, "SmokeLay");
			A_OverlayOffset(PSP_FLASH+10+index, 145+HDPlayerPawn(Self).crossbob.X, 134+HDPlayerPawn(Self).crossbob.Y);
			Player.GetPSprite(PSP_FLASH+10+index).Scale = (1,1)*FRandom(.2, .3);
			A_OverlayAlpha(PSP_FLASH+10+index, FRandom(.005, .13)*3);
		}
	}
	
	action void A_CheckPocketSaddles(){
		if(invoker.weaponstatus[SHOTS_SIDESADDLE]<1)invoker.weaponstatus[0]|=HUNTF_FROMPOCKETS;
		if(!countinv(invoker.Shells[invoker.ShellType]))invoker.weaponstatus[0]&=~HUNTF_FROMPOCKETS;
	}
	
	action bool A_LoadTubeFromHand(){
		int hand=invoker.handshell.Size();
		if(
			!hand
			||(
				invoker.weaponstatus[HUNTS_CHAMBER]>0
				&&invoker.weaponstatus[HUNTS_TUBE]>=invoker.weaponstatus[HUNTS_TUBESIZE]
			)
		){
			EmptyHand();
			return false;
		}
		invoker.weaponstatus[HUNTS_SHELL2+invoker.weaponstatus[HUNTS_TUBE]] = invoker.HandShell[hand-1];
		invoker.weaponstatus[HUNTS_TUBE]++;
		invoker.HandShell.Pop();
		A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
		return true;
	}
	
	Action Void EmptyHand(int amt=-1,bool careful=false){
		if(!amt)return;
		//if(amt>0)invoker.handshells=amt;
		while(invoker.handshell.Size()>0){
			
			if(careful&&!A_JumpIfInventory(invoker.Shells[invoker.HandShell[invoker.HandShell.Size()-1]],0,"null")){
				HDF.Give(self,invoker.Shells[invoker.HandShell[invoker.HandShell.Size()-1]],1);
				invoker.handshell.Pop();
 			}else if(invoker.handshell.Size()>=4){
				Bool Same = true;
				int Prev = -1;
				For(int i=0;i<4;i++){if(Prev!= -1 && Prev!=invoker.HandShell[i]){Same=false;Break;}Prev = invoker.HandShell[i];}
				if(Same)
				{
					For(int i=4;i>=0;i--)invoker.handshell.Pop();
					A_SpawnItemEx(invoker.Pickups[Prev],
						cos(pitch)*1,1,height-7-sin(pitch)*1,
						cos(pitch)*cos(angle)*frandom(1,2)+vel.x,
						cos(pitch)*sin(angle)*frandom(1,2)+vel.y,
						-sin(pitch)+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}
				else
				{
					A_SpawnItemEx(invoker.Fumbls[Prev],
						cos(pitch)*5,1,height-7-sin(pitch)*5,
						cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
						cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
						-sin(pitch)*random(1,4)+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
					invoker.handshell.Pop();
				}
			}else{
				A_SpawnItemEx(invoker.Fumbls[invoker.HandShell[invoker.HandShell.Size()-1]],
					cos(pitch)*5,1,height-7-sin(pitch)*5,
					cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
					cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
					-sin(pitch)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.handshell.Pop();
			}
		}
	}
	
	action bool A_GrabShells(int maxhand=3,bool settics=false,bool alwaysone=false){
		if(maxhand>0)EmptyHand();else maxhand=abs(maxhand);
		bool fromsidesaddles=!(invoker.weaponstatus[0]&HUNTF_FROMPOCKETS);
		int toload=min(
			fromsidesaddles?invoker.weaponstatus[SHOTS_SIDESADDLE]:countinv(invoker.Shells[invoker.ShellType]),
			alwaysone?1:(invoker.weaponstatus[HUNTS_TUBESIZE]-invoker.weaponstatus[HUNTS_TUBE]),
			maxhand
		);
		if(toload<1)return false;

		if(fromsidesaddles){
			For(int i=0;i<toload;i++)
			{
				invoker.weaponstatus[SHOTS_SIDESADDLE]--;
				invoker.HandShell.Push(invoker.Weaponstatus[HUNTS_SSHELL1+invoker.weaponstatus[SHOTS_SIDESADDLE]]);
			}
			if(settics)A_SetTics(2);
			A_StartSound("weapons/pocket",8,CHANF_OVERLAP,0.4);
			A_MuzzleClimb(
				frandom(0.1,0.15),frandom(0.05,0.08),
				frandom(0.1,0.15),frandom(0.05,0.08)
			);
		}else{
			A_TakeInventory(invoker.Shells[invoker.ShellType],toload,TIF_NOTAKEINFINITE);
			if(settics)A_SetTics(7);
			A_StartSound("weapons/pocket",9);
			A_MuzzleClimb(
				frandom(0.1,0.15),frandom(0.2,0.4),
				frandom(0.2,0.25),frandom(0.3,0.4),
				frandom(0.1,0.35),frandom(0.3,0.4),
				frandom(0.1,0.15),frandom(0.2,0.4)
			);
			For(int i=0;i<ToLoad;i++)invoker.HandShell.Push(invoker.ShellType);
		}
		return true;
	}
	
	action void A_UnloadSideSaddle(){
		int uamt=clamp(invoker.weaponstatus[SHOTS_SIDESADDLE],0,4);
		if(!uamt)return;
		Array<int> Grabbed;
		int Give;
		For(int i=0;i<uamt;i++)
		{
			Grabbed.Push(invoker.weaponstatus[HUNTS_SSHELL1+invoker.weaponstatus[SHOTS_SIDESADDLE]-1]);
			invoker.weaponstatus[SHOTS_SIDESADDLE]--;
			Class<HDPickUp> Amo = invoker.Shells[Grabbed[i]];
			Give += HDPickup.MaxGive(self, Amo, GetDefaultByType(Amo).Bulk);
		}

		if(Give>0&&pressingunload()){
			A_SetTics(16);
			uamt-=Min(Uamt, Give);
			For(int i=0;i<Grabbed.Size();i++)A_GiveInventory(invoker.Shells[Grabbed[i]], 1);
		}
		else {For(int i=0;i<Grabbed.Size();i++)invoker.HandShell.Push(Grabbed[i]);Grabbed.Clear();}

		A_StartSound("weapons/pocket",9);
		EmptyHand(uamt);
	}
	
	action void A_CannibalizeOtherShotgun(){
		let hhh=hdweapon(findinventory("NSHSlayer"));
		if(hhh){
			For(int i=0;i<Min(hhh.weaponstatus[SHOTS_SIDESADDLE], 4);i++)
			{
				A_GiveInventory(invoker.Shells[hhh.weaponstatus[HUNTS_SSHELL1+hhh.weaponstatus[SHOTS_SIDESADDLE]-1]], 1);
				hhh.weaponstatus[SHOTS_SIDESADDLE]--;
			}
		}
	}
	
	//int Smoking;
	//Vector2 LastSmoke;
	NSHA_SmokeContainer FireSmokes[50];
	
	states{
	
	SmokeLay:
		NSHS A 0{
					A_OverlayFlags(OverlayId(), PSPF_ADDBOB|PSPF_ADDWEAPON, false);
					A_OverlayFlags(OverlayId(), PSPF_ALPHA|PSPF_RENDERSTYLE, True);
					A_OverlayRenderStyle(OverlayId(), CVar.FindCVar("mrnsha_muzzlesmoke").GetBool()?STYLE_TRANSLUCENT:STYLE_NONE);
					A_OverlayPivot(OverlayId(), .5, .5);
					//Float Scale = FRandom(.05, .06);
					//A_OverlayScale(OverlayId(), Scale, Scale);
					//A_OverlayOffset(OverlayId(), 128+HDPlayerPawn(Self).crossbob.X, 113+HDPlayerPawn(Self).crossbob.Y);
					Player.GetPSprite(OverlayId()).Alpha=FRandom(.3, .5);
				}
		NSHS A 1{A_OverlayFlags(OverlayId(), PSPF_ALPHA|PSPF_RENDERSTYLE, True);
					A_OverlayRenderStyle(OverlayId(), CVar.FindCVar("mrnsha_muzzlesmoke").GetBool()?STYLE_TRANSLUCENT:STYLE_NONE);}
		NSHS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1{
					int Index = OverlayId()-PSP_FLASH-10;
					A_OverlayFlags(OverlayId(), PSPF_INTERPOLATE, true);
					
					Player.GetPSprite(OverlayId()).Alpha-=.01;
					
					Float Scale = (FRandom(.09, .13) + (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle))*.2);
					Scale -= (invoker.FireSmokes[Index].Vel.Y);
					Scale *= .1;
					A_OverlayScale(OverlayId(), Max(0, Scale), Max(0, Scale), WOF_ADD);
					
					if(Player.GetPSprite(OverlayId()).Scale.Length()>15)A_OverlayRenderStyle(OverlayId(), STYLE_NONE);
					Player.GetPSprite(OverlayId()).Y += Player.Cmd.Pitch*.02 + Max(0, (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle)*3));
					Player.GetPSprite(OverlayId()).Y -= invoker.FireSmokes[Index].Vel.Z*Cos(Pitch);
					Player.GetPSprite(OverlayId()).Y += invoker.FireSmokes[Index].Vel.Y*Sin(Pitch);
					Player.GetPSprite(OverlayId()).X += Player.Cmd.Yaw*.02 + (Vel.X*Cos(Angle+90) + Vel.Y*Sin(Angle+90)*5);
					Player.GetPSprite(OverlayId()).X += invoker.FireSmokes[index].Vel.X;
				}
		TNT1 A 0 {invoker.FireSmokes[OverlayId()-PSP_FLASH-10].Destroy();invoker.FireSmokes[OverlayId()-PSP_FLASH-10]=Null;}
		Stop;
		
	/*MuzzleSmokeLay:
		NSHS A 0 {
					A_OverlayFlags(OverlayId(), PSPF_ADDBOB|PSPF_ADDWEAPON, false);
					A_OverlayFlags(OverlayId(), PSPF_ALPHA|PSPF_RENDERSTYLE, True);
					A_OverlayRenderStyle(OverlayId(), CVar.FindCVar("mrnsha_muzzlesmoke").GetBool()?STYLE_ADD:STYLE_NONE);
					A_OverlayPivot(OverlayId(), .5, .5);
					Float Scale = FRandom(.028, .03);
					A_OverlayScale(OverlayId(), Scale, Scale);
					A_OverlayOffset(OverlayId(), 128+HDPlayerPawn(Self).crossbob.X, 113+HDPlayerPawn(Self).crossbob.Y);
					Float Smokes = invoker.Smoking;
					Player.GetPSprite(OverlayId()).Alpha=Max(.1, Min(.5, Smokes/170));
				}
		NSHS A 1;
		NSHS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1{
					Float VelZ = FRandom(.2, .7);
					A_OverlayFlags(OverlayId(), PSPF_INTERPOLATE, true);
					Player.GetPSprite(OverlayId()).Y-=Cos(Pitch)*VelZ+.1;
					Player.GetPSprite(OverlayId()).Alpha-=.05;
					Float Scale = (FRandom(.09, .13) + (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle))*.2 + VelZ*Sin(Pitch)*.5)*.05;
					A_OverlayScale(OverlayId(), Max(0, Scale), Max(0, Scale), WOF_ADD);
					if(Player.GetPSprite(OverlayId()).Scale.Length()>15)A_OverlayRenderStyle(OverlayId(), STYLE_NONE);
					Player.GetPSprite(OverlayId()).Y += Player.Cmd.Pitch*.02 + Max(0, (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle)*3));
					Player.GetPSprite(OverlayId()).X += Player.Cmd.Yaw*.02 + (Vel.X*Cos(Angle+90) + Vel.Y*Sin(Angle+90)*5);
					//if(-10-invoker.Smokes == OverlayId())invoker.LastSmoke = (Player.GetPSprite(OverlayId()).X, Player.GetPSprite(OverlayId()).Y);
				}
		TNT1 A 0 {invoker.Smokes--;}
		Stop;
	
	SmokingLay:
		TNT1 A 1{
				if(invoker.Smoking>0){// && invoker.Smokes<200){
					//A_SetTics(Max(1, 10-invoker.Smoking*.1));
					if(invoker.LastSmoke == (0,0))invoker.LastSmoke = (128+HDPlayerPawn(Self).crossbob.X, 113+HDPlayerPawn(Self).crossbob.Y);
					Vector2 Dif = Level.Vec2Diff((128+HDPlayerPawn(Self).crossbob.X, 113+HDPlayerPawn(Self).crossbob.Y), invoker.LastSmoke);
					Double Angle = VectorAngle(Dif.X, Dif.Y);
					
					For(float i=0;i<Max(2, Dif.Length());i++){
						A_Overlay(-10-invoker.Smokes, "MuzzleSmokeLay", true);
						A_OverlayOffset(-10-invoker.Smokes, 128+HDPlayerPawn(Self).crossbob.X+i*Cos(Angle), 113+HDPlayerPawn(Self).crossbob.Y+i*Sin(Angle));
						invoker.Smokes++;
					}
					
					invoker.LastSmoke = (128+HDPlayerPawn(Self).crossbob.X, 113+HDPlayerPawn(Self).crossbob.Y) +
					(Player.Cmd.Yaw*.02 + (Vel.X*Cos(Angle+90) + Vel.Y*Sin(Angle+90)*5), Player.Cmd.Pitch*.02 + Max(0, (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle)*3)));
					
					invoker.Smoking -= Random(1, 2);
				}
			}
		Loop;*/
	
	select0:
		SHTG A 0 {Invoker.Checking=False;A_OverlayPivot(PSP_WEAPON, 0.5, 1);}
		goto select0big;
	deselect0:
		SHTG A 0 {Invoker.Checking=False;}
		goto deselect0big;
	firemode:
		SHTG A 0 a_switchfiremode();
	firemodehold:
		---- A 1{
			if(pressingreload()){
				a_switchfiremode(false); //untoggle
				if(invoker.weaponstatus[SHOTS_SIDESADDLE]<12)setweaponstate("reloadss");
			}
			else if(JustPressed(BT_USER1) && invoker.Shells.Size()>1){
				a_switchfiremode(false);
				if(PressingZoom())
				{
					if(invoker.shelltype>0)invoker.shelltype--;
					else invoker.shelltype=invoker.Shells.Size()-1;
				}
				else
				{
					if(invoker.shelltype<invoker.Shells.Size()-1)invoker.shelltype++;
					else invoker.shelltype=0;
				}
				A_SetHelpText();
				setweaponstate("nope");
			}
			else A_WeaponReady(WRF_NONE);
		}
		---- A 0 A_JumpIf(pressingfiremode()/*&&invoker.weaponstatus[SHOTS_SIDESADDLE]<12*/,"firemodehold");
		goto nope;
	Safety:
		---- A 0 {A_StartSound("weapons/fmswitch",CHAN_WEAPON,CHANF_OVERLAP,0.4);
			invoker.weaponstatus[HUNTS_SAFETY]=!invoker.weaponstatus[HUNTS_SAFETY];}
		Goto Nope;
	ready:
		SHTG A 0 A_JumpIf(pressingunload()&&(pressinguse()||pressingzoom()),"cannibalize");
		---- A 0 A_JumpIf(pressinguse()&&pressingFiremode(),"Safety");
		SHTG A 0 A_JumpIf(pressingaltfire(),2);
		SHTG A 0{
			if(!pressingaltfire()){
				if(!pressingfire())A_ClearRefire();
				A_SetAltHold(false);
			}
		}
		SHTG A 1 A_WeaponReady(WRF_ALL);
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		goto readyend;
	reloadSS:
		SHTG A 1 offset(1,34);
		SHTG A 2 offset(2,34);
		SHTG A 3 offset(3,36);
	reloadSSrestart:
		SHTG A 6 offset(3,35);
		SHTG A 9 offset(4,34);
		SHTG A 4 offset(3,34){
			int hnd=min(
				countinv(invoker.Shells[invoker.ShellType]),
				12-invoker.weaponstatus[SHOTS_SIDESADDLE],
				3
			);
			if(hnd<1)setweaponstate("reloadSSend");
			else{
				A_TakeInventory(invoker.Shells[invoker.ShellType],hnd);
				For(int i=invoker.weaponstatus[SHOTS_SIDESADDLE];i<=invoker.weaponstatus[SHOTS_SIDESADDLE]+hnd;i++)
				{
					invoker.weaponstatus[HUNTS_SSHELL1+i]=invoker.ShellType;
				}
				invoker.weaponstatus[SHOTS_SIDESADDLE]+=hnd;
				A_StartSound("weapons/pocket",8);
			}
		}
		SHTG A 0 {
			if(
				!PressingReload()
				&&!PressingAltReload()
			)setweaponstate("reloadSSend");
			else if(
				invoker.weaponstatus[SHOTS_SIDESADDLE]<12
				&&countinv(invoker.Shells[invoker.ShellType])
			)setweaponstate("ReloadSSrestart");
		}
	reloadSSend:
		SHTG A 3 offset(2,34);
		SHTG A 1 offset(1,34) EmptyHand(careful:true);
		goto nope;
	hold:
		SHTG A 0{
			bool paf=pressingaltfire();
			if(
				paf&&!(invoker.weaponstatus[0]&HUNTF_ALTHOLDING)
			)setweaponstate("chamber");
			else if(!paf)invoker.weaponstatus[0]&=~HUNTF_ALTHOLDING;
		}
		SHTG A 1 A_WeaponReady(WRF_NONE);
		SHTG A 0 A_Refire();
		goto ready;
	fire:
		---- A 0 A_JumpIf(invoker.weaponstatus[HUNTS_SAFETY], "Nope");
		SHTG A 0 A_JumpIf(invoker.weaponstatus[HUNTS_CHAMBER]==2,"shoot");
		SHTG A 1 A_WeaponReady(WRF_NONE);
		SHTG A 0 A_Refire();
		goto ready;
	shoot:
		SHTG A 2;
		SHTG A 1 offset(0,36){A_FireHunter();A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);}
		SHTG E 1;
		SHTG E 0{
			if(
				invoker.weaponstatus[HUNTS_FIREMODE]>0
				&&invoker.shotpower>HUNTER_MINSHOTPOWER
				&&invoker.weaponstatus[HUNTS_SHELL1]!=2
			)setweaponstate("chamberauto");
		}goto ready;
	chamberauto:
		SHTG A 1 A_Chamber();
		SHTG A 1 A_JumpIf(invoker.weaponstatus[0]&HUNTF_CANFULLAUTO&&invoker.weaponstatus[HUNTS_FIREMODE]==2,"ready");
		SHTG A 0 A_Refire();
		goto ready;
	flash:
		SHTF B 1 bright{
			A_Light2();
			HDFlashAlpha(-32);
		}
		TNT1 A 1 A_ZoomRecoil(0.9);
		TNT1 A 0 {
				A_Light0();
				//if(invoker.Smoking<400)invoker.Smoking += 30;
				//A_Overlay(PSP_FLASH+10, "SmokingLay", true);
			}
		TNT1 A 0 A_AlertMonsters();
		stop;
	RecoilLay:
		TNT1 A 1{Vector2 Pivot = (FRandom(-.5, .5), FRandom(-.5, .5));
			if(GunBraced())Pivot = (FRandom(-.25, .25), FRandom(-.25, .25));
			Pivot.X *= invoker.ShotPower;
			Pivot.Y *= invoker.ShotPower;
			Pivot.X = .5+Pivot.X;
			Pivot.Y = .3+Pivot.Y;
			A_OverlayScale(PSP_WEAPON, 1);A_OverlayScale(PSP_FLASH, 1);
			A_OverlayPivot(PSP_WEAPON, Pivot.X, Pivot.Y);A_OverlayPivot(PSP_FLASH, Pivot.X, Pivot.Y);}
		TNT1 AAAA 1
			{
				Vector2 Pivot = Player.GetPSprite(PSP_WEAPON).Pivot;
				Float Recoil = (Pivot.X-.5)*5*abs(Pivot.Y-.5);
				if(GunBraced())Recoil *= .1;
				A_OverlayScale(PSP_WEAPON, .01, .02, WOF_ADD);Player.GetPSprite(PSP_FLASH).Scale = Player.GetPSprite(PSP_WEAPON).Scale;
				A_OverlayRotate(PSP_WEAPON, Recoil, WOF_ADD);Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;
			}
		TNT1 A 2
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;
		
	altfire:
	chamber:
		SHTG A 0 A_JumpIf(invoker.weaponstatus[0]&HUNTF_ALTHOLDING,"nope");
		SHTG A 0 A_SetAltHold(true);
		SHTG A 1 {A_StartSound("weapons/huntrackbak",8);A_OverlayRotate(0, FRandom(.3, .8));}
		SHTG AE 1 {A_MuzzleClimb(0,frandom(0.6,1.));A_OverlayRotate(0, FRandom(.3, .8), WOF_ADD);}
		SHTG E 1 A_JumpIf(pressingaltfire(),"longstroke");
		SHTG EA 1 {A_MuzzleClimb(0,-frandom(0.06,0.1));A_OverlayRotate(0, -FRandom(.3, .8), WOF_ADD);}
		#### # 0 A_OverlayRotate(0, 0);
		SHTG E 0 A_Refire("ready");
		goto ready;
	longstroke:
		SHTG F 2 {A_MuzzleClimb(frandom(0.1,0.2));}
		SHTG F 0{
			A_Chamber();
			A_MuzzleClimb(-frandom(0.1,0.2));
		}
	racked:
		SHTG F 1 {A_WeaponReady(WRF_NOFIRE);}
		SHTG F 0 A_JumpIf(!pressingaltfire(),"unrack");
		SHTG F 0 A_JumpIf((pressingunload()&&invoker.weaponstatus[HUNTS_CHAMBER]>0),"rackunload");
		SHTG F 0 A_JumpIf(invoker.weaponstatus[HUNTS_CHAMBER],"racked");
		SHTG F 0{
			int rld=0;
			if(pressingreload()){
				rld=1;
				if(invoker.weaponstatus[SHOTS_SIDESADDLE]>0)
				invoker.weaponstatus[0]&=~HUNTF_FROMPOCKETS;
				else{
					invoker.weaponstatus[0]|=HUNTF_FROMPOCKETS;
					rld=2;
				}
			}else if(pressingaltreload()){
				rld=2;
				invoker.weaponstatus[0]|=HUNTF_FROMPOCKETS;
			}
			if(
				(rld==2&&countinv(invoker.Shells[invoker.ShellType]))
				||(rld==1&&invoker.weaponstatus[SHOTS_SIDESADDLE]>0)
			)setweaponstate("rackreload");
		}
		loop;
		
	HandLoadShelRack:
		SHHA C 1 A_OverLayOffset(26, 18, 16);
		#### ## 1 A_OverlayOffset(26, -6, 8, WOF_ADD);
		SHHA D 1 {if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, -3, -8, WOF_INTERPOLATE); Else A_OverLayOffset(26, -2, -6, WOF_INTERPOLATE);}
		SHHA D 1 A_OverLayOffset(26, -2, -7, WOF_INTERPOLATE);
		SHHA D 1 {if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, -1, -6, WOF_INTERPOLATE); Else A_OverLayOffset(26, -2, -8, WOF_INTERPOLATE);}
		SHHA D 1 A_OverLayOffset(26, -2, -9, WOF_INTERPOLATE);
		RVHA C 1 A_OverLayOffset(26, -32, 45);
		RVHA C 1 A_OverLayOffset(26, -28, 52, WOF_INTERPOLATE);
		Stop;
		
	rackreload:
		SHTG F 1 offset(-1,35)A_WeaponBusy(true);
		SHTG F 2 offset(-2,37);
		SHTG F 4 offset(-3,40);
		SHTG F 1 offset(-4,42) A_GrabShells(1,true,true);
		SHTG F 0 A_JumpIf(!(invoker.weaponstatus[0]&HUNTF_FROMPOCKETS),"rackloadone");
		SHTG F 6 offset(-5,43);
		SHTG F 6 offset(-4,41) A_StartSound("weapons/pocket",9);
	rackloadone:
		---- A 0 A_OverLay(26, "HandLoadShelRack");
		SHTG F 1 offset(-4,42);
		SHTG F 2 offset(-4,41);
		SHTG F 3 offset(-4,40){
			A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
			invoker.weaponstatus[HUNTS_CHAMBER]=2;
			if(invoker.HandShell.Size()>0){invoker.weaponstatus[HUNTS_SHELL1]=invoker.HandShell[invoker.HandShell.Size()-1];
				invoker.HandShell.Pop();}
			EmptyHand(careful:true);
		}
		SHTG F 5 offset(-4,41);
		SHTG F 4 offset(-4,40) A_JumpIf(invoker.handshell.Size()>0,"rackloadone");
		goto rackreloadend;
	rackreloadend:
		SHTG F 1 offset(-3,39);
		SHTG F 1 offset(-2,37);
		SHTG F 1 offset(-1,34);
		SHTG F 0 A_WeaponBusy(false);
		goto racked;

	HandUnLoadRack:
		RVHA C 1 A_OverLayOffset(26, -28, 49);
		RVHA C 1 A_OverLayOffset(26, -32, 35, WOF_INTERPOLATE);
		RVHA C 1 A_OverLayOffset(26, -35, 33, WOF_INTERPOLATE);
		SHHA D 1 A_OverLayOffset(26, -2, -9);
		SHHA D 1 {if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, -1, -10, WOF_INTERPOLATE); Else A_OverLayOffset(26, -2, -8, WOF_INTERPOLATE);}
		SHHA D 1 A_OverLayOffset(26, -2, -7, WOF_INTERPOLATE);
		SHHA D 1 {if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, -1, -4, WOF_INTERPOLATE); Else A_OverLayOffset(26, -2, -3, WOF_INTERPOLATE);}
		SHHA C 1 A_OverLayOffset(26, 12, 8);
		SHHA C 1 A_OverLayOffset(26, 18, 16, WOF_INTERPOLATE);
		Stop;
	rackunload:
		SHTG F 1 offset(-1,35)A_WeaponBusy(true);
		SHTG F 2 offset(-2,37);
		SHTG F 4 offset(-3,40);
		---- A 0 A_OverLay(26, "HandUnLoadRack");
		SHTG F 1 offset(-4,42);
		SHTG F 2 offset(-4,41);
		SHTG F 3 offset(-4,40){
			int chm=invoker.weaponstatus[HUNTS_CHAMBER];
			invoker.weaponstatus[HUNTS_CHAMBER]=0;
			if(chm==2){
				invoker.handshell.Push(invoker.weaponstatus[HUNTS_SHELL1]);
				EmptyHand(careful:true);
			}else if(chm==1)A_SpawnItemEx(invoker.Spents[invoker.weaponstatus[HUNTS_SHELL1]],
				cos(pitch)*8,0,height-7-sin(pitch)*8,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			if(chm)A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
		}
		SHTG F 5 offset(-4,41);
		SHTG F 4 offset(-4,40) A_JumpIf(invoker.handshell.Size()>0,"rackloadone");
		goto rackreloadend;

	unrack:
		SHTG F 0 {A_StartSound("weapons/huntrackfwd", 8);A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);}
		SHTG E 1 A_JumpIf(!pressingfire(),1);
		SHTG EA 2{
			if(pressingfire())A_SetTics(1);
			A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, false);
			A_OverlayRotate(0, -FRandom(.3, .8), WOF_ADD);
			A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, false);
			A_MuzzleClimb(0,-frandom(0.6,1.));
		}
		SHTG A 0 {A_ClearRefire();A_OverlayRotate(0, 0, 0);A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, false);}
		goto ready;
		
		
	SideShell1:
		STKG K 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[HUNTS_SSHELL1]]);
		Wait;
	SideShell2:
		STKG L 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[HUNTS_SSHELL3]]);
		Wait;
	SideShell3:
		STKG M 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[HUNTS_SSHELL5]]);
		Wait;
	SideShell4:
		STKG N 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[HUNTS_SSHELL7]]);
		Wait;
	SideShell5:
		STKG O 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[HUNTS_SSHELL9]]);
		Wait;
	SideShell6:
		STKG P 1 A_OverlayTranslation(OverlayId(), "NSH"..invoker.Shells[invoker.weaponstatus[HUNTS_SSHELL11]]);
		Wait;
		
	CheckSide:
		TNT1 A 0 A_OverLay(102, "SideCheck");
		TNT1 A 12 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
	CheckingSide:
		#### # 1;
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
	CheckSideLoop:
		STKG J 5 A_JumpIf(!pressingaltreload(),"CheckSideEnd");
		Loop;
	CheckSideEnd:
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		TNT1 A 0 A_OverLay(102, "SideCheckEnd");
		TNT1 # 12;
		Goto Ready;
	SideCheck:
		SHTG A 1 A_OverLayOffset(102, -2, 0);
		#### #### 1 A_OverlayOffset(OverlayId(), -10, 30, WOF_ADD);
		TNT1 A 2;
	RaiseSide:
		#### A 0 {
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>0)A_Overlay(103, "SideShell1");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>2)A_Overlay(104, "SideShell2");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>4)A_Overlay(105, "SideShell3");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>6)A_Overlay(106, "SideShell4");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>8)A_Overlay(107, "SideShell5");
			if(invoker.weaponstatus[SHOTS_SIDESADDLE]>10)A_Overlay(108, "SideShell6");
			}
		STKG J 1 {
			For(int i=0;i<7;i++){A_OverlayPivot(OverlayId()+i, 0, 1);A_OverLayOffset(OverlayId()+i, 50, 40);A_OverlayRotate(OverlayId()+i, -80);}
			}
		#### #### 1 {
			For(int i=0;i<7;i++){A_OverlayOffset(OverlayId()+i, -8, -7, WOF_ADD);A_OverlayRotate(OverlayId()+i, 20, WOF_ADD);}
			}
		#### # 1 {For(int i=0;i<7;i++)A_OverLayOffset(OverlayId()+i, 0, 0);
			invoker.Checking=true;
			}
		Stop;
	SideCheckEnd:
		STKG J 0 {For(int i=0;i<7;i++){A_OverLayOffset(OverlayId()+i, 6, 0);A_OverlayPivot(OverlayId()+i, 0, 1);}}
		#### #### 1 {For(int i=0;i<7;i++){A_OverlayOffset(OverlayId()+i, 11, 10, WOF_ADD);A_OverlayRotate(OverlayId()+i, -20, WOF_ADD);}}
		#### # 0 A_ClearOverlays(103, 109);
		TNT1 A 2 {invoker.Checking=false;A_OverlayRotate(OverlayId(), 0);}
		SHTG A 1 A_OverLayOffset(102, -50, 150);
		SHTG AAAAA 1 A_OverlayOffset(OverlayId(), 10, -30, WOF_ADD);
		Stop;
		
	altreload:
	reloadfrompockets:
		---- A 0 A_JumpIf(pressingzoom(),"CheckSide");
		SHTG A 0{
			if(!countinv(invoker.Shells[invoker.ShellType]))setweaponstate("nope");
			else invoker.weaponstatus[0]|=HUNTF_FROMPOCKETS;
		}goto startreload;
	CheckTube:
		SHTG A 1;
		SHTG GB 4 A_MuzzleClimb(frandom(1.2,2.4),-frandom(1.2,2.4));
		SHTG H 1 offset(0,34);
		SHTG I 1 offset(0,36) A_StartSound("weapons/huntopen",8);
		SHTG C 1 offset(0,38);
		SHTG C 4 offset(0,36) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		#### # 0 {Invoker.Checking=True;}
		SHTG J 0 A_JumpIf(invoker.weaponstatus[HUNTS_CHAMBER]>0,2);
		SHTG Q 0;
		SHTG # 1 offset(0,34) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
	CheckLoop:
		---- # 0 {if(invoker.weaponstatus[HUNTS_TUBE]>0)A_OverLay(102,"Dumb");
				if(invoker.weaponstatus[HUNTS_CHAMBER]>0)A_OverLay(103,"Dumb3");
				if(invoker.weaponstatus[HUNTS_FIREMODE]>0)A_OverLay(104,"Dumb4");}
		SHTG # 5 offset(0,34) A_JumpIf(!pressingreload(),"CheckEnd");
		Loop;
	CheckEnd:
		SHTG C 4 offset(0,34){ A_StartSound("weapons/huntopen",8);Invoker.Checking=False;}
		SHTG I 1 offset(0,36);
		SHTG H 1 offset(0,34);
		SHTG BGA 3 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		SHTG A 0 A_JumpIf(invoker.weaponstatus[0]&HUNTF_HOLDING,"nope");
		goto ready;
	Dumb:
		STUP O 5 {A_OverLayOffset(102,29,20);
			A_OverlayPivot(OverlayId(), 1, .5);Float Mag = invoker.weaponstatus[HUNTS_TUBE];A_OverlayScale(OverlayId(), Mag/invoker.weaponstatus[HUNTS_TUBESIZE], 1);}
		Stop;
	Dumb3:
		STUP A 0 A_OverLayOffset(103,29,17);
		STUP A 5 A_JumpIf(Invoker.WeaponStatus[HUNTS_CHAMBER]>1,1);
		Stop;
		STUP P 5;
		Stop;
	Dumb4:
		STUP A 0 A_OverLayOffset(104,25,18);
		#### W 0 A_JumpIf(invoker.weaponstatus[HUNTS_FIREMODE]>1, 2);
		STUP Q 0;
		#### # 5;
		Stop;
		
	reload:
	reloadfromsidesaddles:
		SHTG A 0{
			A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
			If(pressingzoom())Setweaponstate("CheckTube");
			int sss=invoker.weaponstatus[SHOTS_SIDESADDLE];
			int ppp=countinv(invoker.Shells[invoker.ShellType]);
			if(ppp<1&&sss<1&&!pressingzoom())setweaponstate("nope");
				else if(sss<1)
					invoker.weaponstatus[0]|=HUNTF_FROMPOCKETS;
				else invoker.weaponstatus[0]&=~HUNTF_FROMPOCKETS;
		}goto startreload;
	startreload:
		SHTG A 1{
			if(
				invoker.weaponstatus[HUNTS_TUBE]>=invoker.weaponstatus[HUNTS_TUBESIZE]
			){
				if(
					invoker.weaponstatus[SHOTS_SIDESADDLE]<12
					&&countinv(invoker.Shells[invoker.ShellType])
				)setweaponstate("ReloadSS");
				else setweaponstate("nope");
			}
		}
		---- A 0 A_MuzzleClimb(frandom(.6,.7),-frandom(.6,.7));
		SHTG GB 2;
		---- A 0 A_MuzzleClimb(frandom(.6,.7),-frandom(.6,.7));
		SHTG HI 2;
	reloadstarthand:
		SHTG C 1 offset(0,36);
		SHTG C 1 offset(0,38);
		SHTG C 2 offset(0,36);
		SHTG C 2 offset(0,34);
		SHTG C 3 offset(0,36);
		SHTG C 3 offset(0,40) A_CheckPocketSaddles();
		SHTG C 0 A_JumpIf(invoker.weaponstatus[0]&HUNTF_FROMPOCKETS,"reloadpocket");
	reloadfast:
		SHTG C 3 offset(0,40) A_GrabShells(3,false);
		SHTG C 3 offset(0,42) A_StartSound("weapons/pocket",9,volume:0.4);
		SHTG C 2 offset(0,41);
		goto reloadashell;
	reloadpocket:
		SHTG C 3 offset(0,39) A_GrabShells(3,false);
		SHTG C 5 offset(0,42) A_StartSound("weapons/pocket",9);
		SHTG C 6 offset(0,41) A_StartSound("weapons/pocket",9);
		SHTG C 4 offset(0,40);
		goto reloadashell;
	HandLoadShell:
		SHHA A 1 {A_OverLayOffset(-26, -17, 20);A_OverlayScale(OverlayId(), 1, 1);}
		SHHA A 1 {A_OverLayOffset(-26, -22, 7, WOF_INTERPOLATE);A_OverlayScale(OverlayId(), 1.14, 1.14, WOF_INTERPOLATE);}
		SHHA A 1 {A_OverLayOffset(-26, -29, 6, WOF_INTERPOLATE);A_OverlayScale(OverlayId(), 1.17, 1.17, WOF_INTERPOLATE);}
		SHHA A 1{A_OverlayRotate(OverlayId(), FRandom(1.5, 3), WOF_ADD);if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, -42, 2, WOF_INTERPOLATE); Else A_OverLayOffset(-26, -42, 2, WOF_INTERPOLATE);A_OverlayScale(OverlayId(), 1.2, 1.2, WOF_INTERPOLATE);}
		SHHA B 1 {A_OverlayRotate(OverlayId(), FRandom(1.5, 3), WOF_ADD);A_OverLayOffset(-26, 4, 5);A_OverlayScale(OverlayId(), 1.1, 1.1);}
		SHHA B 1{if((HDPlayerPawn(self).bloodpressure>20)||(Health<41))A_OverLayOffset(-26, -1, .9, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 0, 0, WOF_INTERPOLATE);}
		SHHA B 1 {A_OverlayRotate(OverlayId(), -FRandom(.5, 2), WOF_ADD);A_OverLayOffset(-26, 0, 1, WOF_INTERPOLATE);}
		SHHA B 1{A_OverlayRotate(OverlayId(), -FRandom(.5, 2), WOF_ADD);if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, -1, 3, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 0, 2, WOF_INTERPOLATE);}
		SHHA B 1 {A_OverlayRotate(OverlayId(), -FRandom(.5, 2), WOF_ADD);A_OverLayOffset(-26, 1, 4, WOF_INTERPOLATE);}
		SHHA B 1{A_OverlayRotate(OverlayId(), -FRandom(.5, 2), WOF_ADD);if((HDPlayerPawn(self).bloodpressure>20)||(Health<41))A_OverLayOffset(-26, 3, 3, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 3, 7, WOF_INTERPOLATE);}
		SHHA B 1 A_OverLayOffset(-26, 4, 9, WOF_INTERPOLATE);
		SHHA B 1{if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, 7, 10, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 12, 14, WOF_INTERPOLATE);A_OverlayScale(OverlayId(), -.1, -.1, WOF_ADD);}
		SHHA B 1 {A_OverLayOffset(-26, 13, 19, WOF_INTERPOLATE);A_OverlayScale(OverlayId(), -.1, -.1, WOF_ADD);}
		SHHA B 1 {A_OverLayOffset(-26, 14, 24, WOF_INTERPOLATE);A_OverlayScale(OverlayId(), -.1, -.1, WOF_ADD);}
		SHHA B 1 {A_OverLayOffset(-26, 15, 29, WOF_INTERPOLATE);A_OverlayScale(OverlayId(), -.1, -.1, WOF_ADD);}
		Stop;
	reloadashell:
		---- A 0 A_OverLay(-26, "HandLoadShell");
		SHTG C 2 offset(0,36);
		SHTG C 4 offset(0,34)A_LoadTubeFromHand();
		SHTG CCCCCC 1 offset(0,33){
			if(
				PressingReload()
				||PressingAltReload()
				||PressingUnload()
				||PressingFire()
				||PressingAltfire()
				||PressingZoom()
				||PressingFiremode()
			)invoker.weaponstatus[0]|=HUNTF_HOLDING;
			else invoker.weaponstatus[0]&=~HUNTF_HOLDING;

			if(
				invoker.weaponstatus[HUNTS_TUBE]>=invoker.weaponstatus[HUNTS_TUBESIZE]
				||(
					invoker.handshell.Size()<1&&(
						invoker.weaponstatus[0]&HUNTF_FROMPOCKETS
						||invoker.weaponstatus[SHOTS_SIDESADDLE]<1
					)&&
					!countinv(invoker.Shells[invoker.ShellType])
				)
			)setweaponstate("reloadend");
			else if(
				!pressingaltreload()
				&&!pressingreload()
			)setweaponstate("reloadend");
			else if(invoker.handshell.Size()<1)setweaponstate("reloadstarthand");
		}goto reloadashell;
	reloadend:
		SHTG C 4 offset(0,34) A_StartSound("weapons/huntopen",8);
		SHTG I 1 offset(0,36) EmptyHand(careful:true);
		SHTG H 1 offset(0,34);
		SHTG BGA 3 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		SHTG A 0 A_JumpIf(invoker.weaponstatus[0]&HUNTF_HOLDING,"nope");
		goto ready;

	cannibalize:
		SHTG A 2 offset(0,36) A_JumpIf(!countinv("NSHSlayer"),"nope");
		SHTG A 2 offset(0,40) A_StartSound("weapons/pocket",9);
		SHTG A 6 offset(0,42);
		SHTG A 4 offset(0,44);
		SHTG A 6 offset(0,42);
		SHTG A 2 offset (0,36) A_CannibalizeOtherShotgun();
		goto ready;

	unloadSS:
		SHTG A 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		#### # 2 offset(1,34) A_JumpIf(invoker.weaponstatus[SHOTS_SIDESADDLE]<1,"nope");
		#### # 0 A_OverlayPivot(PSP_WEAPON, 1, 1);
		#### # 1 offset(2,38)A_OverlayRotate(PSP_WEAPON, 5, WOF_INTERPOLATE);
		#### # 1 offset(3,42)A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE);
	unloadSSLoop1:
		#### # 4 offset(4,46) A_OverlayRotate(PSP_WEAPON, 15, WOF_INTERPOLATE);
		#### # 2 offset(5,47) {A_UnloadSideSaddle();A_OverlayRotate(PSP_WEAPON, 17, WOF_INTERPOLATE);}
		#### # 3 offset(4,46){	//decide whether to loop
			if(
				PressingReload()
				||PressingFire()
				||PressingAltfire()
				||invoker.weaponstatus[SHOTS_SIDESADDLE]<1
			)setweaponstate("unloadSSend");
		A_OverlayRotate(PSP_WEAPON, 15, WOF_INTERPOLATE);
		}goto unloadSSLoop1;
	unloadSSend:
		#### # 3 offset(4,42) A_OverlayRotate(PSP_WEAPON, 15, WOF_INTERPOLATE);
		#### # 2 offset(3,37) A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE);
		#### # 1 offset(2,34) A_OverlayRotate(PSP_WEAPON, 5, WOF_INTERPOLATE);
		#### # 1 offset(1,34) A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);
		goto nope;
	HandUnLoad:
		RVHA A 1 A_OverLayOffset(-26, -40, 55);
		RVHA A 1 A_OverLayOffset(-26, -40, 44, WOF_INTERPOLATE);
		RVHA A 1 A_OverLayOffset(-26, -40, 38, WOF_INTERPOLATE);
		RVHA A 1 A_OverLayOffset(-26, -50, 34, WOF_INTERPOLATE);
		RVHA A 1 A_OverLayOffset(-26, -60, 29, WOF_INTERPOLATE);
		SHHA B 1 {if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, 0, 5); Else A_OverLayOffset(-26, 1, 4);}
		SHHA B 1 A_OverLayOffset(-26, 1, 4, WOF_INTERPOLATE);
		SHHA B 1{if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, -1, 3, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 1, 4, WOF_INTERPOLATE);}
		SHHA B 1 A_OverLayOffset(-26, 1, 4, WOF_INTERPOLATE);
		SHHA B 1 {if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, 0, 5, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 1, 4, WOF_INTERPOLATE);}
		SHHA B 1 A_OverLayOffset(-26, 3, 7, WOF_INTERPOLATE);
		SHHA B 1 {if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, 3, 6, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 4, 9, WOF_INTERPOLATE);}
		SHHA B 1 A_OverLayOffset(-26, 12, 14, WOF_INTERPOLATE);
		SHHA B 1 {if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, 11, 16, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 13, 19, WOF_INTERPOLATE);}
		SHHA B 1 A_OverLayOffset(-26, 14, 24, WOF_INTERPOLATE);
		SHHA B 1 A_OverLayOffset(-26, 15, 29, WOF_INTERPOLATE);
		Stop;
	HandUnLoading:
		RVHA A 1 {A_OverLayOffset(-26, 5-78, 14+35, WOF_INTERPOLATE);A_OverlayRotate(OverlayId(), -1);}
		RVHA A 1 {A_OverlayRotate(OverlayId(), -2); if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, 6-75, 10+30, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 4.5-78, 11+35, WOF_INTERPOLATE);}
		RVHA A 2 {A_OverLayOffset(-26, 4-78, 7+35, WOF_INTERPOLATE);A_OverlayRotate(OverlayId(), -4);}
		RVHA A 1 {A_OverlayRotate(OverlayId(), -6); if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, 2-75, 3+30, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 1-78, 5+35, WOF_INTERPOLATE);}
		SHHA B 1 {A_OverLayOffset(-26, 0, 0);A_OverlayRotate(OverlayId(), -8);}
		SHHA B 2 {A_OverLayOffset(-26, 2, 2, WOF_INTERPOLATE);A_OverlayRotate(OverlayId(), -7);}
		SHHA B 1 {A_OverlayRotate(OverlayId(), -6); if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, 3, 3, WOF_INTERPOLATE); Else A_OverLayOffset(-26, 3, 4, WOF_INTERPOLATE);}
		SHHA B 1 {A_OverLayOffset(-26, 6, 7, WOF_INTERPOLATE);A_OverlayRotate(OverlayId(), -5);}
		SHHA B 1 {A_OverLayOffset(-26, 9, 10, WOF_INTERPOLATE);A_OverlayRotate(OverlayId(), -4);}
		SHHA B 1 {A_OverLayOffset(-26, 11, 12, WOF_INTERPOLATE);A_OverlayRotate(OverlayId(), -3);}
		SHHA B 1 {A_OverLayOffset(-26, 15, 15, WOF_INTERPOLATE);A_OverlayRotate(OverlayId(), 0);}
	HandUnloaded:
		SHHA B 1 A_OverLayOffset(-26, 20, 18, WOF_INTERPOLATE);
		SHHA B 1 A_OverLayOffset(-26, 21, 24, WOF_INTERPOLATE);
		SHHA B 1 A_OverLayOffset(-26, 22, 29, WOF_INTERPOLATE);
		Stop;
	HandUnloadCham:
		RVHA C 2 A_OverLayOffset(26, -100, 50);
		RVHA C 2 A_OverLayOffset(26, -110, 40, WOF_INTERPOLATE);
		RVHA C 1 A_OverLayOffset(26, -120, 30, WOF_INTERPOLATE);
		SHHA B 1 A_OverLayOffset(26, -30, 17);
		SHHA B 2 A_OverLayOffset(26, -34, 16, WOF_INTERPOLATE);
		SHHA A 1 A_OverLayOffset(26, -50, 16, WOF_INTERPOLATE);
		SHHA A 1 A_OverLayOffset(26, -42, 23, WOF_INTERPOLATE);
		SHHA A 1 A_OverLayOffset(26, -37, 32, WOF_INTERPOLATE);
		Stop;
	unload:
		SHTG A 1{
			A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
			if(
				invoker.weaponstatus[SHOTS_SIDESADDLE]>0
				&&!(player.cmd.buttons&BT_USE)
			)setweaponstate("unloadSS");
			else if(
				invoker.weaponstatus[HUNTS_CHAMBER]<1
				&&invoker.weaponstatus[HUNTS_TUBE]<1
			)setweaponstate("nope");
		}
		SHTG GB 4 A_MuzzleClimb(frandom(1.2,2.4),-frandom(1.2,2.4));
		SHTG H 1 offset(0,34) A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		SHTG I 1 offset(0,36) A_StartSound("weapons/huntopen",8);
		SHTG C 1 offset(0,38);
		---- A 0 {If(invoker.weaponstatus[HUNTS_CHAMBER]>1)A_OverLay(26, "HandUnloadCham");}
		SHTG J 4 offset(0,36){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			if(invoker.weaponstatus[HUNTS_CHAMBER]<1){
				A_OverLay(26, "Non");
				setweaponstate("unloadtube");
			}else A_StartSound("weapons/huntrackbak",8,CHANF_OVERLAP);
		}
		SHTG Q 3 offset(0,36){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			int chm=invoker.weaponstatus[HUNTS_CHAMBER];
			invoker.weaponstatus[HUNTS_CHAMBER]=0;
			if(chm>1){
				A_StartSound("weapons/huntreload",8);
				if(A_JumpIfInventory(invoker.Shells[invoker.WeaponStatus[HUNTS_SHELL1]],0,"null"))A_SpawnItemEx(invoker.Fumbls[invoker.WeaponStatus[HUNTS_SHELL1]],
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*5,
					vel.y+cos(pitch)*sin(angle-random(86,90))*5,
					vel.z+sin(pitch)*random(4,6),
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);else{
					HDF.Give(self, invoker.Shells[invoker.WeaponStatus[HUNTS_SHELL1]], 1);
					A_StartSound("weapons/pocket",9);
					A_SetTics(5);
				}
			}else if(chm>0){
			
				For(int i=Random(0, 2);i<3;i++){
					int index;
					For(index=0;index<invoker.FireSmokes.Size();index++){
						if(!invoker.FireSmokes[index])Break;
					}
					if(index>=invoker.FireSmokes.Size())Return;
					
					NSHA_SmokeContainer a = New('NSHA_SmokeContainer');
					a.Vel = (FRandom(.7, 1.4), -FRandom(.3, .5), FRandom(.1, 2));
					invoker.FireSmokes[index] = a;
					
					A_Overlay(PSP_FLASH+10+index, "SmokeLay");
					A_OverlayOffset(PSP_FLASH+10+index, 45+HDPlayerPawn(Self).crossbob.X, 154+HDPlayerPawn(Self).crossbob.Y);
					Player.GetPSprite(PSP_FLASH+10+index).Scale = (1,1)*FRandom(.5, .6);
					A_OverlayAlpha(PSP_FLASH+10+index, FRandom(.2, .4));
				}
				
				A_SpawnItemEx(invoker.Spents[invoker.WeaponStatus[HUNTS_SHELL1]],
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*5,
					vel.y+cos(pitch)*sin(angle-random(86,90))*5,
					vel.z+sin(pitch)*random(4,6),
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);A_OverLay(26, "None");
			}
		}
		#### # 0 A_StartSound("weapons/huntrackfwd", 8);
		SHTG R 5 offset(0,36) A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		SHTG C 0 A_JumpIf(!pressingunload(),"reloadend");
		SHTG QC 2 offset(0,40);
	unloadtube:
		---- A 0 A_OverLay(-26,"HandUnload");
		SHTG C 6 offset(0,40) EmptyHand(careful:true);
	unloadloop:
		---- A 0 A_OverLay(-26,"HandUnloading");
		SHTG C 8 offset(1,41){
			if(invoker.weaponstatus[HUNTS_TUBE]<1){setweaponstate("reloadend"); A_OverLay(-26,"HandUnloaded");}
			else if(invoker.handshell.Size()>=3)setweaponstate("unloadloopend");
			else{
				invoker.handshell.Push(invoker.weaponstatus[HUNTS_SHELL1+invoker.weaponstatus[HUNTS_TUBE]]);
				invoker.weaponstatus[HUNTS_TUBE]--;
			}
		}
		SHTG C 4 offset(0,40) A_StartSound("weapons/huntreload",8);
		loop;
	unloadloopend:
		SHTG C 6 offset(1,41);
		SHTG C 3 offset(1,42){
			For(int i=0;i<invoker.handshell.Size();i++)A_GiveInventory(invoker.Shells[invoker.handshell[i]], 1);
			A_SetTics(8);
			invoker.HandShell.Clear();
			A_StartSound("weapons/pocket",9);
		}
		SHTG C 0 EmptyHand(careful:true);
		SHTG C 6 A_Jumpif(!pressingunload(),"reloadend");
		goto unloadloop;
	spawn:
		HUNT ABCDEFG -1 nodelay{
			int ssh=invoker.weaponstatus[SHOTS_SIDESADDLE];
			if(ssh>=11)frame=0;
			else if(ssh>=9)frame=1;
			else if(ssh>=7)frame=2;
			else if(ssh>=5)frame=3;
			else if(ssh>=3)frame=4;
			else if(ssh>=1)frame=5;
			else frame=6;
		}
	}
	override void InitializeWepStats(bool idfa){
		For(int i=weaponstatus[SHOTS_SIDESADDLE];i<12;i++)weaponstatus[HUNTS_SSHELL1+i]=shelltype;
		if(weaponstatus[HUNTS_CHAMBER]<2)weaponstatus[HUNTS_SHELL1]=shelltype;
		For(int i=weaponstatus[HUNTS_TUBE]+1;i<weaponstatus[HUNTS_TUBESIZE]+1;i++)weaponstatus[HUNTS_SHELL1+i]=shelltype;
		weaponstatus[HUNTS_CHAMBER]=2;
		if(!idfa){
			weaponstatus[HUNTS_TUBESIZE]=7;
			weaponstatus[HUNTS_CHOKE]=1;
			/*if(CheckBulLib() && mrnsha_huntershells)
			{
				CVar AmmoSpawns[3];
				For(int i=1;i<4;i++)AmmoSpawns[i-1] = CVar.GetCVar("hdblib_enableammo_"..i);
				
				Array<int> Types;
				For(int i=0;i<20;i++)Types.Push(0);
				if(AmmoSpawns[1 / 32].GetInt() & (1 << (1 % 32)))For(int i=0;i<6;i++)Types.Push(1);//Slug
				if(AmmoSpawns[9 / 32].GetInt() & (1 << (9 % 32)))For(int i=0;i<2;i++)Types.Push(2);//Explosive
				if(AmmoSpawns[8 / 32].GetInt() & (1 << (8 % 32)))Types.Push(3);//Less lethal
				
				For(int i=0;i<weaponstatus[HUNTS_TUBESIZE];i++)weaponstatus[HUNTS_SHELL1+i]=Types[Random(0, Types.Size()-1)];
				int Type = Types[Random(0, Types.Size()-1)];
				For(int i=0;i<12;i++){weaponstatus[HUNTS_SSHELL1+i]=Type;if(i%4==0)Type = Types[Random(0, Types.Size()-1)];}
			}*/
		}
		weaponstatus[HUNTS_TUBE]=weaponstatus[HUNTS_TUBESIZE];
		weaponstatus[SHOTS_SIDESADDLE]=12;
		HandShell.Clear();
	}
	override void loadoutconfigure(string input){
		if(Owner && Owner.FindInventory("Hunter"))
		{
			Let inv = HDWeapon(Owner.FindInventory("Hunter"));
			weaponstatus[HUNTS_CHAMBER]=inv.weaponstatus[HUNTS_CHAMBER];
			weaponstatus[HUNTS_TUBESIZE]=inv.weaponstatus[HUNTS_TUBESIZE];
			weaponstatus[HUNTS_CHOKE]=inv.weaponstatus[HUNTS_CHOKE];
			weaponstatus[SHOTS_SIDESADDLE]=inv.weaponstatus[SHOTS_SIDESADDLE];
			weaponstatus[HUNTS_TUBE]=inv.weaponstatus[HUNTS_TUBE];
			weaponstatus[0]=inv.WeaponStatus[0];
			inv.Destroy();
			Return;
		}
		int type=getloadoutvar(input, "type",1);
		if(type>=0){
			switch(type){
			case 0:
				weaponstatus[0]|=HUNTF_EXPORT;
				weaponstatus[0]&=~HUNTF_CANFULLAUTO;
				break;
			case 1:
				weaponstatus[0]&=~HUNTF_EXPORT;
				weaponstatus[0]&=~HUNTF_CANFULLAUTO;
				break;
			case 2:
				weaponstatus[0]&=~HUNTF_EXPORT;
				weaponstatus[0]|=HUNTF_CANFULLAUTO;
				break;
			default:
				break;
			}
		}
		if(type<0||type>2)type=1;
		int firemode=getloadoutvar(input,"firemode",1);
		if(firemode>=0)weaponstatus[HUNTS_FIREMODE]=clamp(firemode,0,type);
		int choke=min(getloadoutvar(input,"choke",1),7);
		if(choke>=0)weaponstatus[HUNTS_CHOKE]=choke;

		int tubesize=((weaponstatus[0]&HUNTF_EXPORT)?5:7);
		if(weaponstatus[HUNTS_TUBE]>tubesize)weaponstatus[HUNTS_TUBE]=tubesize;
		weaponstatus[HUNTS_TUBESIZE]=tubesize;
	}
	
	override void DetachFromOwner(){
		if(handshell.Size()>0){
			For(int i=0;i<HandShell.Size();i++)
			{
				if(owner)owner.A_DropItem(Shells[HandShell[i]], 1);
				else A_DropItem(Shells[HandShell[i]], 1);
			}
			HandShell.Clear();
		}
		super.detachfromowner();
	}
		
	/*Override Void Tick()
	{
		Super.Tick();
		if(Owner)Return;
		HDWeapon a = HDWeapon(Spawn("Hunter", pos));
		if(a)
		{
			a.Angle = Angle;
			a.Pitch = Pitch;
			a.Vel = Vel;
			For(int i=0;i<HDWEP_STATUSSLOTS;i++)a.weaponstatus[i]=weaponstatus[i];
			Destroy();
		}
	}*/
}

enum NSHhunterstatus{
	HUNTS_SAFETY=8,
	
	HUNTS_SHELL1=9,//Chamber
	//Mag
	HUNTS_SHELL2=10,
	HUNTS_SHELL3=11,
	HUNTS_SHELL4=12,
	HUNTS_SHELL5=13,
	HUNTS_SHELL6=14,
	HUNTS_SHELL7=15,
	HUNTS_SHELL8=16,
	//Side saddles
	HUNTS_SSHELL1=17,
	HUNTS_SSHELL2=18,
	HUNTS_SSHELL3=19,
	HUNTS_SSHELL4=20,
	HUNTS_SSHELL5=21,
	HUNTS_SSHELL6=22,
	HUNTS_SSHELL7=23,
	HUNTS_SSHELL8=24,
	HUNTS_SSHELL9=25,
	HUNTS_SSHELL10=26,
	HUNTS_SSHELL11=27,
	HUNTS_SSHELL12=28,
};

/*
	HUNTS_SHELL1:
	0 - Shell
	1 - Slug
	2 - Explosive slug
	3 - Less Lethal
*/