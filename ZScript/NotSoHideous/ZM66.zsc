// ------------------------------------------------------------
// ZM66 4.26mm UAC Standard Automatic Rifle
// ------------------------------------------------------------
class NSHZM66AssaultRifle:ZM66AssaultRifle{// Replaces ZM66AssaultRifle{
	override string gethelptext(){
		bool gl=!(weaponstatus[0]&ZM66F_NOLAUNCHER);
		bool glmode=gl&&(weaponstatus[0]&ZM66F_GLMODE);
		
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		
		return
		LWPHELP_FIRESHOOT
		..(gl?(LWPHELP_ALTFIRE..(glmode?(StringTable.Localize("$ZMWH_ALTFIRE1")):(StringTable.Localize("$ZMWH_ALTFIRE2")))):"")
		..LWPHELP_RELOAD..StringTable.Localize("$ZMWH_RELOAD")
		..(gl?(LWPHELP_ALTRELOAD..StringTable.Localize("$ZMWH_ALTRELOAD")):"")
		..(glmode?(LWPHELP_FIREMODE.."+"..LWPHELP_UPDOWN..StringTable.Localize("$ZMWH_FMODPUD"))
			:(
			((weaponstatus[0]&ZM66F_NOFIRESELECT)?"":LWPHELP_FIREMODE..StringTable.Localize("$ZMWH_FMODE"))
			..LWPHELP_ZOOM.."+"..LWPHELP_FIREMODE.."+"..LWPHELP_UPDOWN..StringTable.Localize("$ZMWH_ZPFMOD")))
		..LWPHELP_MAGMANAGER
		..LWPHELP_UNLOAD..StringTable.Localize("$ZMWH_UNLOAD")..(glmode?StringTable.Localize("$ZMWH_GL"):StringTable.Localize("$ZMWH_MAG"))
		..LWPHELP_ZOOM.."+"..LWPHELP_RELOAD..StringTable.Localize("$LWPHELP_CHECKMAG")
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int scaledyoffset=47;
		if(hdw.weaponstatus[0]&ZM66F_GLMODE)sb.drawgrenadeladder(hdw.airburst,bob);
		else{
			double dotoff=max(abs(bob.x),abs(bob.y));
			if(dotoff<40){
				string whichdot=sb.ChooseReflexReticle(hdw.weaponstatus[ZM66S_DOT]);
				sb.drawimage(
					whichdot,(0,0)+bob*1.1,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.01,
					col:0xFF000000|sb.crosshaircolor.GetInt()
				);
			}
			int Light = Owner.Cursector.LightLevel * 1.75;
			if(owner.player.fixedlightlevel==1)Light = 255;
			sb.drawimage(
				"z66site",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);
			if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
			sb.drawimage(
				"z66site",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
			col:color(254-Light, 0,0,0));
			if(scopeview)ShowZMScope(hdw.weaponstatus[ZM66S_ZOOM],hpc,sb,scaledyoffset,bob);
		}
	}
	/*override void SetReflexReticle(int which){weaponstatus[ZM66S_DOT]=which;}
	override double weaponbulk(){
		double blx=90;
		if(!(weaponstatus[0]&ZM66F_NOLAUNCHER)){
			blx+=25;
			if(weaponstatus[0]&ZM66F_GRENADELOADED)blx+=ENC_ROCKETLOADED;
		}
		int mgg=weaponstatus[ZM66S_MAG];
		return blx+(mgg<0?0:(ENC_426MAG_LOADED+mgg*ENC_426_LOADED));
	}
	override void failedpickupunload(){
		failedpickupunloadmag(ZM66S_MAG,"HD4mMag");
	}

	action bool A_CheckCookoff(){
		if(
			invoker.weaponstatus[ZM66S_HEAT]>HDCONST_ZM66COOKOFF
			&&!(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN)
			&&invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER
		){
			setweaponstate("cookoff");
			return true;
		}
		return false;
	}
	action bool brokenround(){
		if(!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBERBROKEN)){
			int hht=invoker.weaponstatus[ZM66S_HEAT];
			if(hht>240)invoker.weaponstatus[ZM66S_BORESTRETCHED]++;
			hht*=hht;hht>>=10;
			int rnd=
				(invoker.owner?1:10)
				+max(invoker.weaponstatus[ZM66S_AUTO],hht)
				+invoker.weaponstatus[ZM66S_BORESTRETCHED]
				+(invoker.weaponstatus[ZM66S_MAG]>100?10:0);
			if(random(0,2000)<rnd){
				invoker.weaponstatus[ZM66S_FLAGS]|=ZM66F_CHAMBERBROKEN;
			}
		}return invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBERBROKEN;
	}*/
	states{
	ready:
		RIFG A 1{
			if(A_CheckCookoff())return;
			if(pressingzoom())A_ZoomAdjust(ZM66S_ZOOM,16,70);
			else A_WeaponReady(WRF_ALL);
			if(invoker.weaponstatus[ZM66S_AUTO]>2)invoker.weaponstatus[ZM66S_AUTO]=2;
		}
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		goto readyend;
	firemode:
		RIFG A 0 A_JumpIf(invoker.weaponstatus[0]&ZM66F_GLMODE,"abadjust");
		RIFG A 1{
			if(invoker.weaponstatus[0]&ZM66F_NOFIRESELECT){
				invoker.weaponstatus[ZM66S_AUTO]=0;
				return;
			}
			if(invoker.weaponstatus[ZM66S_AUTO]>=2)invoker.weaponstatus[ZM66S_AUTO]=0;
			else invoker.weaponstatus[ZM66S_AUTO]++;
			A_WeaponReady(WRF_NONE);
		}goto nope;


	select0:
		RIFG A 0{
			A_CheckDefaultReflexReticle(ZM66S_DOT);
			invoker.weaponstatus[0]&=~ZM66F_GLMODE;
			if(invoker.weaponstatus[0]&ZM66F_NOLAUNCHER){
				invoker.weaponstatus[0]&=~ZM66F_GRENADELOADED;
				setweaponstate("select0small");
			}
		}goto select0big;
	deselect0:
		RIFG A 0{
			if(
				invoker.weaponstatus[ZM66S_HEAT]>HDCONST_ZM66COOKOFF
				&&!(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN)
				&&(
					invoker.weaponstatus[ZM66S_MAG]||
					invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER
				)
			){
				DropInventory(invoker);
				return;
			}
			if(invoker.weaponstatus[0]&ZM66F_NOLAUNCHER)setweaponstate("deselect0small");
		}goto deselect0big;
	flash:
		RIFF A 1 bright{
			A_Light1();
			HDFlashAlpha(-16);
			A_StartSound("weapons/rifle",CHAN_WEAPON);
			A_ZoomRecoil(max(0.95,1.-0.05*min(invoker.weaponstatus[ZM66S_AUTO],3)));

			//shoot the bullet
			//copypaste any changes to spawnshoot as well!
			double brnd=max(invoker.weaponstatus[ZM66S_HEAT],invoker.weaponstatus[ZM66S_BORESTRETCHED])*0.01;
			HDBulletActor.FireBullet(self,"HDB_426",
				spread:brnd>1.2?brnd:0
			);

			A_MuzzleClimb(
				-frandom(0.1,0.1),-frandom(0,0.1),
				-0.2,-frandom(0.3,0.4),
				-frandom(0.4,1.4),-frandom(1.3,2.6)
			);

			invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_CHAMBER;
			invoker.weaponstatus[ZM66S_HEAT]+=random(3,5);
			A_AlertMonsters();
		}
		goto lightdone;
	RecoilLay:
		TNT1 A 1 {A_OverlayScale(PSP_WEAPON, 1, 1);A_OverlayRotate(PSP_WEAPON, 0);
			
			Player.GetPSprite(PSP_FLASH).X = Player.GetPSprite(PSP_WEAPON).X;
			Player.GetPSprite(PSP_FLASH).Y = Player.GetPSprite(PSP_WEAPON).Y-32;
			Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;
			Player.GetPSprite(PSP_FLASH).Scale = Player.GetPSprite(PSP_WEAPON).Scale;
			
			if(invoker.weaponstatus[ZM66S_HEAT]>HDCONST_ZM66COOKOFF)A_SetTics(0);}
		TNT1 A 1
			{
				Vector2 Pivot = (FRandom(0, 1), FRandom(0, 1));
				if(GunBraced())Pivot = (FRandom(.3, .7), FRandom(.4, .6));
				A_OverlayPivot(PSP_WEAPON, Pivot.X, Pivot.Y);
				Float Ang = FRandomPick(FRandom(-1.5, -1), FRandom(1, 1.5));
				if(GunBraced())Ang *= .25;
				A_OverlayScale(PSP_WEAPON, 1.05, 1.1);
				A_OverlayRotate(PSP_WEAPON, Ang);
				
				Player.GetPSprite(PSP_FLASH).Pivot = Player.GetPSprite(PSP_WEAPON).Pivot;
				Player.GetPSprite(PSP_FLASH).bInterpolate = false;
				Player.GetPSprite(PSP_FLASH).Scale = Player.GetPSprite(PSP_WEAPON).Scale;
				Player.GetPSprite(PSP_FLASH).X = Player.GetPSprite(PSP_WEAPON).X;
				Player.GetPSprite(PSP_FLASH).Y = Player.GetPSprite(PSP_WEAPON).Y-32;
				Player.GetPSprite(PSP_FLASH).Rotation = Player.GetPSprite(PSP_WEAPON).Rotation;
			}
		TNT1 A 2
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;

	fire:
		RIFG A 2{
			if(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_GLMODE)setweaponstate("firefrag");
			else if(invoker.weaponstatus[ZM66S_AUTO]>0)A_SetTics(3);
		}goto shootgun;
	hold:
		RIFG A 0 A_JumpIf(invoker.weaponstatus[0]&ZM66F_GLMODE,"FireFrag");
		RIFG A 0 A_JumpIf(invoker.weaponstatus[0]&ZM66F_NOFIRESELECT,"nope");
		RIFG A 0 A_JumpIf(invoker.weaponstatus[ZM66S_AUTO]>4,"nope");
		RIFG A 0 A_JumpIf(invoker.weaponstatus[ZM66S_AUTO],"shootgun");
	althold:
		---- A 1{
			if(!A_CheckCookoff())A_WeaponReady(WRF_NOFIRE);
		}
		---- A 0 A_Refire();
		goto ready;
	jam:
		RIFG B 1 offset(-1,36){
			A_StartSound("weapons/riflejam",CHAN_WEAPON,CHANF_OVERLAP);
			invoker.weaponstatus[0]|=ZM66F_CHAMBERBROKEN;
			invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_CHAMBER;
		}
		RIFG B 1 offset(1,30) A_StartSound("weapons/riflejam",CHAN_WEAPON,CHANF_OVERLAP);
		goto nope;

	shootgun:
		RIFG A 1{
			if(
				//can neither shoot nor chamber
				invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN
				||(
					!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER)
					&&invoker.weaponstatus[ZM66S_MAG]<1
				)
			){
				setweaponstate("nope");
			}else if(!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER)){
				//no shot but can chamber
				setweaponstate("chamber_manual");
			}else{
				A_GunFlash();
				A_Overlay(PSP_FLASH+1, "RecoilLay");
				A_WeaponReady(WRF_NONE);
				if(invoker.weaponstatus[ZM66S_AUTO]>=2)invoker.weaponstatus[ZM66S_AUTO]++;
			}
			A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		}
	chamber:
		RIFG B 0 offset(0,32){
			if(invoker.weaponstatus[ZM66S_MAG]<1){
				setweaponstate("nope");
				return;
			}
			if(invoker.weaponstatus[ZM66S_MAG]%100>0){
				if(invoker.weaponstatus[ZM66S_MAG]==51)invoker.weaponstatus[ZM66S_MAG]=50;
				invoker.weaponstatus[ZM66S_MAG]--;
				invoker.weaponstatus[ZM66S_FLAGS]|=ZM66F_CHAMBER;
			}else{
				invoker.weaponstatus[ZM66S_MAG]=min(invoker.weaponstatus[ZM66S_MAG],0);
				A_StartSound("weapons/rifchamber",CHAN_WEAPON,CHANF_OVERLAP);
			}
			if(brokenround()){
				setweaponstate("jam");
				return;
			}
			A_WeaponReady(WRF_NOFIRE); //not WRF_NONE: switch to drop during cookoff
		}
		RIFG B 0 A_CheckCookoff();
		RIFG B 0 A_JumpIf(invoker.weaponstatus[ZM66S_AUTO]<1,"nope");
		RIFG B 0 A_JumpIf(invoker.weaponstatus[ZM66S_AUTO]>4,"nope");
		RIFG B 2 A_JumpIf(invoker.weaponstatus[ZM66S_AUTO]>1,1);
		RIFG B 0 A_Refire();
		goto ready;

	cookoffaltfirelayer:
		TNT1 AAA 1{
			if(JustPressed(BT_ALTFIRE)){
				invoker.weaponstatus[0]^=ZM66F_GLMODE;
				A_SetTics(10);
			}else if(JustPressed(BT_ATTACK)&&invoker.weaponstatus[0]&ZM66F_GLMODE)A_Overlay(11,"nadeflash");
		}stop;
	cookoff:
		RIFG A 0{
			A_ClearRefire();
			if(
				(invoker.weaponstatus[ZM66S_MAG]>=0)	//something to detach
				&&(justpressed(BT_RELOAD)||justpressed(BT_UNLOAD))	//trying to detach
			){
				A_StartSound("weapons/rifleclick2",CHAN_WEAPON,CHANF_OVERLAP);
				A_StartSound("weapons/rifleunload",CHAN_WEAPON,CHANF_OVERLAP);
				HDMagAmmo.SpawnMag(self,"HD4mMag",invoker.weaponstatus[ZM66S_MAG]);
				invoker.weaponstatus[ZM66S_MAG]=-1;
			}else if(!(invoker.weaponstatus[0]&ZM66F_NOLAUNCHER))A_Overlay(10,"cookoffaltfirelayer");
			setweaponstate("shootgun");
		}


	user3:
		RIFG A 0 A_MagManager("HD4mMag");
		goto ready;

	user4:
	unload:
		RIFG A 0{
			invoker.weaponstatus[ZM66S_FLAGS]|=ZM66F_UNLOADONLY;
			if(
				invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_GLMODE
			){
				setweaponstate("unloadgrenade");
			}else if(
				invoker.weaponstatus[ZM66S_MAG]>=0
			){
				setweaponstate("unloadmag");
			}else if(
				invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER
				||invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBERBROKEN
			){
				setweaponstate("unloadchamber");
			}else{
				setweaponstate("unloadmag");
			}
		}
	reload:
		RIFG A 0{
			if(PressingZoom())SetWeaponState("CheckMag");
			else
			{
			invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_UNLOADONLY;
			if(	//full mag, no jam, not unload-only - why hit reload at all?
				!(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN)
				&&invoker.weaponstatus[ZM66S_MAG]%100>=50
				&&!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_UNLOADONLY)
			){
				setweaponstate("nope");
			}else if(	//if jammed, treat as unloading
				invoker.weaponstatus[ZM66S_MAG]<0
				&&invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN
			){
				invoker.weaponstatus[ZM66S_FLAGS]|=ZM66F_UNLOADONLY;
				setweaponstate("unloadchamber");
			}else if(!HDMagAmmo.NothingLoaded(self,"HD4mMag")){
				setweaponstate("unloadmag");
			}
			}
		}goto nope;
	unloadmag:
		RIFG A 1 offset(0,33);
		RIFG A 1 offset(-3,34);
		RIFG A 1 offset(-8,37);
		RIFG B 2 offset(-11,39){
			if(	//no mag, skip unload
				invoker.weaponstatus[ZM66S_MAG]<0
			){
				setweaponstate("magout");
			}
			if(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN)
				invoker.weaponstatus[ZM66S_FLAGS]|=ZM66F_UNLOADONLY;
			A_MuzzleClimb(-0.3,-0.3);
			A_StartSound("weapons/rifleclick2",CHAN_WEAPON,CHANF_OVERLAP);
		}
		RIFG C 4 offset(-12,40){
			A_MuzzleClimb(-0.3,-0.3);
			A_StartSound("weapons/rifleunload",CHAN_WEAPON);
		}
		RIFG C 20 offset(-14,44){
			int inmag=invoker.weaponstatus[ZM66S_MAG];
			if(inmag>51)inmag=min(50,inmag%100);
			invoker.weaponstatus[ZM66S_MAG]=-1;
			if(
				!PressingUnload()&&!PressingReload()
				||A_JumpIfInventory("HD4mMag",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD4mMag",inmag);
				A_SetTics(1);
			}else{
				HDMagAmmo.GiveMag(self,"HD4mMag",inmag);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				if(inmag<51)A_Log(StringTable.Localize("$426MAGMSG"),true);
			}
		}
	magout:
		RIFG C 0{
			if(
				invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_UNLOADONLY
				||!countinv("HD4mMag")
			)setweaponstate("reloadend");
		} //fallthrough to loadmag
	loadmag:
		---- C 12 offset(-15,44){
			let zmag=HD4mMag(findinventory("HD4mMag"));
			if(!zmag){setweaponstate("reloadend");return;}
			A_StartSound("weapons/pocket",CHAN_WEAPON);
			if(zmag.DirtyMagsOnly())invoker.weaponstatus[0]|=ZM66F_LOADINGDIRTY;
			else{
				invoker.weaponstatus[0]&=~ZM66F_LOADINGDIRTY;
				A_SetTics(10);
			}
		}
		---- A 2 offset(-15,44) A_JumpIf(invoker.weaponstatus[0]&ZM66F_LOADINGDIRTY,"loadmagdirty");
	loadmagclean:
		RIFG C 8 offset(-15,45)A_StartSound("weapons/rifleload",CHAN_WEAPON);
		RIFG C 1 offset(-14,44){
			let zmag=HD4mMag(findinventory("HD4mMag"));
			if(!zmag){setweaponstate("reloadend");return;}
			if(zmag.DirtyMagsOnly()){
				setweaponstate("loadmagdirty");
				return;
			}
			invoker.weaponstatus[ZM66S_MAG]=zmag.TakeMag(true);
			A_StartSound("weapons/rifleclick2",CHAN_WEAPON);
		}goto reloadend;
	loadmagdirty:
		RIFG C 0{
			if(PressingReload())invoker.weaponstatus[0]|=ZM66F_STILLPRESSINGRELOAD;
			else invoker.weaponstatus[0]&=~ZM66F_STILLPRESSINGRELOAD;
		}
		RIFG C 3 offset(-15,45)A_StartSound("weapons/rifleload",CHAN_WEAPON);
		RIFG C 1 offset(-15,42)A_WeaponMessage(StringTable.Localize("$ZM426MAGMSG"),70);
		RIFG CCCBBBBAAAA 1 offset(-15,41){
			bool prr=PressingReload();
			if(
				prr
				&&!(invoker.weaponstatus[0]&ZM66F_STILLPRESSINGRELOAD)
			){
				setweaponstate("reallyloadmagdirty");
			}
			else if(!PressingReload())invoker.weaponstatus[0]&=~ZM66F_STILLPRESSINGRELOAD;
		}
		goto nope;
	reallyloadmagdirty:
		RIFG D 1 offset(-14,44)A_StartSound("weapons/rifleclick2",CHAN_WEAPON);
		RIFG D 8 offset(-18,50){
			let zmag=HD4mMag(findinventory("HD4mMag"));
			if(!zmag){setweaponstate("reloadend");return;}
			invoker.weaponstatus[ZM66S_MAG]=zmag.TakeMag(true)+100;
			A_MuzzleClimb(
				-frandom(0.4,0.6),frandom(2.,3.)
				-frandom(0.2,0.3),frandom(1.,1.6)
			);
			A_StartSound("weapons/rifleclick2",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("weapons/smack",CHAN_WEAPON,CHANF_OVERLAP);

			string realmessage=StringTable.Localize("$426MAGMSG");
			realmessage=realmessage.left(random(13,20));
			realmessage.appendformat(StringTable.Localize("$ZMRELERROR")..random(0,9999)..StringTable.Localize("$ZMNOCARRIER"));
			A_WeaponMessage(realmessage,70);
		}
		RIFG C 4 offset(-17,49);
		goto chamber_manual;

	reloadend:
		RIFG B 2 offset(-11,39);
		RIFG A 1 offset(-8,37) A_MuzzleClimb(frandom(0.2,-2.4),frandom(0.2,-1.4));
		RIFG A 0 A_CheckCookoff();
		RIFG A 1 offset(-3,34);
		goto chamber_manual;

	chamber_manual:
		RIFG A 0 A_JumpIf(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER,"nope");
		RIFG A 3 offset(-1,36)A_WeaponBusy();
		RIFG B 4 offset(-3,42){
			if(!invoker.weaponstatus[ZM66S_MAG]%100)invoker.weaponstatus[ZM66S_MAG]=0;
			if(
				!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER)
				&& !(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER)
				&& invoker.weaponstatus[ZM66S_MAG]%100>0
			){
				A_StartSound("weapons/rifleclick",CHAN_WEAPON);
				if(invoker.weaponstatus[ZM66S_MAG]==51)invoker.weaponstatus[ZM66S_MAG]=49;
				else invoker.weaponstatus[ZM66S_MAG]--;
				invoker.weaponstatus[ZM66S_FLAGS]|=ZM66F_CHAMBER;
				brokenround();
			}else setweaponstate("nope");
		}
		RIFG A 2 offset(-1,36);
		RIFG A 0 offset(0,34);
		goto nope;


	unloadchamber:
		RIFG A 1 offset(-3,34);
		RIFG C 1 offset(-9,39);
		RIFG D 3 offset(-19,44) A_MuzzleClimb(frandom(-0.4,0.4),frandom(-0.4,0.4));
		RIFG C 2 offset(-16,42){
			A_MuzzleClimb(frandom(-0.4,0.4),frandom(-0.4,0.4));
			if(
				invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_CHAMBER
				&&!(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN)
			){
				A_SpawnItemEx("ZM66DroppedRound",0,0,20,
					random(4,7),random(-2,2),random(-2,1),0,
					SXF_NOCHECKPOSITION
				);
				invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_CHAMBER;
				A_StartSound("weapons/rifleclick2",CHAN_WEAPON,CHANF_OVERLAP);
			}else if(!random(0,4)){
				invoker.weaponstatus[0]&=~ZM66F_CHAMBERBROKEN;
				invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_CHAMBER;
				A_StartSound("weapons/rifleclick",CHAN_WEAPON,CHANF_OVERLAP);
				for(int i=0;i<5;i++)A_SpawnItemEx("FourMilChunk",0,0,20,
					random(4,7),random(-2,2),random(-2,1),0,SXF_NOCHECKPOSITION
				);
				if(!random(0,5))A_SpawnItemEx("HDSmokeChunk",12,0,gunheight()-10,4,frandom(-2,2),frandom(2,4));
			}else if(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN){
				A_StartSound("weapons/smack",CHAN_WEAPON,CHANF_OVERLAP);
			}
		}goto reloadend;
	
	CheckMag:
		RIFG C 2 A_Jumpif(!PressingReload(), "Nope");
		---- C 0 {if(invoker.weaponstatus[ZM66S_MAG]>0)A_Overlay(102, "Dumb");if(Invoker.weaponstatus[0]&ZM66F_CHAMBER)A_Overlay(103, "Dumb2");}
		Loop;
	Dumb:
		STUP A 0 A_OverLayOffset(102,29,24);
		STUP A 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>4,1);
		Stop;
		STUP B 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>10,1);
		Stop;
		STUP C 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>13,1);
		Stop;
		STUP D 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>16,1);
		Stop;
		STUP E 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>19,1);
		Stop;
		STUP F 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>22,1);
		Stop;
		STUP G 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>25,1);
		Stop;
		STUP H 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>28,1);
		Stop;
		STUP I 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>31,1);
		Stop;
		STUP J 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>34,1);
		Stop;
		STUP K 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>37,1);
		Stop;
		STUP L 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>40,1);
		Stop;
		STUP M 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>43,1);
		Stop;
		STUP N 5 A_JumpIf(invoker.weaponstatus[ZM66S_MAG]>46,1);
		Stop;
		STUP O 5;
		Stop;
	Dumb2:
		STUP A 0 A_OverLayOffset(103, 32, 22);
		STUP Q 5;
		Stop;

	firefrag:
		RIFG B 2{
			if(!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_GRENADELOADED)){
				setweaponstate("nope");
				return;
			}
			A_FireHDGL();
			invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_GRENADELOADED;
			A_StartSound("weapons/grenadeshot",CHAN_WEAPON);
		}
		RIFG B 3{
			A_ZoomRecoil(0.95);
			A_MuzzleClimb(
				0,0,0,0,
				-1.2,-3.,
				-1.,-2.8
			);
		}
		goto nope;


	altfire:
		RIFG A 1 offset(0,34){
			if(invoker.weaponstatus[0]&ZM66F_NOLAUNCHER)return;
			invoker.weaponstatus[0]^=ZM66F_GLMODE;
			invoker.airburst=0;
			A_SetCrosshair(21);
			A_SetHelpText();
		}goto nope;


	altreload:
		RIFG A 0{
			invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_UNLOADONLY;
			if(
				!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_NOLAUNCHER)
				&&!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_GRENADELOADED)
				&&countinv("HDRocketAmmo")
			)setweaponstate("unloadgrenade");
		}goto nope;
	unloadgrenade:
		RIFG B 0{
			A_SetCrosshair(21);
			A_MuzzleClimb(-0.3,-0.3);
		}
		RIFG C 2 offset(0,34);
		RIFG C 1 offset(4,38){
			A_MuzzleClimb(-0.3,-0.3);
		}
		RIFG D 2 offset(8,48){
			A_StartSound("weapons/grenopen",CHAN_WEAPon,CHANF_OVERLAP);
			A_MuzzleClimb(-0.3,-0.3);
			if(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_GRENADELOADED)A_StartSound("weapons/grenreload",CHAN_WEAPON);
		}
		RIFG D 10 offset(10,49){
			if(!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_GRENADELOADED)){
				if(!(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_UNLOADONLY))A_SetTics(3);
				return;
			}
			invoker.weaponstatus[ZM66S_FLAGS]&=~ZM66F_GRENADELOADED;
			if(
				!PressingUnload()
				||A_JumpIfInventory("HDRocketAmmo",0,"null")
			){
				A_SpawnItemEx("HDRocketAmmo",
					cos(pitch)*10,0,gunheight()-2-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else{
				A_StartSound("weapons/pocket",CHAN_WEAPON,CHANF_OVERLAP);
				A_GiveInventory("HDRocketAmmo",1);
				A_MuzzleClimb(frandom(0.8,-0.2),frandom(0.4,-0.2));
			}
		}
		RIFG C 0 A_JumpIf(invoker.weaponstatus[ZM66S_FLAGS]&ZM66F_UNLOADONLY,"greloadend");
	loadgrenade:
		RIFG D 4 offset(10,50) A_StartSound("weapons/pocket",CHAN_WEAPON,CHANF_OVERLAP);
		RIFG DDD 8 offset(10,50) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		RIFG C 18 offset(8,50){
			if(!countinv("HDRocketAmmo"))return;
			A_TakeInventory("HDRocketAmmo",1,TIF_NOTAKEINFINITE);
			invoker.weaponstatus[ZM66S_FLAGS]|=ZM66F_GRENADELOADED;
			A_StartSound("weapons/grenreload",CHAN_WEAPON);
		}
	greloadend:
		RIFG C 4 offset(4,44) A_StartSound("weapons/grenopen",CHAN_WEAPON);
		RIFG B 1 offset(0,40);
		RIFG A 1 offset(0,34) A_MuzzleClimb(frandom(-2.4,0.2),frandom(-1.4,0.2));
		goto nope;

	spawn:
		RIFL DCBA 0;
		RIGL DCBA 0;
		RIFS DCBA 0;
		RIGS DA 0;
		---- A 0{
			//don't jam just because
			if(
				!(invoker.weaponstatus[0]&ZM66F_CHAMBER)
				&&!(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN)
				&&invoker.weaponstatus[ZM66S_MAG]>0
				&&invoker.weaponstatus[ZM66S_MAG]<51
			){
				invoker.weaponstatus[ZM66S_MAG]--;
				invoker.weaponstatus[0]|=ZM66F_CHAMBER;
				brokenround();
			}
		}
	spawn2:
		---- A -1{
			//set sprite
			if(invoker.weaponstatus[0]&ZM66F_NOLAUNCHER){
				if(invoker.weaponstatus[0]&ZM66F_NOFIRESELECT)
					sprite=getspriteindex("RIFSA0");
				else sprite=getspriteindex("RIFLA0");
			}else{
				if(invoker.weaponstatus[0]&ZM66F_NOFIRESELECT)
					sprite=getspriteindex("RIGSA0");
				else sprite=getspriteindex("RIGLA0");
			}

			//set to no-mag frame
			if(invoker.weaponstatus[ZM66S_MAG]<0){
				frame=3;
			}

			if(
				invoker.weaponstatus[0]&ZM66F_CHAMBER
				&&!(invoker.weaponstatus[0]&ZM66F_CHAMBERBROKEN)
				&&invoker.weaponstatus[ZM66S_HEAT]>HDCONST_ZM66COOKOFF
			)setstatelabel("spawnshoot");
		}
	spawnshoot:
		#### C 1 bright light("SHOT"){
			if(invoker.weaponstatus[0]&ZM66F_NOLAUNCHER){
				sprite=getspriteindex("RIFLA0");
			}else sprite=getspriteindex("RIGLA0");

			//shoot the bullet
			//copy any changes to flash as well!
			double brnd=invoker.weaponstatus[ZM66S_HEAT]*0.01;
			let bbb=HDBulletActor.FireBullet(self,"HDB_426",
				spread:brnd>1.2?invoker.weaponstatus[ZM66S_HEAT]*0.1:0
			);

			//if overlapping owner, treat owner as shooter
			let targ=invoker.target;
			if(
				targ
				&&abs(targ.pos.x-invoker.pos.x)<=targ.radius
				&&abs(targ.pos.y-invoker.pos.y)<=targ.radius
			){
				bbb.target=targ;
			}
			A_ChangeVelocity(
				frandom(-0.4,0.1)*cos(pitch),
				frandom(-0.1,0.08),
				sin(pitch)+frandom(-1.,1.),CVF_RELATIVE
			);
			A_StartSound("weapons/rifle",CHAN_VOICE);
			invoker.weaponstatus[ZM66S_HEAT]+=random(3,5);
			angle+=frandom(2,-7);
			pitch+=frandom(-4,4);
		}
		#### B 0{
//			if(invoker.weaponstatus[ZM66S_AUTO]>1)A_SetTics(0);
			invoker.weaponstatus[0]&=~(ZM66F_CHAMBER|ZM66F_CHAMBERBROKEN);
			if(invoker.weaponstatus[ZM66S_MAG]%100>0){
				invoker.weaponstatus[ZM66S_MAG]--;
				invoker.weaponstatus[0]|=ZM66F_CHAMBER;
				brokenround();
			}
		}goto spawn2;
	}

	override inventory CreateTossable(int amt){
		let owner=self.owner;
		let zzz=zm66assaultrifle(super.createtossable());
		if(!zzz)return null;
		zzz.target=owner;
		return zzz;
	}

	override void InitializeWepStats(bool idfa){
		if(!(weaponstatus[0]&ZM66F_NOLAUNCHER))weaponstatus[0]|=ZM66F_GRENADELOADED;
		weaponstatus[ZM66S_MAG]=51;
		if(!idfa && !owner){
			weaponstatus[ZM66S_ZOOM]=30;
			weaponstatus[ZM66S_AUTO]=0;
			weaponstatus[ZM66S_HEAT]=0;
		}
		if(idfa)weaponstatus[0]&=~ZM66F_CHAMBERBROKEN;
	}
	
	override void loadoutconfigure(string input){
		if(Owner && Owner.FindInventory("ZM66AssaultRifle"))
		{
			Let inv = HDWeapon(Owner.FindInventory("ZM66AssaultRifle"));
			weaponstatus[ZM66S_MAG]=inv.weaponstatus[ZM66S_MAG];
			weaponstatus[ZM66S_AUTO]=inv.weaponstatus[ZM66S_AUTO];
			weaponstatus[ZM66S_ZOOM]=inv.weaponstatus[ZM66S_ZOOM];
			weaponstatus[ZM66S_HEAT]=inv.weaponstatus[ZM66S_HEAT];
			weaponstatus[ZM66S_AIRBURST]=inv.weaponstatus[ZM66S_AIRBURST];
			weaponstatus[ZM66S_BORESTRETCHED]=inv.weaponstatus[ZM66S_BORESTRETCHED];
			weaponstatus[ZM66S_DOT]=inv.weaponstatus[ZM66S_DOT];
			weaponstatus[0]=inv.WeaponStatus[0];
			inv.Destroy();
			Return;
		}
		
		int nogl=getloadoutvar(input,"nogl",1);
		//disable launchers if rocket grenades denylisted
		string denylist=hd_noloadout;
		if(denylist.IndexOf(HDLD_BLOOPER)>=0)nogl=1;
		if(!nogl){
			weaponstatus[0]&=~ZM66F_NOLAUNCHER;
		}else if(nogl>0){
			weaponstatus[0]|=ZM66F_NOLAUNCHER;
			weaponstatus[0]&=~ZM66F_GRENADELOADED;
		}
		if(!(weaponstatus[0]&ZM66F_NOLAUNCHER)){
			weaponstatus[0]|=ZM66F_GRENADELOADED;
			hdammotype2=null;
		}

		int zoom=getloadoutvar(input,"zoom",3);
		if(zoom>=0)weaponstatus[ZM66S_ZOOM]=clamp(zoom,16,70);

		int xhdot=getloadoutvar(input,"dot",3);
		if(xhdot>=0)weaponstatus[ZM66S_DOT]=xhdot;

		int semi=getloadoutvar(input,"semi",1);
		if(semi>0){
			weaponstatus[ZM66S_AUTO]=-1;
			weaponstatus[0]|=ZM66F_NOFIRESELECT;
		}else{
			int firemode=getloadoutvar(input,"firemode",1);
			if(firemode>=0){
				weaponstatus[0]&=~ZM66F_NOFIRESELECT;
				weaponstatus[ZM66S_AUTO]=clamp(firemode,0,2);
			}
		}
		if(
			!(weaponstatus[0]&ZM66F_CHAMBER)
			&&weaponstatus[ZM66S_MAG]>0
		){
			weaponstatus[0]|=ZM66F_CHAMBER;
			if(weaponstatus[ZM66S_MAG]==51)weaponstatus[ZM66S_MAG]=49;
			else weaponstatus[ZM66S_MAG]--;
		}
	}
	
	Override Void Tick()
	{
		Super.Tick();
		if(Owner)Return;
		HDWeapon a = HDWeapon(Spawn("ZM66AssaultRifle", pos));
		if(a)
		{
			a.Angle = Angle;
			a.Pitch = Pitch;
			a.Vel = Vel;
			For(int i=0;i<HDWEP_STATUSSLOTS;i++)a.weaponstatus[i]=weaponstatus[i];
			Destroy();
		}
	}
}