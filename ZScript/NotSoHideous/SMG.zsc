// ------------------------------------------------------------
// SMG
// ------------------------------------------------------------
class NSHSMG:HDSMG{// Replaces HDSMG{
	override string gethelptext(){
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		
		return
		LWPHELP_FIRESHOOT
		..LWPHELP_RELOAD..StringTable.Localize("$SMGWH_FIRE")
		..LWPHELP_USE.."+"..LWPHELP_RELOAD..StringTable.Localize("$SMGWH_UPRELOAD")
		..LWPHELP_FIREMODE..StringTable.Localize("$SMGWH_FMODE")
		..LWPHELP_MAGMANAGER
		..LWPHELP_UNLOADUNLOAD
		..LWPHELP_ZOOM.."+"..LWPHELP_RELOAD..StringTable.Localize("$LWPHELP_CHECKMAG")
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int Light = Owner.CurSector.LightLevel*1.75;
		if(owner.player.fixedlightlevel==1)Light = 255;
		vector2 bobb=bob*1.18;
		if(weaponstatus[0]&SMGF_REFLEXSIGHT){
			double dotoff=max(abs(bob.x),abs(bob.y));
			if(dotoff<30){
				string whichdot=sb.ChooseReflexReticle(hdw.weaponstatus[SMGS_DOT]);
				sb.drawimage(
					whichdot,(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.01,scale:(1.6,1.6),
					col:0xFF000000|sb.crosshaircolor.GetInt()
				);
			}
			sb.drawimage(
				"smgrearsight",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);
			if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
			sb.drawimage(
				"smgrearsight",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER, Col:Color(254-Light, 0,0,0)
			);
		}else{
			int cx,cy,cw,ch;
			[cx,cy,cw,ch]=screen.GetClipRect();
			sb.SetClipRect(
				-16+bob.x,-4+bob.y,32,16,
				sb.DI_SCREEN_CENTER
			);
			sb.drawimage(
				"smgfrntsit",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
			);
			if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
			sb.drawimage(
				"fblksite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP, Col:Color(254-Light, 0,0,0)
			);
			sb.SetClipRect(cx,cy,cw,ch);
			sb.drawimage(
				"smgbaksit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
				alpha:0.9
			);
			if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
			sb.drawimage(
				"blaksite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
				alpha:0.9,  Col:Color(254-Light, 0,0,0)
			);
		}
	}
	
	NSHA_SmokeContainer FireSmokes[50];
	
	states{
	
	SmokeLay:
		NSHS A 0{
					A_OverlayFlags(OverlayId(), PSPF_ADDBOB|PSPF_ADDWEAPON, false);
					A_OverlayFlags(OverlayId(), PSPF_ALPHA|PSPF_RENDERSTYLE, True);
					A_OverlayRenderStyle(OverlayId(), CVar.FindCVar("mrnsha_muzzlesmoke").GetBool()?STYLE_TRANSLUCENT:STYLE_NONE);
					A_OverlayPivot(OverlayId(), .5, .5);
					//Float Scale = FRandom(.05, .06);
					//A_OverlayScale(OverlayId(), Scale, Scale);
					//A_OverlayOffset(OverlayId(), 128+HDPlayerPawn(Self).crossbob.X, 113+HDPlayerPawn(Self).crossbob.Y);
					Player.GetPSprite(OverlayId()).Alpha=FRandom(.3, .5);
				}
		NSHS A 1;
		NSHS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1{
					int Index = OverlayId()-PSP_FLASH-10;
					A_OverlayFlags(OverlayId(), PSPF_INTERPOLATE, true);
					
					Player.GetPSprite(OverlayId()).Alpha-=.01;
					
					Float Scale = (FRandom(.09, .13) + (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle))*.2);
					Scale -= (invoker.FireSmokes[Index].Vel.Y);
					Scale *= .1;
					A_OverlayScale(OverlayId(), Max(0, Scale), Max(0, Scale), WOF_ADD);
					
					if(Player.GetPSprite(OverlayId()).Scale.Length()>15)A_OverlayRenderStyle(OverlayId(), STYLE_NONE);
					Player.GetPSprite(OverlayId()).Y += Player.Cmd.Pitch*.02 + Max(0, (Vel.X*Cos(Angle) + Vel.Y*Sin(Angle)*3));
					Player.GetPSprite(OverlayId()).Y -= invoker.FireSmokes[Index].Vel.Z*Cos(Pitch);
					Player.GetPSprite(OverlayId()).Y += invoker.FireSmokes[Index].Vel.Y*Sin(Pitch);
					Player.GetPSprite(OverlayId()).X += Player.Cmd.Yaw*.02 + (Vel.X*Cos(Angle+90) + Vel.Y*Sin(Angle+90)*5);
					Player.GetPSprite(OverlayId()).X += invoker.FireSmokes[index].Vel.X;
				}
		TNT1 A 0 {invoker.FireSmokes[OverlayId()-PSP_FLASH-10].Destroy();invoker.FireSmokes[OverlayId()-PSP_FLASH-10]=Null;}
		Stop;
	
	Sprites:
		SMSR A 0;
		SMGR A 0;
		Stop;
		
	select0:
		SMGG A 0 A_CheckDefaultReflexReticle(SMGS_DOT);
		SMGG A 0 A_CheckReflexSight();
		goto select0small;
	deselect0:
		SMGG A 0 A_CheckReflexSight();
		goto deselect0small;
		SMGG AB 0;
		SMSG AB 0;

	ready:
		SMGG A 0 A_CheckReflexSight();
		#### A 1{
			A_SetCrosshair(21);
			invoker.weaponstatus[SMGS_RATCHET]=0;
			A_WeaponReady(WRF_ALL);
		}
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		goto readyend;
	user3:
		---- A 0 A_MagManager("HD9mMag30");
		goto ready;
	altfire:
		goto chamber_manual;
	althold:
		goto nope;
	hold:
		#### A 0{
			if(
				invoker.weaponstatus[SMGS_CHAMBER]==2  //live round chambered
				&&(
					invoker.weaponstatus[SMGS_AUTO]==2  //full auto
					||(
						invoker.weaponstatus[SMGS_AUTO]==1  //burst
						&&invoker.weaponstatus[SMGS_RATCHET]<=2
					)
				)
			)setweaponstate("fire2");
		}goto nope;
	user2:
	firemode:
		---- A 1{
			int canaut=invoker.weaponstatus[SMGS_SWITCHTYPE];
			if(canaut==1){
				invoker.weaponstatus[SMGS_AUTO]=0;
				return;
			}
			int maxmode=(canaut>0)?(canaut-1):2;
			int aut=invoker.weaponstatus[SMGS_AUTO];
			if(aut>=maxmode)invoker.weaponstatus[SMGS_AUTO]=0;
			else if(aut<0)invoker.weaponstatus[SMGS_AUTO]=0;
			else if(canaut>0)invoker.weaponstatus[SMGS_AUTO]=maxmode;
			else invoker.weaponstatus[SMGS_AUTO]++;
		}goto nope;
	fire:
		#### A 0;
	fire2:
		#### B 1{
			if(invoker.weaponstatus[SMGS_CHAMBER]==2){A_GunFlash();A_Overlay(PSP_FLASH+1, "RecoilLay");}
			else setweaponstate("chamber_manual");
		}
		#### A 1;
		#### A 0{
			if(invoker.weaponstatus[SMGS_CHAMBER]==1){
				A_EjectCasing("HDSpent9mm",
					frandom(-1,2),
					(frandom(0.2,0.3),-frandom(7,7.5),frandom(0,0.2)),
					(0,0,-2)
				);
				invoker.weaponstatus[SMGS_CHAMBER]=0;
			}
			if(invoker.weaponstatus[SMGS_MAG]>0){
				invoker.weaponstatus[SMGS_MAG]--;
				invoker.weaponstatus[SMGS_CHAMBER]=2;
			}
			if(invoker.weaponstatus[SMGS_AUTO]==2)A_SetTics(1);
		}
		#### A 0 A_ReFire();
		goto ready;
	flash:
		#### B 0{
			let bbb=HDBulletActor.FireBullet(self,"HDB_9",speedfactor:1.1);
			if(
				frandom(16,ceilingz-floorz)<bbb.speed*0.1
			)A_AlertMonsters(200);

			A_ZoomRecoil(0.995);
			A_StartSound("weapons/smg",CHAN_WEAPON,volume:0.7);
			invoker.weaponstatus[SMGS_RATCHET]++;
			invoker.weaponstatus[SMGS_CHAMBER]=1;
		}
		SMGF A 1 bright{
			HDFlashAlpha(-200);
			A_Light1();
		}
		TNT1 A 0 {
				A_MuzzleClimb(-frandom(0.2,0.24),-frandom(0.3,0.36),-frandom(0.2,0.24),-frandom(0.3,0.36));
				int index;
				For(index=0;index<invoker.FireSmokes.Size();index++){
					if(!invoker.FireSmokes[index])Break;
				}
				if(index>=invoker.FireSmokes.Size())Return;
				
				NSHA_SmokeContainer a = New('NSHA_SmokeContainer');
				a.Vel = (1, -.2, .5);
				invoker.FireSmokes[index] = a;
				
				A_Overlay(PSP_FLASH+10+index, "SmokeLay");
				A_OverlayOffset(PSP_FLASH+10+index, 145+HDPlayerPawn(Self).crossbob.X, 134+HDPlayerPawn(Self).crossbob.Y);
				Player.GetPSprite(PSP_FLASH+10+index).Scale = (1,1)*FRandom(.2, .3);
				A_OverlayAlpha(PSP_FLASH+10+index, FRandom(.001, .05)*3);
			}
		goto lightdone;
	RecoilLay:
		TNT1 A 1 {A_OverlayScale(PSP_WEAPON, 1, 1);A_OverlayRotate(PSP_WEAPON, 0);}
		TNT1 A 1
			{
				A_OverlayScale(PSP_WEAPON, 1.01, 1.015);A_OverlayScale(PSP_FLASH, 1.01, 1.015);
				A_OverlayRotate(PSP_WEAPON, -.5);A_OverlayRotate(PSP_FLASH, -.5);
			}
		TNT1 A 2
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;


	unloadchamber:
		#### B 4 A_JumpIf(invoker.weaponstatus[SMGS_CHAMBER]<1,"nope");
		#### B 10{
			class<actor>which=invoker.weaponstatus[SMGS_CHAMBER]>1?"HDPistolAmmo":"HDSpent9mm";
			invoker.weaponstatus[SMGS_CHAMBER]=0;
			A_SpawnItemEx(which,
				cos(pitch)*10,0,height*0.82-sin(pitch)*10,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}goto readyend;
	loadchamber:
		---- A 0 A_JumpIf(invoker.weaponstatus[SMGS_CHAMBER]>0,"nope");
		---- A 0 A_JumpIf(!countinv("HDPistolAmmo"),"nope");
		---- A 1 offset(0,34) A_StartSound("weapons/pocket",9);
		---- A 1 offset(2,36);
		---- A 1 offset(2,44);
		#### B 1 offset(5,58);
		#### B 2 offset(7,70);
		#### B 6 offset(8,80);
		#### A 10 offset(8,87){
			if(countinv("HDPistolAmmo")){
				A_TakeInventory("HDPistolAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[SMGS_CHAMBER]=2;
				A_StartSound("weapons/smgchamber",8);
			}else A_SetTics(4);
		}
		#### A 3 offset(9,76);
		---- A 2 offset(5,70);
		---- A 1 offset(5,64);
		---- A 1 offset(5,52);
		---- A 1 offset(5,42);
		---- A 1 offset(2,36);
		---- A 2 offset(0,34);
		goto nope;
	user4:
	unload:
		#### A 0{
			invoker.weaponstatus[0]|=SMGF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[SMGS_MAG]>=0
			)setweaponstate("unmag");
			else if(invoker.weaponstatus[SMGS_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
	reload:
		#### A 0{
			if(PressingZoom())SetWeaponState("CheckMag");
			Else
			{
			invoker.weaponstatus[0]&=~SMGF_JUSTUNLOAD;
			bool nomags=HDMagAmmo.NothingLoaded(self,"HD9mMag30");
			if(invoker.weaponstatus[SMGS_MAG]>=30)setweaponstate("nope");
			else if(
				invoker.weaponstatus[SMGS_MAG]<1
				&&(
					pressinguse()
					||nomags
				)
			){
				if(
					countinv("HDPistolAmmo")
				)setweaponstate("loadchamber");
				else setweaponstate("nope");
			}else if(nomags)setweaponstate("nope");
			}
		}goto unmag;

	ReloadRotate:
		TNT1 A 0 A_OverlayPivot(PSP_WEAPON, .5, .5);
		TNT1 A 1 {
				if(Player.ReadyWeapon == Invoker)A_OverlayRotate(PSP_WEAPON, -Player.GetPSprite(PSP_WEAPON).X*.5, WOF_INTERPOLATE);
			}
		Wait;
	
	HandReloadStart:
		BRFR B 0 {
				A_OverlayPivot(OverlayId(), .5, .5);A_OverlayRotate(OverlayId(), -25);A_OverlayScale(OverlayId(), .7, .7);
				A_OverlayFlags(OverlayId(), PSPF_ADDWEAPON, 0);A_OverlayOffset(OverlayId(), 12, 32);}
		#### # 1;
		#### ### 1 A_OverlayOffset(OverlayId(), -4, 15+Random(-1, 3), WOF_ADD);
		Stop;
	HandReloadEnd:
		BRFR B 0 {
				A_OverlayPivot(OverlayId(), .5, .5);A_OverlayRotate(OverlayId(), -25);A_OverlayScale(OverlayId(), .7, .7);
				A_OverlayFlags(OverlayId(), PSPF_ADDWEAPON, 0);A_OverlayOffset(OverlayId(), -5, 60);}
		#### # 1;
		#### # 4 A_OverlayOffset(OverlayId(), 0, 32, WOF_INTERPOLATE);
		Stop;
	
	unmag:
		#### A 0 A_Overlay(PSP_FLASH-1, "ReloadRotate");
		#### A 1 offset(0,34) A_SetCrosshair(21);
		#### A 1 offset(5,38);
		#### A 1 offset(10,42);
		#### # 0 A_Overlay(-3, "HandReloadStart");
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		#### A 0{if(Player.GetPSprite(PSP_WEAPON).Sprite==GetSpriteIndex("SMGGA0"))Player.GetPSprite(PSP_WEAPON).Sprite=GetSpriteIndex("SMGRA0");
			else Player.GetPSprite(PSP_WEAPON).Sprite=GetSpriteIndex("SMSRA0");}
		#### A 2 offset(20,46) A_StartSound("weapons/smgmagclick",8);
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		#### A 4 offset(30,52){
			A_MuzzleClimb(0.3,0.4);
			A_StartSound("weapons/smgmagmove",8,CHANF_OVERLAP);
		}
		#### A 0{
			int magamt=invoker.weaponstatus[SMGS_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[SMGS_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD9mMag30",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD9mMag30",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD9mMag30",magamt);
				A_StartSound("weapons/pocket",9);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		#### AA 7 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
	magout:
		#### A 0{
			if(invoker.weaponstatus[0]&SMGF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		#### A 0 A_StartSound("weapons/pocket",9);
		#### A 6 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### A 7 offset(34,52) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### A 10 offset(32,50);
		#### A 3 offset(32,49){
			let mmm=hdmagammo(findinventory("HD9mMag30"));
			if(mmm){
				invoker.weaponstatus[SMGS_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/smgmagclick",8,CHANF_OVERLAP);
			}
			if(
				invoker.weaponstatus[SMGS_MAG]<1
				||invoker.weaponstatus[SMGS_CHAMBER]>0
			)setweaponstate("reloadend");
		}
		goto reloadend;

	reloadend:
		#### A 3 offset(30,52);
		#### # 0 A_Overlay(-3, "HandReloadEnd");
		#### A 2 offset(20,46);
		#### A 1 offset(10,42);
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		#### # 0 A_CheckReflexSight();
		#### A 1 offset(5,38);
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		#### A 1 offset(0,34);
		#### # 0 {A_ClearOverlays(PSP_FLASH-1, PSP_FLASH);A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);}
		goto chamber_manual;

	chamber_manual:
		#### A 0 A_JumpIf(
			invoker.weaponstatus[SMGS_MAG]<1
			||invoker.weaponstatus[SMGS_CHAMBER]==2
		,"nope");
		#### B 2 offset(3,32){
			A_WeaponBusy();
			invoker.weaponstatus[SMGS_MAG]--;
			invoker.weaponstatus[SMGS_CHAMBER]=2;
		}
		#### B 3 offset(5,35) A_StartSound("weapons/smgchamber",8,CHANF_OVERLAP);
		#### A 1 offset(3,32);
		#### A 1 offset(2,31);
		goto nope;
		
	CheckMag:
		#### B 2 A_Jumpif(!PressingReload(), "Nope");
		#### B 0 {if(invoker.weaponstatus[SMGS_MAG]>0)A_Overlay(102, "Dumb");
			if(Invoker.weaponstatus[SMGS_CHAMBER] == 2)A_Overlay(103, "Dumb2");
			A_Overlay(104, "Dumb3");}
		Loop;
	Dumb:
		STUP O 5 {A_OverLayOffset(102,29,24);A_OverlayPivot(OverlayId(), 1, .5);Float Mag = invoker.weaponstatus[SMGS_MAG];A_OverlayScale(OverlayId(), Mag/30, 1);}
		Stop;
	Dumb2:
		STUP A 0 A_OverLayOffset(103, 32, 23);
		STUP Q 5;
		Stop;
	Dumb3:
		#### # 0 A_OverLayOffset(OverlayId(),29,23);
		STUP W 0 A_JumpIf(invoker.weaponstatus[SMGS_AUTO]>1, 3);
		STUP X 0 A_JumpIf(invoker.weaponstatus[SMGS_AUTO]>0, 2);
		STUP Q 0;
		#### # 5;
		Stop;


	spawn:
		TNT1 A 1;
		SMGN A -1{
			if(invoker.weaponstatus[SMGS_MAG]<0)frame=1;
			if(
				invoker.weaponstatus[0]&SMGF_REFLEXSIGHT
			)invoker.sprite=getspriteindex("SMSNA0");
		}
		SMSN # -1;
		stop;
	}
	override void initializewepstats(bool idfa){
		weaponstatus[SMGS_MAG]=30;
		weaponstatus[SMGS_CHAMBER]=2;
	}
	override void loadoutconfigure(string input){
		
		if(Owner && Owner.FindInventory("HDSMG"))
		{
			Let inv = HDWeapon(Owner.FindInventory("HDSMG"));
			weaponstatus[SMGN_SEMIONLY]=inv.weaponstatus[SMGN_SEMIONLY];
			weaponstatus[SMGN_BURSTONLY]=inv.weaponstatus[SMGN_BURSTONLY];
			weaponstatus[SMGN_FULLONLY]=inv.weaponstatus[SMGN_FULLONLY];
			weaponstatus[SMGS_MAG]=inv.weaponstatus[SMGS_MAG];
			weaponstatus[SMGS_CHAMBER]=inv.weaponstatus[SMGS_CHAMBER];
			weaponstatus[SMGS_AUTO]=inv.weaponstatus[SMGS_AUTO];
			weaponstatus[SMGS_RATCHET]=inv.weaponstatus[SMGS_RATCHET];
			weaponstatus[SMGS_SWITCHTYPE]=inv.weaponstatus[SMGS_SWITCHTYPE];
			weaponstatus[SMGS_DOT]=inv.weaponstatus[SMGS_DOT];
			weaponstatus[0]=inv.WeaponStatus[0];
			inv.Destroy();
			Return;
		}
		
		int firemode=getloadoutvar(input,"firemode",1);
		if(firemode>=0)weaponstatus[SMGS_AUTO]=clamp(firemode,0,2);

		int xhdot=getloadoutvar(input,"dot",3);
		int reflexsight=getloadoutvar(input,"reflexsight",1);
		if(
			!reflexsight
			&&xhdot<0
		)weaponstatus[0]&=~SMGF_REFLEXSIGHT;
		else{
			weaponstatus[0]|=SMGF_REFLEXSIGHT;
			if(xhdot>=0)weaponstatus[SMGS_DOT]=xhdot;
		}

		int fireswitch=getloadoutvar(input,"fireswitch",1);
		if(fireswitch>3)weaponstatus[SMGS_SWITCHTYPE]=0;
		else if(fireswitch>0)weaponstatus[SMGS_SWITCHTYPE]=clamp(fireswitch,0,3);
	}
	Override Void Tick()
	{
		Super.Tick();
		if(Owner)Return;
		HDWeapon a = HDWeapon(Spawn("HDSMG", pos));
		if(a)
		{
			a.Angle = Angle;
			a.Pitch = Pitch;
			a.Vel = Vel;
			For(int i=0;i<HDWEP_STATUSSLOTS;i++)a.weaponstatus[i]=weaponstatus[i];
			Destroy();
		}
	}
}