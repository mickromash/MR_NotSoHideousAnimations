// ------------------------------------------------------------
// Rocket Launcher
// ------------------------------------------------------------
class NSHRL:HDRL{
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("ROQPA0",(-47,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6));
			sb.drawimage("ROCKA0",(-58,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6));
			sb.drawnum(hpl.countinv("HDRocketAmmo"),-41,-8,sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HEATAmmo"),-54,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int ab=hdw.airburst;
		if(
			hdw.weaponstatus[RLS_CHAMBER]>1||
			!(hdw.weaponstatus[0]&RLF_GRENADEMODE)
		){
			if(hdw.weaponstatus[RLS_CHAMBER]>1){
				ab=0;
				sb.drawrect(-22,-15,3,2);
				sb.drawrect(-18,-15,2,2);
				sb.drawrect(-26,-17,4,6);
				sb.drawrect(-30,-16,4,4);
			}else{
				sb.drawrect(-22,-13,3,1);
				sb.drawrect(-18,-13,2,1);
				sb.drawrect(-26,-14,4,3);
			}
		}else{
			sb.drawrect(-26,-27+min(16,ab>>9),4,1);
			sb.drawrect(-23,-26,1,16);
			sb.drawrect(-25,-26,1,16);
		}
		if(ab)sb.drawstring(
			sb.mAmountFont,string.format("%.2f",ab*0.01),
			(-32,-15),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,
			ab?Font.CR_WHITE:Font.CR_DARKGRAY
		);
		if(hdw.weaponstatus[RLF_SAFETY])sb.drawimage("SAFETY",(-17,-16),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
		if(!(hdw.weaponstatus[0]&RLF_NOMAG))sb.drawwepnum(hdw.weaponstatus[RLS_MAG],6);
		if(hdw.weaponstatus[RLS_CHAMBER]>0)sb.drawrect(-19,-11,3,1);
	}
	override string gethelptext(){
		
		if(!Cvar.GetCVar("mrnsha_binds", Owner.Player).GetBool())LocalizeHelp();
		else
		{
			MRHD_WeapAnimsHandler Handler = MRHD_WeapAnimsHandler(EventHandler.Find("MRHD_WeapAnimsHandler"));
			
			if(Handler)Handler.MRHD_GetWeaponKeyBinds(Self);
		}
		
		return
		LWPHELP_FIRESHOOT
		..LWPHELP_ALTFIRE.."  "..(weaponstatus[0]&RLF_GRENADEMODE?StringTable.Localize("$RLWH_ROCK"):StringTable.Localize("$RLWH_GREN"))..StringTable.Localize("$RLWH_MODE")
		..(weaponstatus[RLS_CHAMBER]>1?(
			LWPHELP_ALTRELOAD..StringTable.Localize("$RLWH_OR")..LWPHELP_RELOAD..StringTable.Localize("$RLWH_REMOVHEAT")
		):(
			LWPHELP_ALTRELOAD..StringTable.Localize("$RLWH_LOAD")
			..LWPHELP_RELOADRELOAD
		))
		..LWPHELP_FIREMODE.."+"..LWPHELP_UPDOWN..StringTable.Localize("$RLWH_AIRBURST")
		..LWPHELP_UNLOADUNLOAD
		..LWPHELP_USE.."+"..LWPHELP_FIREMODE..StringTable.Localize("$LWPHELP_SAFETY")
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int Light = Owner.CurSector.LightLEvel * 1.75;
		if(owner.player.fixedlightlevel==1)Light = 255;
		if(hdw.weaponstatus[0]&RLF_GRENADEMODE)sb.drawgrenadeladder(hdw.airburst,bob);
		else{
			double dotoff=max(abs(bob.x),abs(bob.y));

			if(dotoff<35){
				string whichdot=sb.ChooseReflexReticle(hdw.weaponstatus[RLS_DOT]);
				sb.drawimage(
					whichdot,(0,0)+bob*1.1,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.01,scale:(0.8,0.8),
					col:0xFF000000|sb.crosshaircolor.GetInt()
				);
			}
			sb.drawimage(
				"rlrearsight",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);
			sb.drawimage(
				"rlrearsight",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER, col:color(254-Light, 0,0,0)
			);
			if(hdw.weaponstatus[RLS_CHAMBER]<=1){
				int airburst=hdw.airburst;
				if(airburst)sb.drawnum(airburst/100,
					10+bob.x,9+bob.y,sb.DI_SCREEN_CENTER,Font.CR_BLACK
				);
			}


			if(scopeview){
				double degree=4.;
				double deg=1/degree;
				int scaledyoffset=40;
				int scaledwidth=56;
				int cx,cy,cw,ch;
				[cx,cy,cw,ch]=screen.GetClipRect();
				sb.SetClipRect(
					bob.x-(scaledwidth>>1),bob.y+scaledyoffset-(scaledwidth>>1),
					scaledwidth,scaledwidth,
					sb.DI_SCREEN_CENTER
				);

				sb.fill(color(255,0,0,0),
					bob.x-27,scaledyoffset+bob.y-27,
					54,54,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
				);

				texman.setcameratotexture(hpc,"HDXCAM_RLAUN",degree);
				let cam  = texman.CheckForTexture("HDXCAM_RLAUN",TexMan.Type_Any);
				double camSize = texman.GetSize(cam);
				sb.DrawCircle(cam,(0,scaledyoffset)+bob*5,.085,usePixelRatio:true);

				screen.SetClipRect(cx,cy,cw,ch);

				sb.drawimage(
					"rlret",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					scale:(0.82,0.82)
				);
				if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
				sb.drawimage(
					"rlretblk",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					scale:(0.82,0.82), col:Color(254-Light, 0,0,0)
				);
				sb.drawimage(
					"rlscop",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					scale:(0.82,0.82)
				);
				if(CVar.GetCVar("mrnsha_sights", owner.player).GetBool())
				sb.drawimage(
					"rlscop",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					scale:(0.82,0.82), col:Color(254-Light, 0,0,0)
				);


				//readings
				if(
					(level.time&(1|2))
					||rangefinder>14
				)sb.drawnum(rangefinder,
					4+bob.x,17+bob.y,sb.DI_SCREEN_CENTER,Font.CR_RED,0.5
				);
				if(hdw.weaponstatus[RLS_CHAMBER]<=1){
					int airburst=hdw.airburst;
					if(airburst)sb.drawnum(max(10,airburst/100),
						4+bob.x,52+bob.y,sb.DI_SCREEN_CENTER,Font.CR_WHITE,0.5
					);
				}

			}
		}
	}
	override void SetReflexReticle(int which){weaponstatus[RLS_DOT]=which;}
	States{
	select0:
		LAUG A 0 A_CheckDefaultReflexReticle(RLS_DOT);
		MISG A 0 A_CheckIdSprite("LAUGA0","MISGA0");
		goto select0big;
		LAUG AB 0;
		MISG AB 0;
	deselect0:
		MISG # 0 A_CheckIdSprite("LAUGA0","MISGA0");
		---- A 0;
		goto deselect0small;
		
	Safety:
		---- A 0 {A_StartSound("weapons/fmswitch",CHAN_WEAPON,CHANF_OVERLAP,0.4);
			invoker.weaponstatus[RLF_SAFETY]=!invoker.weaponstatus[RLF_SAFETY];}
		Goto Nope;
	ready:
		MISG A 0 A_CheckIdSprite("LAUGA0","MISGA0");
		---- A 0 A_JumpIf(pressinguse()&&pressingfiremode(),"Safety");
		#### A 1{
			A_WeaponReady(WRF_ALL);

			//update rangefinder
			if(
				!(level.time&(1|2|4|8))
				&&max(abs(vel.x),abs(vel.y),abs(vel.z))<2
				&&(
					!player.cmd.pitch
					&&!player.cmd.yaw
				)
			){
				vector3 gunpos=gunpos();
				flinetracedata frt;
				linetrace(
					angle,
					512*HDCONST_ONEMETRE,
					pitch,
					flags:TRF_NOSKY|TRF_ABSOFFSET,
					offsetz:gunpos.z,
					offsetforward:gunpos.x,
					offsetside:gunpos.y,
					data:frt
				);
				invoker.rangefinder=int(frt.distance*(1./HDCONST_ONEMETRE));
			}
		}
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 1);
		goto readyend;

	firemode:
		goto abadjust;


	fire:
		#### A 1 A_JumpIf(invoker.weaponstatus[RLF_SAFETY], "Nope");
		goto shoot;
	althold:
	hold:
		---- A 0;
		goto nope;
	shoot:
		#### A 2{
			bool nomag=invoker.weaponstatus[0]&RLF_NOMAG;
			if(nomag)invoker.weaponstatus[RLS_MAG]=0;

			int chm=invoker.weaponstatus[RLS_CHAMBER];
			if(chm<1){
				if(nomag)setweaponstate("nope");
				else setweaponstate("chamber_manual");
				return;
			}

			RocketGrenade rkt;
			if(
				invoker.weaponstatus[0]&RLF_GRENADEMODE
				&&chm==1
			){
				//shoot a grenade
				A_FireHDGL();
				invoker.weaponstatus[RLS_SMOKE]+=5;
				invoker.weaponstatus[RLS_CHAMBER]=0;
				invoker.weaponstatus[RLS_RECOIL]=0;
			}else{
				A_FireHDGL(chm>1?2:1);
				invoker.weaponstatus[RLS_SMOKE]+=5;
				invoker.weaponstatus[RLS_CHAMBER]=0;

				if(chm>1)invoker.weaponstatus[RLS_RECOIL]=2;
				else invoker.weaponstatus[RLS_RECOIL]=1;
				A_Overlay(PSP_FLASH+1, "RecoilLay");
			}
		}
		#### B 2{
			switch(invoker.weaponstatus[RLS_RECOIL]){
			case 2:
				A_ZoomRecoil(0.99);
				A_MuzzleClimb(
					0,0,
					-0.8,-1.6,
					-0.2,-0.6,
					-0.3,-0.9
				);
				break;
			case 1:
				A_ZoomRecoil(0.995);
				A_MuzzleClimb(
					0,0,
					-0.4,-0.8,
					-0.1,-0.3,
					-0.2,-0.6
				);
				break;
			case 0:
			default:
				A_ZoomRecoil(0.995);
				A_MuzzleClimb(
					0,0,
					-0.4,-0.8,
					-0.1,-0.3
				);
				break;
			}
		}
		---- A 0 A_JumpIf(!(invoker.weaponstatus[0]&RLF_NOMAG),"chamber");
		goto nope;

	hardlaunchrecoil:  //unused
		#### A 2{
			A_ZoomRecoil(0.7);
			if(gunbraced()){
				hdplayerpawn(self).gunbraced=false;
				A_MuzzleClimb(
					0,0,
					frandom(1,1.2),-frandom(1,1.5),
					frandom(0.7,0.9),-frandom(1.5,2),
					-frandom(0.8,1.),frandom(2,3)
				);
				A_ChangeVelocity(cos(pitch)*-1,0,sin(pitch)*1,CVF_RELATIVE);
			}else{
				A_MuzzleClimb(
					0,0,
					frandom(1.2,1.7),-frandom(2,2.5),
					frandom(1.,1.2),-frandom(2.5,3),
					frandom(0.6,0.8),-frandom(2,3)
				);
				A_ChangeVelocity(cos(pitch)*-3,0,sin(pitch)*3,CVF_RELATIVE);
				if(self is "hdplayerpawn")hdplayerpawn(self).stunned+=10;
			}
			A_Gunflash();
		}
		#### B 1 offset(0,49);
		#### B 2 offset(0,54);
		#### B 2 offset(0,43);
		#### B 1 offset(0,39);
		#### B 1 offset(0,36);
		#### A 0 A_JumpIf(invoker.weaponstatus[0]&RLF_NOMAG,"nope");
		goto chamber;
	flash:
		MISF A 2 bright{
			A_CheckIdSprite("LAUFA0","MISFA0",PSP_FLASH);
			A_StartSound("weapons/rocklaunch",CHAN_WEAPON,CHANF_OVERLAP,volume:0.6);
			HDFlashAlpha(128);
			A_Light1();
		}
		#### B 2 bright A_Light2();
		#### C 2 bright A_Light1();
		#### D 1 bright A_Light0();
		TNT1 A 0 A_AlertMonsters();
		stop;
		LAUF ABCD 0;
		MISF ABCD 0;
		stop;
	RecoilLay:
		TNT1 A 1{Vector2 Pivot = (FRandom(0, 1), FRandomPick(FRandom(0, .3), FRandom(.7, 1)));A_OverlayScale(PSP_WEAPON, 1);A_OverlayScale(PSP_FLASH, 1);
			A_OverlayPivot(PSP_WEAPON, Pivot.X, Pivot.Y);A_OverlayPivot(PSP_FLASH, Pivot.X, Pivot.Y);}
		TNT1 AAAAAA 1
			{
				Vector2 Pivot = Player.GetPSprite(PSP_WEAPON).Pivot;
				Float Recoil = invoker.weaponstatus[RLS_RECOIL];
				Float Angle = (Pivot.X-.5)*10*abs(Pivot.Y-.5)*Recoil;
				A_OverlayScale(PSP_WEAPON, .03*Recoil, .05*Recoil, WOF_ADD);A_OverlayScale(PSP_FLASH, .03*Recoil, .05*Recoil, WOF_ADD);
				A_OverlayRotate(PSP_WEAPON, Angle, WOF_ADD);A_OverlayRotate(PSP_FLASH, Angle, WOF_ADD);
			}
		TNT1 A 6
			{
				A_OverlayScale(PSP_WEAPON, 1, 1, WOF_INTERPOLATE);A_OverlayScale(PSP_FLASH, 1, 1, WOF_INTERPOLATE);
				A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE);A_OverlayRotate(PSP_FLASH, 0, WOF_INTERPOLATE);
			}
		Stop;

	chamber:
		#### A 1 offset(0,35){
			if(invoker.weaponstatus[RLS_CHAMBER]>0){
				setweaponstate("nope");
				return;
			}
			A_StartSound("weapons/rockchamber",8);
		}
		#### A 1 offset(1,38){
			if(invoker.weaponstatus[RLS_MAG]>0){
				invoker.weaponstatus[RLS_CHAMBER]=1;
				invoker.weaponstatus[RLS_MAG]--;
			}
		}
		#### A 1 offset(0,36);
		goto nope;
	chamber_manual:
		#### A 1 offset(0,35){
			if(invoker.weaponstatus[RLS_CHAMBER]>0){
				setweaponstate("nope");
				return;
			}
			A_StartSound("weapons/rockchamber",8);
		}
		#### A 1 offset(0,39);
		#### A 2 offset(1,38){
			if(invoker.weaponstatus[RLS_MAG]>0){
				invoker.weaponstatus[RLS_CHAMBER]=1;
				invoker.weaponstatus[RLS_MAG]--;
			}
		}
		#### A 1 offset(0,35);
		goto nope;

	altfire:
	grenadeorrocket:
		#### A 1 offset(0,34){
			if(invoker.weaponstatus[RLS_CHAMBER]>1){
				invoker.weaponstatus[0]&=~RLF_GRENADEMODE;
				setweaponstate("nope");
				return;
			}
			A_WeaponBusy();
		}
		#### A 2 offset(0,36) A_StartSound("weapons/rockchamber",8);
		#### A 1 offset(0,37);
		#### A 2 offset(1,38);
		#### A 3 offset(2,37){
			invoker.weaponstatus[0]^=RLF_GRENADEMODE;
			A_SetHelpText();
		}
		#### A 2 offset(1,36);
		#### A 1 offset(0,34);
		goto nope;
	reload:
		#### A 0 A_JumpIf(PressingZoom(), "CheckMag");
		#### A 0 A_JumpIf(invoker.weaponstatus[RLS_CHAMBER]>1,"altreload");
		#### A 0 A_JumpIf(invoker.weaponstatus[0]&RLF_NOMAG,"nomagreload");
		#### A 0 A_JumpIf(
			(invoker.weaponstatus[RLS_CHAMBER]>0&&invoker.weaponstatus[RLS_MAG]>=5)
			||!countinv("HDRocketAmmo"),
			"nope"
		);
		MISR A 2 offset(0,0);
		#### B 2 offset(0,0) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		#### C 2 offset(0,0);
		#### D 2 offset(0,0);
		#### E 2{
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			A_StartSound("weapons/rockopen",8);
		}
		#### F 2;
		#### G 4 A_StartSound("weapons/rockopen2",8,CHANF_OVERLAP);
	reload2:
		#### B 0 A_JumpIf(
			(invoker.weaponstatus[RLS_CHAMBER]>0&&invoker.weaponstatus[RLS_MAG]>=5)
			||!countinv("HDRocketAmmo"),
			"reloadend"
		);
		#### A 0 A_OverLay(-26, "HandRocketLoad");
		#### G 9 offset(10,38) A_StartSound("weapons/pocket",9);
		#### G 4 offset(12,40)A_StartSound("weapons/rockreload",8);
		#### G 3 offset(10,38){
			if(!countinv("HDRocketAmmo"))return;
			A_TakeInventory("HDRocketAmmo",1,TIF_NOTAKEINFINITE);
			if(invoker.weaponstatus[RLS_CHAMBER]<1)invoker.weaponstatus[RLS_CHAMBER]=1;
			else invoker.weaponstatus[RLS_MAG]++;
		}
		#### G 1 offset(10,34) A_JumpIf(!pressingreload(),"reloadend");
		#### G 4 offset(11,38) A_StartSound("weapons/pocket",9);
		#### G 5 offset(10,37);
		loop;
	HandRocketLoad://Mag
		SHHA D 1 A_OverLayOffset(-26, -56, 40);
		#### #### 1 A_OverLayOffset(-26, -4, -10, WOF_ADD);
		SHHA D 2 A_OverLayOffset(-26, -70, 0, WOF_INTERPOLATE);
		SHHA D 2 A_OverLayOffset(-26, -82, -2, WOF_INTERPOLATE);
		SHHA D 1 {if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, -89, -1, WOF_INTERPOLATE); Else A_OverLayOffset(-26, -90, -2, WOF_INTERPOLATE);}
		SHHA D 1 A_OverLayOffset(-26, -90, -3, WOF_INTERPOLATE);
		SHHA D 1 {if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, -91, -3, WOF_INTERPOLATE); Else A_OverLayOffset(-26, -90, -2, WOF_INTERPOLATE);}
		SHHA D 1 A_OverLayOffset(-26, -90, -2, WOF_INTERPOLATE);
		BFHA D 1 {if((HDPlayerPawn(self).bloodpressure>30)||(Health<41))A_OverLayOffset(-26, -131, 9); Else A_OverLayOffset(-26, -130, 10);}
		BFHA D 1 A_OverLayOffset(-26, -130, 13);
		BFHA D 1 {if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, -129, 14, WOF_INTERPOLATE); Else A_OverLayOffset(-26, -127, 15, WOF_INTERPOLATE);}
		BFHA D 1 A_OverLayOffset(-26, -125, 18, WOF_INTERPOLATE);
		BFHA D 1 {if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, -123, 21, WOF_INTERPOLATE); Else A_OverLayOffset(-26, -120, 23, WOF_INTERPOLATE);}
		BFHA D 1 A_OverLayOffset(-26, -115, 28, WOF_INTERPOLATE);
		BFHA D 1 {if((HDPlayerPawn(self).bloodpressure>40)||(Health<41))A_OverLayOffset(-26, -113, 33, WOF_INTERPOLATE); Else A_OverLayOffset(-26, -110, 35, WOF_INTERPOLATE);}
		BFHA D 1 A_OverLayOffset(-26, -105, 43, WOF_INTERPOLATE);
		BFHA D 1 A_OverLayOffset(-26, -100, 48, WOF_INTERPOLATE);
		BFHA D 1 A_OverLayOffset(-26, -95, 56, WOF_INTERPOLATE);
		Stop;
	reloadend:
		#### G 3 A_StartSound("weapons/rockopen2",8);
		#### F 3 A_StartSound("weapons/rockopen",8,CHANF_OVERLAP);
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		#### E 2;
		#### D 2;
		#### C 2;
		#### B 2;
		#### A 2;
		MISG A 0;
		goto nope;

	HandHeat:
		---- A 0 A_JumpIf(invoker.weaponstatus[RLS_CHAMBER]>1,"Handremoveheat");
		---- A 0 A_Jumpif((invoker.weaponstatus[RLF_NOMAG]||invoker.weaponstatus[RLS_MAG]==5)&&(invoker.weaponstatus[RLS_CHAMBER]==1),"HandremoveRock");
		MISG L 1 A_OverlayOffset(-26, 40, 30);
		MISG L 2 A_OverlayOffset(-26, 30, 20, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, 20, 0, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, 10, -10, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, 0, -5, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, -13,0, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, -17,5, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, -18,6, WOF_INTERPOLATE);
		MISG L 4 A_OverlayOffset(-26, -20,8, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -80, -5);
		BFHA D 2 A_OverlayOffset(-26, -70, 0, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -60, 12, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -50, 20, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -40, 32, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -30, 44, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -20, 56, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -10, 68, WOF_INTERPOLATE);
		Stop;
	Handremoveheat:
		BFHA D 2 A_OverlayOffset(-26, -30, 44);
		BFHA D 2 A_OverlayOffset(-26, -40, 32, WOF_INTERPOLATE);
		BFHA D 1 A_OverlayOffset(-26, -50, 20, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -60, 12, WOF_INTERPOLATE);
		BFHA D 1 A_OverlayOffset(-26, -70, 0, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -80, -5, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -87, -12, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, -20,8);
		MISG L 2 A_OverlayOffset(-26, -13,0, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, 0, -5, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, 10, -10, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, 20, 0, WOF_INTERPOLATE);
		MISG L 2 A_OverlayOffset(-26, 30, 20, WOF_INTERPOLATE);
		MISG L 1 A_OverlayOffset(-26, 40, 30, WOF_INTERPOLATE);
		Stop;
	HandremoveRock:
		BFHA D 2 A_OverlayOffset(-26, -30, 44);
		BFHA D 2 A_OverlayOffset(-26, -40, 32, WOF_INTERPOLATE);
		BFHA D 1 A_OverlayOffset(-26, -50, 20, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -60, 12, WOF_INTERPOLATE);
		BFHA D 1 A_OverlayOffset(-26, -70, 0, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -80, -5, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -87, -12, WOF_INTERPOLATE);
		SHHA D 2 A_OverlayOffset(-26, -40,-2);
		SHHA D 2 A_OverlayOffset(-26, -33,-10, WOF_INTERPOLATE);
		SHHA D 2 A_OverlayOffset(-26, -20, -15, WOF_INTERPOLATE);
		SHHA D 2 A_OverlayOffset(-26, -10, -20, WOF_INTERPOLATE);
		SHHA D 2 A_OverlayOffset(-26, 0, -10, WOF_INTERPOLATE);
		SHHA D 2 A_OverlayOffset(-26, 10, 10, WOF_INTERPOLATE);
		SHHA D 1 A_OverlayOffset(-26, 20, 20, WOF_INTERPOLATE);
		Stop;
	user1:
	altreload:
		#### A 2{
			int ch=invoker.weaponstatus[RLS_CHAMBER];
			if(
				(
					ch>0
					&&pressingreload()
				)||(
					ch<2
					&&!countinv("HEATAmmo")
				)
			)setweaponstate("nope");
		}
		MISR A 2 offset(0,20);
		#### C 2 offset(0,40);
		#### E 2 offset(20,60);
		#### H 2 offset(40,60);
		#### I 2 offset(30,40) A_StartSound("weapons/rockopen",8);
		#### J 2 offset(20,30);
		#### K 4 offset(10,3);
		#### K 10 offset(10,3){
			A_StartSound("weapons/rockopen2",8);
			if(invoker.weaponstatus[0]&RLF_NOMAG)A_SetTics(8);
		}
		#### K 4 offset(10,3){
			A_StartSound("weapons/pocket",8);
			if(invoker.weaponstatus[0]&RLF_NOMAG)A_SetTics(8);
		}
		#### B 0{
			if(health<40)A_SetTics(7);
			else if(health<60)A_SetTics(3);
		}
		#### A 0 A_OverLay(-26, "HandHeat");
		#### K 6 offset(10,3);
		#### K 6 offset(10,3);
		#### K 2 offset(10,4) A_StartSound("weapons/rockreload",8);

		#### K 10 offset(10,3){
			int chh=invoker.weaponstatus[RLS_CHAMBER];
			if(chh>1){
				setweaponstate("removeheatfromchamber");
				return;
			}

			if(invoker.weaponstatus[0]&RLF_NOMAG)A_SetTics(5);
			if(invoker.weaponstatus[RLS_CHAMBER]<1){
				setweaponstate("loadheatintoemptychamber");
				return;
			}else{
				invoker.weaponstatus[RLS_CHAMBER]=0;
				if(
					!(invoker.weaponstatus[0]&RLF_NOMAG)
					&&invoker.weaponstatus[RLS_MAG]<5
				){
					invoker.weaponstatus[RLS_MAG]++;
					setweaponstate("loadheatintoemptychamber");
					return;
				}
				if(A_JumpIfInventory("HDRocketAmmo",0,"null"))A_SpawnItemEx(
					"HDRocketAmmo",10,0,10,vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
				);else{
					A_StartSound("weapons/pocket",9);
					A_GiveInventory("HDRocketAmmo",1);
				}
			}
		}goto altreloadend;
	loadheatintoemptychamber:
		#### K 3 offset(10,3);
		#### K 2 offset(10,3){
			if(!countinv("HEATAmmo"))return;
			invoker.weaponstatus[RLS_CHAMBER]=2;
			A_SetHelpText();
			invoker.weaponstatus[0]&=~RLF_GRENADEMODE;
			A_TakeInventory("HEATAmmo",1,TIF_NOTAKEINFINITE);
		}goto altreloadend;
	removeheatfromchamber:
		#### K 4 offset(10,3){
			invoker.weaponstatus[RLS_CHAMBER]=0;
			A_SetHelpText();
			if(A_JumpIfInventory("HEATAmmo",0,"null"))A_SpawnItemEx(
				"HEATAmmo",10,0,height-16,vel.x,vel.y,vel.z+2,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
			);else{
				A_StartSound("weapons/pocket",9);
				A_GiveInventory("HEATAmmo",1);
			}
		}goto altreloadend;
	altreloadend:
		#### K 6 offset(10,3) A_StartSound("weapons/rockopen2",8,CHANF_OVERLAP);
		#### B 0 A_StartSound("weapons/rockopen",8,CHANF_OVERLAP);
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		#### J 2 offset(20,30);
		#### I 2 offset(30,40);
		#### H 2 offset(40,60);
		#### E 2 offset(20,60);
		#### C 2 offset(0,40);
		MISR A 2 offset(0,20);
		goto nope;

	user4:
	unload:
		#### A 0 A_JumpIf(invoker.weaponstatus[0]&RLF_NOMAG,"nomagreload");
		MISR A 1{
			if(
				invoker.weaponstatus[RLS_CHAMBER]>1
			)setweaponstate("altreload");
			else if(
				invoker.weaponstatus[RLS_CHAMBER]<1
				&&invoker.weaponstatus[RLS_MAG]<1
			)setweaponstate("nope");
		}
		#### A 1;
		#### C 2;
		#### D 2 A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		#### E 2{
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			A_StartSound("weapons/rockopen",8);
		}
		#### F 2;
		#### G 2 A_StartSound("weapons/rockopen2",8);
	unload2:
		#### B 0 A_JumpIf(invoker.weaponstatus[RLS_MAG]<1&&invoker.weaponstatus[RLS_CHAMBER]<1,"unloadend");
		#### G 0 A_OverLay(-26,"HandRocketUnload");
		#### G 5;
		#### G 10 offset(-2,2) A_StartSound("weapons/rockreload",8,CHANF_OVERLAP);
		#### G 9 offset(-3,3){
			if(!invoker.weaponstatus[RLS_CHAMBER]){
				invoker.weaponstatus[RLS_MAG]--;
			}else{
				invoker.weaponstatus[RLS_CHAMBER]=0;
			}
			if(
				A_JumpIfInventory("HDRocketAmmo",0,"null")
				||(!PressingUnload()&&!PressingReload())
			){
				A_SpawnItemEx(
					"HDRocketAmmo",10,0,height-16,vel.x,vel.y,vel.z+2,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
				);
			}else{
				A_StartSound("weapons/pocket",9);
				A_GiveInventory("HDRocketAmmo",1);
			}
		}
		#### G 5 offset(-1,1) A_StartSound("weapons/rockopen2",8);
		#### G 4 {
			if(health<40)A_SetTics(4);
			A_StartSound("weapons/rockopen",8,CHANF_OVERLAP);
		}
		#### B 0 A_JumpIf(!pressingunload(),"unloadend");
		goto unload2;
	HandRocketUnLoad://Mag
		BFHA D 1 A_OverLayOffset(-26, -100, 40);
		BFHA D 1 A_OverLayOffset(-26, -120, 30, WOF_INTERPOLATE);
		BFHA D 1 A_OverLayOffset(-26, -130, 20, WOF_INTERPOLATE);
		BFHA D 2 A_OverLayOffset(-26, -140, 9, WOF_INTERPOLATE);
		BFHA D 2 A_OverLayOffset(-26, -160, 0, WOF_INTERPOLATE);
		SHHA D 2 A_OverLayOffset(-26, -90, -2);
		SHHA D 2 A_OverLayOffset(-26, -90, -3, WOF_INTERPOLATE);
		SHHA D 2 A_OverLayOffset(-26, -82, -2, WOF_INTERPOLATE);
		SHHA D 2 A_OverLayOffset(-26, -70, 0, WOF_INTERPOLATE);
		SHHA D### 1 A_OverLayOffset(-26, 9, 10, WOF_ADD);
		Stop;
	unloadend:
		#### F 2;
		#### # 0 A_OverlayFlags(PSP_WEAPON, PSPF_INTERPOLATE, 0);
		#### E 2;
		#### D 2;
		#### C 2;
		#### B 2;
		#### A 2;
		MISG A 0;
		goto nope;



	nomagreload:
		MISR A 2 offset(0,20){
			int ch=invoker.weaponstatus[RLS_CHAMBER];
			if(
				ch>0
				&&pressingreload()
			)setweaponstate("nope");
			else if(
				ch<=0
				&&pressingunload()
			)setweaponstate("nope");
			else if(
				ch>=2
			)setweaponstate("altreload");
			else if(
				ch<1
				&&!countinv("HDRocketAmmo")
			)setweaponstate("nope");
		}
		#### C 2 offset(0,40);
		#### E 2 offset(20,60);
		#### H 2 offset(40,60);
		#### I 2 offset(30,40) A_StartSound("weapons/rockopen",8);
		#### J 2 offset(20,30);
		#### K 4 offset(10,3);
		#### K 10 offset(10,3) A_StartSound("weapons/rockopen2",8);
		#### K 4 offset(10,3) A_StartSound("weapons/pocket",8);
		#### B 0{
			if(health<40)A_SetTics(7);
			else if(health<60)A_SetTics(3);
		}
		#### A 0 A_OverLay(-26, "HandRocket");
		#### K 6 offset(10,3);
		#### K 6 offset(10,3);
		#### K 5 offset(10,3){
			int chh=invoker.weaponstatus[RLS_CHAMBER];
			if(chh<1){
				setweaponstate("loadrocketintoemptychamber");
				return;
			}else{
				invoker.weaponstatus[RLS_CHAMBER]=0;
				if(A_JumpIfInventory("HDRocketAmmo",0,"null"))A_SpawnItemEx(
					"HDRocketAmmo",10,0,10,vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
				);else A_GiveInventory("HDRocketAmmo",1);
			}
		}goto altreloadend;
	HandRocket:
		---- A 0 A_Jumpif(invoker.weaponstatus[RLS_CHAMBER]==1,"HandremoveRock");
		SHHA D 1 A_OverlayOffset(-26, 20, 20);
		SHHA D 2 A_OverlayOffset(-26, 10, 10, WOF_INTERPOLATE);
		#### D 2 A_OverlayOffset(-26, 0, -10, WOF_INTERPOLATE);
		#### D 2 A_OverlayOffset(-26, -10, -20, WOF_INTERPOLATE);
		#### D 2 A_OverlayOffset(-26, -20, -15, WOF_INTERPOLATE);
		#### D 2 A_OverlayOffset(-26, -33,-10, WOF_INTERPOLATE);
		#### D 4 A_OverlayOffset(-26, -40,-0, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -80, -5);
		BFHA D 2 A_OverlayOffset(-26, -70, 0, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -60, 12, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -50, 20, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -40, 32, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -30, 44, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -20, 56, WOF_INTERPOLATE);
		BFHA D 2 A_OverlayOffset(-26, -10, 68, WOF_INTERPOLATE);
		Stop;
	loadrocketintoemptychamber:
		#### K 3 offset(10,3);
		#### K 2 offset(10,3){
			if(!countinv("HDRocketAmmo"))return;
			invoker.weaponstatus[RLS_CHAMBER]=1;
			A_SetHelpText();
			A_TakeInventory("HDRocketAmmo",1,TIF_NOTAKEINFINITE);
		}goto altreloadend;
		
	CheckMag:
		#### B 2 A_Jumpif(!PressingReload(), "Nope");
		---- B 0 {if(invoker.weaponstatus[RLS_MAG]>0)A_Overlay(102, "Dumb");
			if(invoker.weaponstatus[RLS_CHAMBER]>0)A_Overlay(103, "Dumb2");}
		Loop;
	Dumb:
		STUP O 5 {A_OverLayOffset(102,29,24);A_OverlayPivot(OverlayId(), 1, .5);Float Mag = invoker.weaponstatus[SMGS_MAG];A_OverlayScale(OverlayId(), Mag/5, 1);}
		Stop;
	Dumb2:
		STUP C 0 A_JumpIf(invoker.weaponstatus[RLS_CHAMBER]>1, 2);
		STUP Q 0;
		STUP # 5 A_OverLayOffset(OverlayId(), 30, 23);
		Stop;

	spawn:
		TNT1 A 0 nodelay A_JumpIf(invoker.weaponstatus[0]&RLF_NOMAG,2);
		LAUN A -1;
		LAUN B -1;
		stop;
	}
	
	/*override void InitializeWepStats(bool idfa){
		weaponstatus[RLS_MAG]=5;
		if(idfa){
			weaponstatus[RLS_CHAMBER]=max(1,weaponstatus[RLS_CHAMBER]);
		}else{
			weaponstatus[0]=0;
			weaponstatus[RLS_CHAMBER]=1;
			airburst=0;
			if(!owner){
				weaponstatus[0]+=random(0,1)*RLF_GRENADEMODE;
				if(random(0,3))weaponstatus[0]|=RLF_NOMAG;
			}
		}
	}*/
	
	override void loadoutconfigure(string input){
		if(Owner && Owner.FindInventory("HDRL"))
		{
			Let inv = HDWeapon(Owner.FindInventory("HDRL"));
			weaponstatus[RLS_STATUS]=inv.weaponstatus[RLS_STATUS];
			weaponstatus[RLS_MAG]=inv.weaponstatus[RLS_MAG];
			weaponstatus[RLS_CHAMBER]=inv.weaponstatus[RLS_CHAMBER];
			weaponstatus[RLS_AIRBURST]=inv.weaponstatus[RLS_AIRBURST];
			weaponstatus[RLS_SMOKE]=inv.weaponstatus[RLS_SMOKE];
			weaponstatus[RLS_DOT]=inv.weaponstatus[RLS_DOT];
			weaponstatus[RLS_RECOIL]=inv.weaponstatus[RLS_RECOIL];
			weaponstatus[0]=inv.WeaponStatus[0];
			inv.Destroy();
			Return;
		}
		int heatloaded=getloadoutvar(input,"heat",1);
		if(!heatloaded)weaponstatus[RLS_CHAMBER]=1;
		else if(heatloaded>0)weaponstatus[RLS_CHAMBER]=2;

		int xhdot=getloadoutvar(input,"dot",3);
		if(xhdot>=0)weaponstatus[RLS_DOT]=xhdot;

		//if no heat, evaluate grenade mode
		if(weaponstatus[RLS_CHAMBER]!=2){
			weaponstatus[RLS_CHAMBER]=1;
			int grenademode=getloadoutvar(input,"grenade",1);
			if(!grenademode)weaponstatus[0]&=~RLF_GRENADEMODE;
			else if(grenademode>0)weaponstatus[0]|=RLF_GRENADEMODE;
		}
		//singleshot
		int nomag=getloadoutvar(input,"nomag",1);
		if(nomag>0){
			weaponstatus[0]|=RLF_NOMAG;
			if(nomag>1){
				weaponstatus[RLS_CHAMBER]=2;
				weaponstatus[0]&=~RLF_GRENADEMODE;
			}
		}else weaponstatus[0]&=~RLF_NOMAG;
	}
	Override Void Tick()
	{
		Super.Tick();
		if(Owner)Return;
		HDWeapon a = HDWeapon(Spawn("HDRL", pos));
		if(a)
		{
			a.Angle = Angle;
			a.Pitch = Pitch;
			a.Vel = Vel;
			For(int i=0;i<HDWEP_STATUSSLOTS;i++)a.weaponstatus[i]=weaponstatus[i];
			Destroy();
		}
	}
}
enum NSHrocketstatus{RLF_SAFETY=8,};