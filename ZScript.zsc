Version "4.10"

#include "ZScript/NotSoHideous/Revolver.zsc"
#include "ZScript/NotSoHideous/SMG.zsc"
#include "ZScript/NotSoHideous/Hunter.zsc"
#include "ZScript/NotSoHideous/Slayer.zsc"
#include "ZScript/NotSoHideous/ZM66.zsc"
#include "ZScript/NotSoHideous/Liberator.zsc"
#include "ZScript/NotSoHideous/Vulcanette.zsc"
#include "ZScript/NotSoHideous/Launcher.zsc"
#include "ZScript/NotSoHideous/ThunderBuster.zsc"
#include "ZScript/NotSoHideous/BFG.zsc"
#include "ZScript/NotSoHideous/BossRifle.zsc"
#include "ZScript/NotSoHideous/Medikit.zsc"
#include "ZScript/NotSoHideous/Injectors.zsc"
#include "ZScript/NotSoHideous/SelfBandage.zsc"
#include "ZScript/NotSoHideous/Grenade.zsc"
#include "ZScript/NotSoHideous/Tripwires.zsc"

#include "ZScript/NotSoHideous/PlayerAnims.zsc"

#include "ZScript/NotSoHideous/Pistol.zsc"//Contains event handler code, so loaded the last

Class MRHD_WeapAnimsHandler : EventHandler
{
	Override Void PlayerSpawned(PlayerEvent e)
	{
		players[e.PlayerNumber].mo.GiveInventory("MRHD_WeapAnimsReplacer", 1);
		MRHD_WeapAnimsReplacer(players[e.PlayerNumber].mo.FindInventory("MRHD_WeapAnimsReplacer")).Numb = e.PlayerNumber * 1.5;
		String PlrAnims = "MRHDPA_MainToken";
		if(!((Class<Actor>)(PlrAnims)))players[e.PlayerNumber].mo.GiveInventory("MRHD_CrawlAnimation", 1);
	}
		
	String MRHD_GetKeyBind(int keyB)
	{
		Int Key1, Key2;
		String Bind;
		Switch(keyB)
		{
			Case 0://Fire
				[Key1, Key2] = Bindings.GetKeysForCommand("+attack");
				Break;
			Case 1://Alt fire
				[Key1, Key2] = Bindings.GetKeysForCommand("+AltAttack");
				Break;
			Case 2://Try to guess yourself
				[Key1, Key2] = Bindings.GetKeysForCommand("+reload");
				Break;
			Case 3://Don't know what is this honestly
				[Key1, Key2] = Bindings.GetKeysForCommand("+zoom");
				Break;
			Case 4://Alt reload
				[Key1, Key2] = Bindings.GetKeysForCommand("+user1");
				Break;
			Case 5://Fire mode
				[Key1, Key2] = Bindings.GetKeysForCommand("+user2");
				Break;
			Case 6://Mag manager
				[Key1, Key2] = Bindings.GetKeysForCommand("+user3");
				Break;
			Case 7://Unload
				[Key1, Key2] = Bindings.GetKeysForCommand("+user4");
				Break;
			Case 8://Sprint (duh)
				[Key1, Key2] = Bindings.GetKeysForCommand("+speed");
				Break;
			Case 9:
				[Key1, Key2] = Bindings.GetKeysForCommand("+use");
				Break;
			Case 10:
				[Key1, Key2] = Bindings.GetKeysForCommand("weapdrop");
				Break;
			Case 10:
				[Key1, Key2] = Bindings.GetKeysForCommand("hd_dropone");
				Break;
		}
		Bind = Bindings.NameKeys(Key1, Key2);
		
		if(Bind.IndexOf("\c")>-1)Bind = Bind.Mid(0, Bind.IndexOf("\c"));
		if(Bind.IndexOf("Mouse1")>-1)Bind = StringTable.Localize("$MRNSH_HelpBindMouseL");
		else if(Bind.IndexOf("Mouse2")>-1)Bind = StringTable.Localize("$MRNSH_HelpBindMouseR");
		else if(Bind.IndexOf("Mouse3")>-1)Bind = StringTable.Localize("$MRNSH_HelpBindMouseMid");
		if(Bind == "")
		{
			Switch(keyB)
			{
				Case 0:Bind = StringTable.Localize("$WPHFIRE");Break;
				Case 1:Bind = StringTable.Localize("$WPHALTFIRE");Break;
				Case 2:Bind = StringTable.Localize("$WPHRELOAD");Break;
				Case 3:Bind = StringTable.Localize("$WPHZOOM");Break;
				Case 4:Bind = StringTable.Localize("$WPHAREL");Break;
				Case 5:Bind = StringTable.Localize("$WPHFMODE");Break;
				Case 6:Bind = StringTable.Localize("$WPHUSER3");Break;
				Case 7:Bind = StringTable.Localize("$WPHUNLOAD");Break;
				Case 8:Bind = StringTable.Localize("$WPHSPEED");Break;
				Case 9:Bind = StringTable.Localize("$WPHUSE");Break;
				Case 10:Bind = StringTable.Localize("$WPHDROP");Break;
				Case 11:Bind = StringTable.Localize("$WPHDROPO");Break;
			}
		}
		Return WEPHELP_BTCOL.."["..Bind.."]"..WEPHELP_RGCOL;
	}
	
	Void MRHD_GetWeaponKeyBinds(HDWeapon weap)
	{
		weap.LWPHELP_FIRE = MRHD_GetKeyBind(0);
		weap.LWPHELP_ALTFIRE = MRHD_GetKeyBind(1);
		weap.LWPHELP_RELOAD = MRHD_GetKeyBind(2);
		weap.LWPHELP_ZOOM = MRHD_GetKeyBind(3);
		weap.LWPHELP_ALTRELOAD = MRHD_GetKeyBind(4);
		weap.LWPHELP_FIREMODE = MRHD_GetKeyBind(5);
		weap.LWPHELP_USER3 = MRHD_GetKeyBind(6);
		weap.LWPHELP_UNLOAD = MRHD_GetKeyBind(7);
		weap.LWPHELP_SPEED = MRHD_GetKeyBind(8);
		weap.LWPHELP_USE = MRHD_GetKeyBind(9);
		weap.LWPHELP_DROP = MRHD_GetKeyBind(10);
		weap.LWPHELP_DROPONE = MRHD_GetKeyBind(11);
		
		weap.LWPHELP_FIRESHOOT=weap.LWPHELP_FIRE..StringTable.Localize("$WPHSHT");
		weap.LWPHELP_RELOADRELOAD=weap.LWPHELP_RELOAD..StringTable.Localize("$WPHREL");
		weap.LWPHELP_UNLOADUNLOAD=weap.LWPHELP_UNLOAD..StringTable.Localize("$WPHUNL");
		weap.LWPHELP_MAGMANAGER=weap.LWPHELP_USER3..StringTable.Localize("$WPHMMAN");
		weap.LWPHELP_INJECTOR=weap.LWPHELP_FIRE..StringTable.Localize("$WPHUSEONY")..weap.LWPHELP_ALTFIRE..StringTable.Localize("$WPHUSEONS");
		
		weap.LWPHELP_UPDOWN=WEPHELP_BTCOL..StringTable.Localize("$WPHMLOOK")..WEPHELP_RGCOL;
	}
}

Class MRHD_WeapAnimsReplacer : Inventory
{
	Default{inventory.MaxAmount 1;+inventory.UNTOSSABLE+inventory.UNDROPPABLE}
	Static Const String Weaps [] = {"HDMedikitter", "PortableStimpack", "SelfBandage", "HDPistol", "HDRevolver", "HDSMG", "Hunter", "Slayer",
		"ZM66AssaultRifle", "LiberatorRifle", "Vulcanette", "HDRL", "ThunderBuster", "BFG9K", "BossRifle", "HDFragGrenades", "TripwireFrag"};
	int Numb;
	bool IsImmersive()
	{
		String CheckS = "ImmersiveSlayer";
		Class<Actor> Check = CheckS;
		Return Check;
	}
	
	Override Void DoEffect()
	{
		if(Owner.Player.ReadyWeapon is "HDIncapWeapon")
		{
			if(Owner.FindInventory("NSHPortableStimpack"))
			{
				let spw=spareweapons(Owner.findinventory("spareweapons"));
				if(spw){
				for(int i=0;i<spw.weapontype.size();i++){
				if(spw.weapontype[i]~=="NSHPortableStimpack")spw.weapontype.Delete(i);
				}}
				HDWeapon mdk;
				For(int i=0;i<HDWeapon(Owner.FindInventory("NSHPortableStimpack")).ActualAmount;i++)
				{
					mdk=HDWeapon(spawn("PortableStimpack",Owner.pos));
					mdk.actualpickup(Owner,true);
				}
				if(owner.player.mo.invsel is "NSHPortableStimpack")owner.player.mo.invsel = mdk;
				Owner.RemoveInventory(Owner.FindInventory("NSHPortableStimpack"));
			}
			Return;
		}
		
		if(owner.player.mo.invsel && owner.player.mo.invsel.GetClassName() == "PortableMedikit" && !Owner.FindInventory("HDMedikitter")
		&& Owner.FindInventory("NSHMedikitter"))
		{
			Owner.GiveInventory("HDMedikitter", 1);
			Owner.FindInventory("HDMedikitter").bInvBar = false;
		}
		else if(
		(!Owner.FindInventory("NSHMedikitter") || !owner.player.mo.invsel || 
		(owner.player.mo.invsel && owner.player.mo.invsel.GetClassName() != "PortableMedikit"))&& 
		Owner.FindInventory("HDMedikitter") && !Owner.FindInventory("HDMedikitter").bInvBar)
			Owner.RemoveInventory(Owner.FindInventory("HDMedikitter"));
		
		if(
		Owner.player.ReadyWeapon&&(
		Owner.player.PendingWeapon.GetClassName() == "HDMedikitter"
		|| Owner.player.ReadyWeapon.GetClassName() == "HDMedikitter"))Owner.A_SelectWeapon("NSHMedikitter");
		
		
		if((Numb + GetAge())%CVar.GetCVar("mrnsha_delay", owner.Player).GetInt()!=0 &&
			!Owner.FindInventory("HDMedikitter") && !Owner.FindInventory("PortableStimpack"))Return;
			
		For(int i=0;i<Weaps.Size(); i++)
		{
			if(Owner.FindInventory(Weaps[i]))
			{
				if(Weaps[i] == "HDMedikitter" && !Owner.FindInventory("HDMedikitter").bInvBar)
				{
					if(owner.player.mo.invsel.GetClassName() == "PortableMedikit")Continue;
					else {Owner.RemoveInventory(Owner.FindInventory(Weaps[i]));Continue;}
				}
				String Select="";
				String Weap = Weaps[i];
				if(/*(Weaps[i] == "Hunter"||*/Weaps[i] == "Slayer" && IsImmersive())
				{
					Weap = "Immersive"..Weap;
				}
				else if(Weap.IndexOf("HD")>-1)Weap.Replace("HD", "NSH");
				else Weap = "NSH"..Weap;
				if((Owner.Player.ReadyWeapon && Owner.Player.ReadyWeapon.GetClassName() == Weaps[i])||
					Owner.Player.PendingWeapon.GetClassName() == Weaps[i])Select=Weap;
				
				let spw=spareweapons(Owner.findinventory("spareweapons"));
				int amt=1;
				bool GotOne = false;
				if(Owner.FindInventory(Weap))GotOne = true;
				if(GotOne && (Weaps[i] == "SelfBandage"|| Weaps[i] == "HDFragGrenades")){Owner.FindInventory(Weaps[i]).Destroy();Continue;}
				
				hdweapon actualweapon=hdweapon(spawn(Weap,Owner.pos));
				
				if(NSHPortableStimpack(ActualWeapon))NSHPortableStimpack(ActualWeapon).FromMedikit = true;//Prevent stim given from medikit from dup
				
				if(GotOne){
					For(int st=0;st<HDWEP_STATUSSLOTS;st++)
						ActualWeapon.Weaponstatus[st] = HDWeapon(Owner.FindInventory(Weaps[i])).WeaponStatus[st];
					ActualWeapon.AddSpareWeapon(owner);
					Owner.RemoveInventory(Owner.FindInventory(Weaps[i]));
				}
				else actualweapon.attachtoowner(owner);
				actualweapon.loadoutconfigure("");
				if(i<2)
				{
					if(GotOne)actualweapon.AddSpareWeaponRegular(Owner);
					if(owner.player.mo.invsel.GetClassName() == Weaps[i])owner.player.mo.invsel = actualWeapon;
					if(i<1)Select = Weap;
				}
				if(spw){
					for(int i1=0;i1<spw.weapontype.size();i1++){
						if(spw.weapontype[i1]~==Weaps[i]){spw.weapontype[i1]=Weap; amt++;}
					}
				}
				actualweapon.ActualAmount = amt;
				if(Select!=""){Owner.A_SelectWeapon(Select);}//if(Select ~== "NSHMedikitter")NSHMedikitter(actualweapon).SelectU = true;}
				if(NSHPortableStimpack(ActualWeapon))NSHPortableStimpack(ActualWeapon).FromMedikit = false;//If stim passed 'AttachToOwner()', it wasn't given from a medikit
			}
		}
	}
}

Class NSHA_SmokeContainer: Object play
{
	Vector3 Vel;
}