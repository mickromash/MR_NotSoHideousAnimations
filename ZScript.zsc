Version "4.10"

#include "ZScript/NotSoHideous/Revolver.zsc"
#include "ZScript/NotSoHideous/SMG.zsc"
#include "ZScript/NotSoHideous/Hunter.zsc"
#include "ZScript/NotSoHideous/Slayer.zsc"
#include "ZScript/NotSoHideous/ZM66.zsc"
#include "ZScript/NotSoHideous/Liberator.zsc"
#include "ZScript/NotSoHideous/Vulcanette.zsc"
#include "ZScript/NotSoHideous/Launcher.zsc"
#include "ZScript/NotSoHideous/ThunderBuster.zsc"
#include "ZScript/NotSoHideous/BFG.zsc"
#include "ZScript/NotSoHideous/BossRifle.zsc"
#include "ZScript/NotSoHideous/Medikit.zsc"
#include "ZScript/NotSoHideous/Injectors.zsc"
#include "ZScript/NotSoHideous/SelfBandage.zsc"
#include "ZScript/NotSoHideous/Grenade.zsc"
#include "ZScript/NotSoHideous/Tripwires.zsc"

//#include "ZScript/NotSoHideous/Incap.zsc"

#include "ZScript/NotSoHideous/Pistol.zsc"//Contains event handler code, so loaded last

Class MRHD_WeapAnimsHandler : EventHandler
{
	Override Void PlayerSpawned(PlayerEvent e)
	{
		players[e.PlayerNumber].mo.GiveInventory("MRHD_WeapAnimsReplacer", 1);
		MRHD_WeapAnimsReplacer(players[e.PlayerNumber].mo.FindInventory("MRHD_WeapAnimsReplacer")).Numb = e.PlayerNumber * 1.5;
		String PlrAnims = "MRHDPA_MainToken";
		if(!((Class<Actor>)(PlrAnims)))players[e.PlayerNumber].mo.GiveInventory("MRHD_CrawlAnimation", 1);
	}
		
	String MRHD_GetKeyBind(int keyB)
	{
		Int Key1, Key2;
		String Bind;
		Switch(keyB)
		{
			Case 0://Fire
				[Key1, Key2] = Bindings.GetKeysForCommand("+attack");
				Break;
			Case 1://Alt fire
				[Key1, Key2] = Bindings.GetKeysForCommand("+AltAttack");
				Break;
			Case 2://Try to guess yourself
				[Key1, Key2] = Bindings.GetKeysForCommand("+reload");
				Break;
			Case 3://Don't know what is this honestly
				[Key1, Key2] = Bindings.GetKeysForCommand("+zoom");
				Break;
			Case 4://Alt reload
				[Key1, Key2] = Bindings.GetKeysForCommand("+user1");
				Break;
			Case 5://Fire mode
				[Key1, Key2] = Bindings.GetKeysForCommand("+user2");
				Break;
			Case 6://Mag manager
				[Key1, Key2] = Bindings.GetKeysForCommand("+user3");
				Break;
			Case 7://Unload
				[Key1, Key2] = Bindings.GetKeysForCommand("+user4");
				Break;
			Case 8://Sprint (duh)
				[Key1, Key2] = Bindings.GetKeysForCommand("+speed");
				Break;
			Case 9:
				[Key1, Key2] = Bindings.GetKeysForCommand("+use");
				Break;
			Case 10:
				[Key1, Key2] = Bindings.GetKeysForCommand("weapdrop");
				Break;
			Case 10:
				[Key1, Key2] = Bindings.GetKeysForCommand("hd_dropone");
				Break;
		}
		Bind = Bindings.NameKeys(Key1, Key2);
		
		if(Bind.IndexOf(", ")>-1)Bind = Bind.Mid(0, Bind.IndexOf(", "));
		if(Bind.IndexOf("Mouse1")>-1)Bind = StringTable.Localize("$MRNSH_HelpBindMouseL");
		else if(Bind.IndexOf("Mouse2")>-1)Bind = StringTable.Localize("$MRNSH_HelpBindMouseR");
		else if(Bind.IndexOf("Mouse3")>-1)Bind = StringTable.Localize("$MRNSH_HelpBindMouseMid");
		if(Bind == "")
		{
			Switch(keyB)
			{
				//Case 0:Bind = StringTable.Localize("$WPHFIRE");Break;
				Case 1:Bind = StringTable.Localize("$WPHALTFIRE");Break;
				Case 2:Bind = StringTable.Localize("$WPHRELOAD");Break;
				Case 3:Bind = StringTable.Localize("$WPHZOOM");Break;
				Case 4:Bind = StringTable.Localize("$WPHAREL");Break;
				Case 5:Bind = StringTable.Localize("$WPHFMODE");Break;
				Case 6:Bind = StringTable.Localize("$WPHUSER3");Break;
				Case 7:Bind = StringTable.Localize("$WPHUNLOAD");Break;
				Case 8:Bind = StringTable.Localize("$WPHSPEED");Break;
				Case 9:Bind = StringTable.Localize("$WPHUSE");Break;
				Case 10:Bind = StringTable.Localize("$WPHDROP");Break;
				Case 11:Bind = StringTable.Localize("$WPHDROPO");Break;
			}
		}
							
		Return WEPHELP_BTCOL..Bind..WEPHELP_RGCOL;
	}
	
	Void MRHD_GetWeaponKeyBinds(HDWeapon weap)
	{
		weap.LWPHELP_FIRE = MRHD_GetKeyBind(0);
		weap.LWPHELP_ALTFIRE = MRHD_GetKeyBind(1);
		weap.LWPHELP_RELOAD = MRHD_GetKeyBind(2);
		weap.LWPHELP_ZOOM = MRHD_GetKeyBind(3);
		weap.LWPHELP_ALTRELOAD = MRHD_GetKeyBind(4);
		weap.LWPHELP_FIREMODE = MRHD_GetKeyBind(5);
		weap.LWPHELP_USER3 = MRHD_GetKeyBind(6);
		weap.LWPHELP_UNLOAD = MRHD_GetKeyBind(7);
		weap.LWPHELP_SPEED = MRHD_GetKeyBind(8);
		weap.LWPHELP_USE = MRHD_GetKeyBind(9);
		weap.LWPHELP_DROP = MRHD_GetKeyBind(10);
		weap.LWPHELP_DROPONE = MRHD_GetKeyBind(11);
		
		weap.LWPHELP_FIRESHOOT=weap.LWPHELP_FIRE..StringTable.Localize("$WPHSHT");
		weap.LWPHELP_RELOADRELOAD=weap.LWPHELP_RELOAD..StringTable.Localize("$WPHREL");
		weap.LWPHELP_UNLOADUNLOAD=weap.LWPHELP_UNLOAD..StringTable.Localize("$WPHUNL");
		weap.LWPHELP_MAGMANAGER=weap.LWPHELP_USER3..StringTable.Localize("$WPHMMAN");
		weap.LWPHELP_INJECTOR=weap.LWPHELP_FIRE..StringTable.Localize("$WPHUSEONY")..weap.LWPHELP_ALTFIRE..StringTable.Localize("$WPHUSEONS");
		
		weap.LWPHELP_UPDOWN=WEPHELP_BTCOL..StringTable.Localize("$WPHMLOOK")..WEPHELP_RGCOL;
	}
}

Class MRHD_WeapAnimsReplacer : Inventory
{
	Default{inventory.MaxAmount 1;+inventory.UNTOSSABLE+inventory.UNDROPPABLE}
	Static Const String Weaps [] = {"HDMedikitter", "PortableStimpack", "SelfBandage", "HDPistol", "HDRevolver", "HDSMG", "Hunter", "Slayer",
	"ZM66AssaultRifle", "LiberatorRifle", "Vulcanette", "HDRL", "ThunderBuster", "BFG9K", "BossRifle", "HDFragGrenades", "TripwireFrag"};
	int Numb;
	bool IsImmersive()
	{
		String CheckS = "ImmersiveSlayer";
		Class<Actor> Check = CheckS;
		Return Check;
	}
	
	Override Void DoEffect()
	{
		if(Owner.Player.ReadyWeapon is "HDIncapWeapon")
		{
			if(Owner.FindInventory("NSHPortableStimpack"))
			{
				let spw=spareweapons(Owner.findinventory("spareweapons"));
				if(spw){
				for(int i=0;i<spw.weapontype.size();i++){
				if(spw.weapontype[i]~=="NSHPortableStimpack")spw.weapontype.Delete(i);
				}}
				HDWeapon mdk;
				For(int i=0;i<HDWeapon(Owner.FindInventory("NSHPortableStimpack")).ActualAmount;i++)
				{
					mdk=HDWeapon(spawn("PortableStimpack",Owner.pos));
					mdk.actualpickup(Owner,true);
				}
				if(owner.player.mo.invsel is "NSHPortableStimpack")owner.player.mo.invsel = mdk;
				Owner.RemoveInventory(Owner.FindInventory("NSHPortableStimpack"));
			}
			Return;
		}
		
		if(owner.player.mo.invsel && owner.player.mo.invsel.GetClassName() == "PortableMedikit" && !Owner.FindInventory("HDMedikitter")
		&& Owner.FindInventory("NSHMedikitter"))
		{
			Owner.GiveInventory("HDMedikitter", 1);
			Owner.FindInventory("HDMedikitter").bInvBar = false;
		}
		else if(
		(!Owner.FindInventory("NSHMedikitter") || !owner.player.mo.invsel || 
		(owner.player.mo.invsel && owner.player.mo.invsel.GetClassName() != "PortableMedikit"))&& 
		Owner.FindInventory("HDMedikitter") && !Owner.FindInventory("HDMedikitter").bInvBar)
			Owner.RemoveInventory(Owner.FindInventory("HDMedikitter"));
		
		if(
		Owner.player.ReadyWeapon&&(
		Owner.player.PendingWeapon.GetClassName() == "HDMedikitter"
		|| Owner.player.ReadyWeapon.GetClassName() == "HDMedikitter"))Owner.A_SelectWeapon("NSHMedikitter");
		
		
		if((Numb + GetAge())%CVar.GetCVar("mrnsha_delay", owner.Player).GetInt()!=0 &&
			!Owner.FindInventory("HDMedikitter") && !Owner.FindInventory("PortableStimpack"))Return;
			
		For(int i=0;i<Weaps.Size(); i++)
		{
			if(Owner.FindInventory(Weaps[i]))
			{
				if(Weaps[i] == "HDMedikitter" && !Owner.FindInventory("HDMedikitter").bInvBar)
				{
					if(owner.player.mo.invsel.GetClassName() == "PortableMedikit")Continue;
					else {Owner.RemoveInventory(Owner.FindInventory(Weaps[i]));Continue;}
				}
				String Select="";
				String Weap = Weaps[i];
				if((Weaps[i] == "Hunter"||Weaps[i] == "Slayer") && IsImmersive())
				{
					Weap = "Immersive"..Weap;
				}
				else if(Weap.IndexOf("HD")>-1)Weap.Replace("HD", "NSH");
				else Weap = "NSH"..Weap;
				if(Owner.Player.ReadyWeapon && Owner.Player.ReadyWeapon.GetClassName() == Weaps[i])Select=Weap;
				
				let spw=spareweapons(Owner.findinventory("spareweapons"));
				int amt=1;
				bool GotOne = false;
				if(Owner.FindInventory(Weap))GotOne = true;
				if(GotOne && (Weaps[i] == "SelfBandage"|| Weaps[i] == "HDFragGrenades")){Owner.FindInventory(Weaps[i]).Destroy();Continue;}
				
				hdweapon actualweapon=hdweapon(spawn(Weap,Owner.pos));
				
				if(NSHPortableStimpack(ActualWeapon))NSHPortableStimpack(ActualWeapon).FromMedikit = true;//Prevent stim given from medikit dup
				
				if(GotOne){
					For(int st=0;st<HDWEP_STATUSSLOTS;st++)
						ActualWeapon.Weaponstatus[st] = HDWeapon(Owner.FindInventory(Weaps[i])).WeaponStatus[st];
					ActualWeapon.AddSpareWeapon(owner);
					Owner.RemoveInventory(Owner.FindInventory(Weaps[i]));
				}
				else actualweapon.attachtoowner(owner);
				actualweapon.loadoutconfigure("");
				if(i<2)
				{
					if(GotOne)actualweapon.AddSpareWeaponRegular(Owner);
					if(owner.player.mo.invsel.GetClassName() == Weaps[i])owner.player.mo.invsel = actualWeapon;
					if(i<1)Select = Weap;
				}
				if(spw){
					for(int i1=0;i1<spw.weapontype.size();i1++){
						if(spw.weapontype[i1]~==Weaps[i]){spw.weapontype[i1]=Weap; amt++;}
					}
				}
				actualweapon.ActualAmount = amt;
				if(Select!="")Owner.A_SelectWeapon(Select);
				if(NSHPortableStimpack(ActualWeapon))NSHPortableStimpack(ActualWeapon).FromMedikit = false;//If stim passed 'AttachToOwner()', it wasn't given from medikit
			}
		}
	}
}

Class MRHD_CrawlAnimation: CustomInventory
{
	Default{Inventory.MaxAmount 1;+INVENTORY.UNDROPPABLE+INVENTORY.UNTOSSABLE-INVENTORY.AUTOACTIVATE}
	
	Bool RightCrawl, LeftFar, Crawling;
	LinearValueInterpolator Yaw;
	Int YawCool, PrevRol, Grab;
	Bool GrabBig;
	Float PitchToGrab, AngleToGrab, GrabOfst;
	Override Void Tick()
	{
		Super.Tick();
		
		HDPlayerPawn Plr = HDPlayerPawn(Owner);
		if(!Owner){Destroy();Return;}
		
		CheckCrawl(Plr);
		CheckGrab(Plr);
		
	}
	
	Void CheckCrawl(HDPlayerPawn Plr)
	{
		if(!Plr.incapacitated&&Plr.Health>0){Crawling=False;Return;}

		if (!Yaw)
			Yaw = LinearValueInterpolator.Create(Plr.Player.Cmd.Yaw*0.01, 20);
		else
		{
			if(
				Abs(Plr.Player.Cmd.Yaw)*0.01-Abs(Yaw.GetValue())>15
				){Yaw.mMaxchange = 15;YawCool = 5;}
			else
			{
				Float FERG = Yaw.GetValue()*0.5;
				Yaw.mMaxchange = 2;
			}
			
			Yaw.Update(Plr.Player.Cmd.Yaw*0.01);
		}
		if(Plr.Health<1)Yaw.Reset(0);
		Crawling = True;
		if(Plr.Player.ReadyWeapon is 'HDIncapWeapon' &&
			HDIncapWeapon(Plr.Player.ReadyWeapon).inventorytype != Null &&
			!(HDIncapWeapon(Plr.Player.ReadyWeapon).inventorytype is 'HDIncapWeapon'))RightCrawl=false;
		else RightCrawl = True;
	}
	
	Void CheckGrab(HDPlayerPawn Plr)
	{
		if(!Plr.Player.ReadyWeapon || !HDWeaponGrabber(Plr.Player.ReadyWeapon)){Grab=0;Return;}
		
		if(!(Plr.Player.Cmd.Buttons&BT_USER2)){if(Grab>0)Grab-=Min(Grab, 3);Return;}
		
		Let Hand = HDWeaponGrabber(Plr.Player.ReadyWeapon);
		Let Grabbin = HDWeaponGrabber(Plr.Player.ReadyWeapon).grabbed;
		
		if(!Grabbin){if(Grab>0)Grab-=Min(Grab, 3);Return;}
		
		TextureID Sprite = Grabbin.CurState.GetSpriteTexture(0);
		Float Height = Texman.CheckRealHeight(Sprite);
		Vector2 Width = Texman.GetScaledSize(Sprite);
		
		GrabBig = Height*Grabbin.Scale.Y>35||Grabbin.bIsMonster||Width.X*Grabbin.Scale.X>30||Grabbin.Mass>110;
		GrabOfst = Width.X*Grabbin.Scale.X*.9+30-Plr.Distance3D(Grabbin);
		
		Grab+=3;
		if(Grab>15)Grab = 15;
		
		PitchToGrab = Plr.PitchTo(Grabbin, Plr.Player.ViewZ-Plr.Pos.Z, Grabbin.Height*.5);
		AngleToGrab = Plr.AngleTo(Grabbin);
	}
	
	States
	{
	  Use:TNT1 A 0;Fail;
	  Pickup:
		TNT1 A 0{A_Overlay(2289, "Crawl");A_Overlay(2290, "CrawlR");A_Overlay(2288, "Grab");return true;}
		Stop;
		
		Grab:
			TNT1 A 1 A_JumpIf(invoker.Grab>0, "Grabbing");
			Loop;
			
		Grabbing:
			#### # 0 {if(invoker.GrabBig){A_Overlay(2287, "GrabbingRight");A_OverlayOffset(2287, -100, 100);A_OverlayPivot(2287, .5, .5);A_OverlayFlags(2287, PSPF_FLIP|PSPF_MIRROR, 1);}}
			PUNG T 1 {A_OverlayOffset(OverlayId(), -100, 100);A_OverlayPivot(OverlayID(), .5, .5);}
		GrabbingLoop:
			PUNG T 1{
				Float Steyte = invoker.Grab;
				Steyte/=15;
				Float OfstX = -50;
				if(invoker.GrabBig)OfstX = -60 - invoker.GrabOfst;
				A_OverlayOffset(OverlayID(), OfstX+50*Steyte+DeltaAngle(invoker.AngleToGrab, Angle)*1.5, 100-70*Steyte+(invoker.PitchToGrab-Pitch)*1.5-Min(0, DeltaAngle(invoker.AngleToGrab, Angle)), WOF_INTERPOLATE);
				A_OverlayRotate(OverlayID(), -(invoker.PitchToGrab-Pitch)*.25 + DeltaAngle(Angle, invoker.AngleToGrab)*.25, WOF_INTERPOLATE);
			}
			#### # 0 A_JumpIf(invoker.Grab<1, "Grab");
			Loop;
		
		GrabbingRight:
			PUNG T 1{
				Float Steyte = invoker.Grab;
				Steyte/=15;
				Float OfstX = -60 - invoker.GrabOfst;
				A_OverlayOffset(OverlayID(), OfstX+50*Steyte-DeltaAngle(invoker.AngleToGrab, Angle)*1.5, 100-70*Steyte+(invoker.PitchToGrab-Pitch)*1.5-Min(0, DeltaAngle(invoker.AngleToGrab, Angle)), WOF_INTERPOLATE);
				A_OverlayRotate(OverlayID(), -(invoker.PitchToGrab-Pitch)*.25 + DeltaAngle(Angle, invoker.AngleToGrab)*.25, WOF_INTERPOLATE);
			}
			#### # 0 A_JumpIf(invoker.Grab>0&&invoker.GrabBig, "GrabbingRight");
			Stop;
			
		
		Crawl:
			TNT1 A 1 A_JumpIf(invoker.Crawling, "Crawling");
			Loop;
			
		Crawling:
			HGRB G 0 A_Jumpif((Roll<0&&Pitch>40), 7);
			HGRB E 0 A_Jumpif((Roll<0), 6);
			HGRB F 0 A_JumpIf((Pitch>40&&Roll<7), 5);
			HGRB D 0 A_Jumpif((Roll<7), 4);
			HGRB A 0 A_JumpIf(Roll<12, 3);
			HGRB H 0 A_JumpIf(Roll>=14, 2);
			HGRB I 0;
			HGRB # 1 {
				A_OverlayFlags(OverlayId(), PSPF_ADDBOB|PSPF_ADDWEAPON, 1);
				A_OverlayPivotAlign(OverlayId(), PSPA_CENTER, PSPA_CENTER);
				Float Pit = 0;
				Float OrigPitch = Pitch;
				Float SprRot = 0;
				Float SprScal = 0;
				if(OrigPitch>40 && Roll>=0 && Roll<7){SprRot=7;SprScal = -0.1;}
				else if(OrigPitch>40 && Roll<0)SprRot = -7;
				if(OrigPitch>31){Pitch*=Pitch*0.03;Pit=(Pitch-31)*1.1;}
				Int HandDown = 0;
				if(Player.Cmd.Buttons&BT_ATTACK)HandDown = 400;
				if(Height>20)HandDown = 30 + (Height-16)*2;
				Float OrigRoll = Roll;
				if(Roll>0)
				{
					Float SprRot2, SprScal2;
					if(Roll>=12){SprRot = -10; SprScal2 = 0.1;}
					if(Roll<2||Roll>13)Roll*=1.5;
					if(OrigPitch>22)Pit=(Pitch-22)*1.1;
					A_OverlayRotate(OverlayId(), -35 + Roll*0.3 + SprRot, WOF_INTERPOLATE);
					A_OverlayOffset(OverlayId(), -30+invoker.Yaw.GetValue() - Roll*3.15 -Pit, (-Pitch)+30-Roll*2 + HandDown);
					A_OverlayScale(OverlayId(), 1 - Roll*.015 + SprScal2, 1 - Roll*.01 + SprScal2);
				}
				else
				{
					if((Roll<0&&Roll>-2)||(Roll<-13&&Roll>=-15))Roll*=1.1;
					if(OrigPitch>22)Pit=(Pitch-22)*1.1;
					A_OverlayRotate(OverlayId(), -35 + Roll + SprRot + HandDown*0.2);
					A_OverlayOffset(OverlayId(), -30+invoker.Yaw.GetValue()-Pit + HandDown*.75, (-Pitch)+30-Roll+HandDown);
					A_OverlayScale(OverlayId(), 1 + abs(Roll)*0.05 + SprScal - HandDown*0.002, 1 + abs(Roll)*.05 + SprScal - HandDown*0.002);
				}
				Roll=OrigRoll;
				Pitch = OrigPitch;
			}
		CrawlingLoop:
			HGRB G 0 A_Jumpif((Roll<0&&Pitch>40), 7);
			HGRB E 0 A_Jumpif((Roll<0), 6);
			HGRB F 0 A_JumpIf((Pitch>40&&Roll<7), 5);
			HGRB D 0 A_Jumpif((Roll<7), 4);
			HGRB A 0 A_JumpIf(Roll<12, 3);
			HGRB H 0 A_JumpIf(Roll>=14, 2);
			HGRB I 0;
			HGRB # 1 {
				A_OverlayFlags(OverlayId(), PSPF_ADDBOB|PSPF_ADDWEAPON, 1);
				A_OverlayPivotAlign(OverlayId(), PSPA_CENTER, PSPA_CENTER);
				Float Pit = 0;
				Float OrigPitch = Pitch;
				Float SprRot = 0;
				Float SprScal = 0;
				if(OrigPitch>40 && Roll>=0 && Roll<7){SprRot=7;SprScal = -0.1;}
				else if(OrigPitch>40 && Roll<0)SprRot = -7;
				if(OrigPitch>31){Pitch*=Pitch*0.03;Pit=(Pitch-31)*1.1;}
				Int HandDown = 0;
				if(Player.Cmd.Buttons&BT_ATTACK)HandDown = 400;
				if(Height>20)HandDown = 30 + (Height-16)*2;
				Float OrigRoll = Roll;
				if(Roll>0)
				{
					Float SprRot2, SprScal2;
					if(Roll>=12){SprRot = -10; SprScal2 = 0.1;}
					if(Roll<2||Roll>13)Roll*=1.5;
					if(OrigPitch>22)Pit=(Pitch-22)*1.1;
					A_OverlayRotate(OverlayId(), -35 + Roll*0.3 + SprRot, WOF_INTERPOLATE);
					A_OverlayOffset(OverlayId(), -30+invoker.Yaw.GetValue() - Roll*3.15 -Pit, (-Pitch)+30-Roll*2 + HandDown, WOF_INTERPOLATE);
					A_OverlayScale(OverlayId(), 1 - Roll*.015 + SprScal2, 1 - Roll*.01 + SprScal2, WOF_INTERPOLATE);
				}
				else
				{
					if((Roll<0&&Roll>-2)||(Roll<-13&&Roll>=-15))Roll*=1.1;
					if(OrigPitch>22)Pit=(Pitch-22)*1.1;
					A_OverlayRotate(OverlayId(), -35 + Roll + SprRot + HandDown*0.2, WOF_INTERPOLATE);
					A_OverlayOffset(OverlayId(), -30+invoker.Yaw.GetValue()-Pit + HandDown*.75, (-Pitch)+30-Roll+HandDown, WOF_INTERPOLATE);
					A_OverlayScale(OverlayId(), 1 + abs(Roll)*0.05 + SprScal - HandDown*0.002, 1 + abs(Roll)*.05 + SprScal - HandDown*0.002, WOF_INTERPOLATE);
				}
				Roll=OrigRoll;
				Pitch = OrigPitch;
			}
			TNT1 A 0 A_JumpIf(!Invoker.Crawling, "Crawl");
			Loop;
			
		
		CrawlR:
			TNT1 A 1 A_JumpIf(invoker.Crawling &&
			!((Player.ReadyWeapon is 'NSHFragGrenades') && Player.GetPSprite(27) && Player.GetPSprite(27).Sprite == GetSpriteIndex("GRNDA0") && Health<1)
				, "CrawlingR");
			TNT1 A 0 {A_OverlayFlags(OverlayId(), PSPF_MIRROR|PSPF_FLIP|PSPF_ADDBOB|PSPF_ADDWEAPON, 1);
				A_OverlayPivotAlign(OverlayId(), PSPA_CENTER, PSPA_CENTER);
				A_OverlayOffset(OverlayId(), -20, (-Pitch)+40+Roll);
				A_OverlayRotate(OverlayId(), -35 - Roll);
				A_OverlayScale(OverlayId(), 1.05 + abs(Roll)*0.05, 1.05 + abs(Roll)*.05);}
			Loop;
			
		CrawlingR:
			HGRB C 0 A_JumpIf(!Invoker.RightCrawl, 8);
			HGRB G 0 A_Jumpif((Roll>0&&Pitch>40), 7);
			HGRB E 0 A_Jumpif((Roll>0), 6);
			HGRB F 0 A_JumpIf((Pitch>40&&Roll>-7), 5);
			HGRB D 0 A_Jumpif((Roll>-7), 4);
			HGRB A 0 A_JumpIf(Roll>-12, 3);
			HGRB H 0 A_JumpIf(Roll<=-14, 2);
			HGRB I 0;
			HGRB # 1 {
				A_OverlayFlags(OverlayId(), PSPF_MIRROR|PSPF_FLIP|PSPF_ADDBOB|PSPF_ADDWEAPON, 1);
				A_OverlayPivotAlign(OverlayId(), PSPA_CENTER, PSPA_CENTER);
				Int HandDown = 0;
				if(Player.Cmd.Buttons&BT_ATTACK||Player.Cmd.Buttons&BT_ALTATTACK||Player.Cmd.Buttons&BT_USER2)HandDown = 400;
				if(Height>20)HandDown = 30 + (Height-16)*2;
				Float Pit = 0;
				Float OrigPitch = Pitch;
				Float SprRot = 0;
				Float SprScal = 0;
				if(OrigPitch>40 && Roll<=0 && Roll>-7){SprRot=7;SprScal = -0.1;}
				else if(OrigPitch>40 && Roll>0)SprRot = -7;
				if(OrigPitch>31){Pitch*=Pitch*0.03;Pit=(Pitch-31)*1.1;}
				Float OrigRoll = Roll;
				if(Roll<0)
				{
					Float SprRot2, SprScal2;
					if(Roll<=-12){SprRot2 = -10; SprScal2 = 0.1;}
					if(Roll>-2||Roll<-13)Roll*=1.6;
					if(OrigPitch>22)Pit=(Pitch-22)*1.1;
					A_OverlayRotate(OverlayId(), -35 - Roll*0.3 + SprRot2, WOF_INTERPOLATE);
					A_OverlayOffset(OverlayId(), -30-invoker.Yaw.GetValue() + Roll*3.15-Pit, (-Pitch)+30+Roll*2+HandDown);
					A_OverlayScale(OverlayId(), 1 + Roll*.015 + SprScal2, 1 + Roll*.01 + SprScal2);
				}
				else
				{
					if((Roll>0&&Roll<2)||(Roll>13&&Roll<=15))Roll*=1.1;
					A_OverlayRotate(OverlayId(), -35 - Roll + SprRot + HandDown*.2, WOF_INTERPOLATE);
					A_OverlayOffset(OverlayId(), -20-invoker.Yaw.GetValue()-Pit + HandDown*.75, (-Pitch)+40+Roll+HandDown);
					A_OverlayScale(OverlayId(), 1.05 + abs(Roll)*0.05 + SprScal - HandDown*.002, 1.05 + abs(Roll)*.05 + SprScal - HandDown*.002);
				}
				Roll = OrigRoll;
				Pitch = OrigPitch;
			}
		CrawlingRLoop:
			HGRB C 0 A_JumpIf(!Invoker.RightCrawl, 8);
			HGRB G 0 A_Jumpif((Roll>0&&Pitch>40), 7);
			HGRB E 0 A_Jumpif((Roll>0), 6);
			HGRB F 0 A_JumpIf((Pitch>40&&Roll>-7), 5);
			HGRB D 0 A_Jumpif((Roll>-7), 4);
			HGRB A 0 A_JumpIf(Roll>-12, 3);
			HGRB H 0 A_JumpIf(Roll<=-14, 2);
			HGRB I 0;
			HGRB # 1 {
				A_OverlayFlags(OverlayId(), PSPF_MIRROR|PSPF_FLIP|PSPF_ADDBOB|PSPF_ADDWEAPON, 1);
				A_OverlayPivotAlign(OverlayId(), PSPA_CENTER, PSPA_CENTER);
				Int HandDown = 0;
				if(Player.Cmd.Buttons&BT_ATTACK||Player.Cmd.Buttons&BT_ALTATTACK||Player.Cmd.Buttons&BT_USER2)HandDown = 400;
				if(Height>20)HandDown = 30 + (Height-16)*2;
				Float Pit = 0;
				Float OrigPitch = Pitch;
				Float SprRot = 0;
				Float SprScal = 0;
				if(OrigPitch>40 && Roll<=0 && Roll>-7){SprRot=7;SprScal = -0.1;}
				else if(OrigPitch>40 && Roll>0)SprRot = -7;
				if(OrigPitch>31){Pitch*=Pitch*0.03;Pit=(Pitch-31)*1.1;}
				Float OrigRoll = Roll;
				if(Roll<0)
				{
					Float SprRot2, SprScal2;
					if(Roll<=-12){SprRot2 = -10; SprScal2 = 0.1;}
					if(Roll>-2||Roll<-13)Roll*=1.6;
					if(OrigPitch>22)Pit=(Pitch-22)*1.1;
					A_OverlayRotate(OverlayId(), -35 - Roll*0.3 + SprRot2, WOF_INTERPOLATE);
					A_OverlayOffset(OverlayId(), -30-invoker.Yaw.GetValue() + Roll*3.15-Pit, (-Pitch)+30+Roll*2+HandDown, WOF_INTERPOLATE);
					A_OverlayScale(OverlayId(), 1 + Roll*.015 + SprScal2, 1 + Roll*.01 + SprScal2, WOF_INTERPOLATE);
				}
				else
				{
					if((Roll>0&&Roll<2)||(Roll>13&&Roll<=15))Roll*=1.1;
					A_OverlayRotate(OverlayId(), -35 - Roll + SprRot + HandDown*.2, WOF_INTERPOLATE);
					A_OverlayOffset(OverlayId(), -20-invoker.Yaw.GetValue()-Pit + HandDown*.75, (-Pitch)+40+Roll+HandDown, WOF_INTERPOLATE);
					A_OverlayScale(OverlayId(), 1.05 + abs(Roll)*0.05 + SprScal - HandDown*.002, 1.05 + abs(Roll)*.05 + SprScal - HandDown*.002, WOF_INTERPOLATE);
				}
				Roll = OrigRoll;
				Pitch = OrigPitch;
			}
			TNT1 # 0 A_JumpIf(!Invoker.Crawling, "CrawlR");
			Loop;
	}
}